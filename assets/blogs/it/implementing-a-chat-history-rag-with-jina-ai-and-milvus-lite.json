{
  "slug": "implementing-a-chat-history-rag-with-jina-ai-and-milvus-lite",
  "id": "665d76034b4b4c0001ba1bb3",
  "uuid": "851bc948-281c-4fab-bc11-941c900b086b",
  "title": "Implementazione di una Chat History RAG con Jina AI e Milvus Lite",
  "html": "<p>Gli sviluppatori e gli ingegneri operativi attribuiscono grande valore a un'infrastruttura che possono configurare facilmente, avviare rapidamente e, in seguito, distribuire efficacemente in un ambiente di produzione scalato senza ulteriori complicazioni. Per questo motivo, <a href=\"https://milvus.io/docs/milvus_lite.md?ref=jina-ai-gmbh.ghost.io\"><u>Milvus Lite</u></a>, l'ultimo database vettoriale leggero offerto dal nostro partner <a href=\"https://milvus.io/?ref=jina-ai-gmbh.ghost.io\"><u>Milvus</u></a>, è uno strumento importante per gli sviluppatori Python per sviluppare rapidamente applicazioni di ricerca, specialmente quando utilizzato insieme a modelli di ricerca di alta qualità e facili da usare.</p><p>In questo articolo, descriveremo come Milvus Lite integra <a href=\"https://jina.ai/embeddings/?ref=jina-ai-gmbh.ghost.io\"><u>Jina Embeddings v2</u></a> e <a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><u>Jina Reranker v1</u></a> utilizzando l'esempio di un'applicazione <a href=\"https://jina.ai/news/albus-by-springworks-empowering-employees-with-enterprise-search?ref=jina-ai-gmbh.ghost.io\"><u>Retrieval Augmented Generation (RAG)</u></a> costruita sulle chat dei canali interni pubblici di un'azienda fittizia per permettere ai dipendenti di ottenere risposte alle loro domande organizzative in modo accurato e utile.</p><h2 id=\"overview-of-milvus-lite-jina-embeddings-and-jina-reranker\">Panoramica di Milvus Lite, Jina Embeddings e Jina Reranker</h2><p>Milvus Lite è una nuova versione leggera del database vettoriale leader Milvus, che ora viene offerto anche come libreria Python. Milvus Lite condivide la stessa API di Milvus distribuito su Docker o Kubernetes ma può essere facilmente installato tramite un comando pip di una riga, senza configurare un server.</p><p>Con l'integrazione di Jina Embeddings v2 e Jina Reranker v1 in <a href=\"https://github.com/milvus-io/pymilvus?ref=jina-ai-gmbh.ghost.io\"><u>pymilvus</u></a>, l'SDK Python di Milvus, ora hai l'opzione di incorporare direttamente i documenti utilizzando lo stesso client Python per qualsiasi modalità di distribuzione di Milvus, incluso Milvus Lite. Puoi trovare i dettagli dell'integrazione di Jina Embeddings e Reranker nelle <a href=\"https://milvus.io/docs/integrate_with_jina.md?ref=jina-ai-gmbh.ghost.io\"><u>pagine di documentazione</u></a> di pymilvus.</p><p>Con la sua finestra di contesto di 8k token e capacità multilingue, Jina Embeddings v2 codifica la semantica ampia del testo e garantisce un recupero accurato. Aggiungendo Jina Reranker v1 alla pipeline, puoi perfezionare ulteriormente i tuoi risultati attraverso la codifica incrociata dei risultati recuperati direttamente con la query per una comprensione contestuale più profonda.</p><h2 id=\"milvus-and-jina-ai-models-in-action\">Milvus e Modelli Jina AI in Azione</h2><p>Questo tutorial si concentrerà su un caso d'uso pratico: l'interrogazione della cronologia delle chat Slack di un'azienda per rispondere a un'ampia gamma di domande basate su conversazioni passate.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/E-R-slack--2-.jpg\" class=\"kg-image\" alt=\"Flowchart detailing the Rust community's model training process, featuring steps from the &quot;Next training step?&quot; query through\" loading=\"lazy\" width=\"1600\" height=\"900\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/E-R-slack--2-.jpg 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2024/06/E-R-slack--2-.jpg 1000w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/E-R-slack--2-.jpg 1600w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">Flusso del processo per interrogare i dati Slack usando una query di esempio</span></figcaption></figure><p>Per esempio, un dipendente potrebbe chiedere informazioni sul prossimo passo in un processo di training AI, come nello schema del processo sopra. Utilizzando Jina Embeddings, Jina Reranker e Milvus, possiamo identificare accuratamente le informazioni rilevanti nei messaggi Slack registrati. Questa applicazione può migliorare la produttività sul posto di lavoro rendendo più facile l'accesso a informazioni preziose dalle comunicazioni passate.</p><p>Per generare le risposte, utilizzeremo <a href=\"https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1?ref=jina-ai-gmbh.ghost.io\"><u>Mixtral 7B Instruct</u></a> attraverso <a href=\"https://python.langchain.com/v0.1/docs/integrations/llms/huggingface_endpoint/?ref=jina-ai-gmbh.ghost.io\"><u>l'integrazione di HuggingFace in Langchain</u></a>. Per utilizzare il modello, hai bisogno di un token di accesso HuggingFace che puoi generare come descritto <a href=\"https://huggingface.co/docs/hub/en/security-tokens?ref=jina-ai-gmbh.ghost.io\"><u>qui</u></a>.</p><p>Puoi seguire il tutorial su <a href=\"https://colab.research.google.com/github/jina-ai/workshops/blob/main/notebooks/embeddings/milvus/milvus_lite_jina_integration.ipynb?ref=jina-ai-gmbh.ghost.io\"><u>Colab</u></a> o <a href=\"https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/milvus/milvus_lite_jina_integration.ipynb?ref=jina-ai-gmbh.ghost.io\"><u>scaricando il notebook</u></a>.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://colab.research.google.com/github/jina-ai/workshops/blob/main/notebooks/embeddings/milvus/milvus_lite_jina_integration.ipynb?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Google Colab</div><div class=\"kg-bookmark-description\"></div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://ssl.gstatic.com/colaboratory-static/common/0d8af74d4089ab8b6d127bd74854be98/img/favicon.ico\" alt=\"\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://colab.research.google.com/img/colab_favicon_256px.png\" alt=\"\"></div></a></figure><h3 id=\"about-the-dataset\">Informazioni sul Dataset</h3><p>Il dataset utilizzato in questo tutorial è stato generato utilizzando GPT-4 e intende replicare le cronologie delle chat dei canali Slack di Blueprint AI. Blueprint è una startup AI fittizia che sviluppa i propri modelli fondazionali. Puoi scaricare il dataset <a href=\"https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/milvus/chat_history.json?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\"><u>qui</u></a>.</p><p>I dati sono organizzati in <em>canali</em>, ognuno rappresentativo di una collezione di thread Slack correlati. Ogni canale ha un'etichetta di argomento, una delle dieci opzioni: <em>distribuzione del modello</em>, <em>training del modello</em>, <em>fine-tuning del modello</em>, <em>etica e mitigazione dei bias</em>, <em>feedback degli utenti</em>, <em>vendite</em>, <em>marketing</em>, <em>onboarding del modello</em>, <em>design creativo</em> e <em>gestione del prodotto</em>. Un partecipante è noto come \"utente esperto\". Puoi utilizzare questo campo per validare i risultati dell'interrogazione per trovare l'utente più esperto in un argomento, come ti mostreremo di seguito.</p><p>Ogni canale contiene anche una cronologia delle chat con thread di conversazione fino a 100 messaggi per canale. Ogni messaggio nel dataset contiene le seguenti informazioni:</p><ul><li>L'<strong>utente</strong> che ha inviato il messaggio</li><li>Il <strong>testo del messaggio</strong> inviato dall'utente</li><li>Il <strong>timestamp</strong> del messaggio</li><li>Il <strong>nome del file</strong> che l'utente potrebbe aver allegato al messaggio</li><li>L'<strong>ID del messaggio</strong></li><li>L'<strong>ID del messaggio genitore</strong> se il messaggio era all'interno di un thread originato da un altro messaggio</li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/image-1.png\" class=\"kg-image\" alt=\"Diagram showing the structure of a messaging system, detailing the relationship between 'Channel' and 'Message' entities, wit\" loading=\"lazy\" width=\"780\" height=\"450\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/image-1.png 600w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/image-1.png 780w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">Un diagramma UML della struttura dei dati delle chat.</span></figcaption></figure><h3 id=\"set-up-the-environment\">Configurazione dell'Ambiente</h3><p>Per iniziare, installa tutti i componenti necessari:</p><pre><code class=\"language-Python\">pip install -U pymilvus\npip install -U \"pymilvus[model]\"\npip install langchain\npip install langchain-community\n</code></pre><p>Scarica il dataset:</p><pre><code class=\"language-Python\">import os\n\nif not os.path.exists(\"chat_history.json\"):\n    !wget https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/milvus/chat_history.json</code></pre><p>Imposta la tua Jina AI API Key in una variabile d'ambiente. Puoi generarne una <a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><u>qui</u></a>.</p><pre><code class=\"language-Python\">import os\nimport getpass\n\nos.environ[\"JINAAI_API_KEY\"] = getpass.getpass(prompt=\"Jina AI API Key: \")</code></pre><p>Fai lo stesso per il tuo Token Hugging Face. Puoi trovare come generarne uno <a href=\"https://huggingface.co/docs/hub/en/security-tokens?ref=jina-ai-gmbh.ghost.io\"><u>qui</u></a>. Assicurati che sia impostato su <code>READ</code> per accedere a <a href=\"https://huggingface.co/docs/hub/en/index?ref=jina-ai-gmbh.ghost.io\"><u>Hugging Face Hub</u></a>.</p><pre><code class=\"language-Python\">os.environ[\"HUGGINGFACEHUB_API_TOKEN\"] = getpass.getpass(prompt=\"Hugging Face Token: \")</code></pre><h3 id=\"create-the-milvus-collection\">Creazione della Collezione Milvus</h3><p>Crea la Collezione Milvus per indicizzare i dati:</p><pre><code class=\"language-Python\">from pymilvus import MilvusClient, DataType\n\n# Specify a local file name as uri parameter of MilvusClient to use Milvus Lite\nclient = MilvusClient(\"milvus_jina.db\")\n\nschema = MilvusClient.create_schema(\n    auto_id=True,\n    enable_dynamic_field=True,\n)\n\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, description=\"The Primary Key\", is_primary=True)\nschema.add_field(field_name=\"embedding\", datatype=DataType.FLOAT_VECTOR, description=\"The Embedding Vector\", dim=768)\n\nindex_params = client.prepare_index_params()\nindex_params.add_index(field_name=\"embedding\", metric_type=\"COSINE\", index_type=\"AUTOINDEX\")\n\nclient.create_collection(collection_name=\"milvus_jina\", schema=schema, index_params=index_params)</code></pre><h3 id=\"prepare-the-data\">Preparare i dati</h3><p>Analizza la cronologia della chat ed estrai i metadati:</p><pre><code class=\"language-Python\">import json\n\nwith open(\"chat_history.json\", \"r\", encoding=\"utf-8\") as file:\n    chat_data = json.load(file)\n\nmessages = []\nmetadatas = []\n\nfor channel in chat_data:\n  chat_history = channel[\"chat_history\"]\n  chat_topic = channel[\"topic\"]\n  chat_expert = channel[\"expert_user\"]\n  for message in chat_history:\n    text = f\"\"\"{message[\"user\"]}: {message[\"message\"]}\"\"\"\n    messages.append(text)\n    meta = {\n        \"time_stamp\": message[\"time_stamp\"],\n        \"file_name\": message[\"file_name\"],\n        \"parent_message_nr\": message[\"parent_message_nr\"],\n        \"channel\": chat_topic,\n        \"expert\": True if message[\"user\"] == chat_expert else False\n    }\n    metadatas.append(meta)\n</code></pre><h3 id=\"embed-the-chat-data\">Incorporare i dati della chat</h3><p>Crea embedding per ogni messaggio utilizzando Jina Embeddings v2 per recuperare informazioni rilevanti dalla chat:</p><pre><code class=\"language-Python\">from pymilvus.model.dense import JinaEmbeddingFunction\n\njina_ef = JinaEmbeddingFunction(\"jina-embeddings-v2-base-en\")\n\nembeddings = jina_ef.encode_documents(messages)</code></pre><h3 id=\"index-the-chat-data\">Indicizzare i dati della chat</h3><p>Indicizza i messaggi, i loro embedding e i relativi metadati:</p><pre><code class=\"language-Python\">collection_data = [{\n    \"message\": message,\n    \"embedding\": embedding,\n    \"metadata\": metadata\n} for message, embedding, metadata in zip(messages, embeddings, metadatas)]\n\ndata = client.insert(\n    collection_name=\"milvus_jina\",\n    data=collection_data\n)</code></pre><h3 id=\"query-the-chat-history\">Interrogare la cronologia chat</h3><p>È il momento di fare una domanda:</p><pre><code class=\"language-Python\">query = \"Who knows the most about encryption protocols in my team?\"</code></pre><p>Ora incorpora la query e recupera i messaggi rilevanti. Qui recuperiamo i cinque messaggi più rilevanti e li riordiniamo utilizzando Jina Reranker v1:</p><pre><code class=\"language-Python\">from pymilvus.model.reranker import JinaRerankFunction\n\nquery_vectors = jina_ef.encode_queries([query])\n\nresults = client.search(\n    collection_name=\"milvus_jina\",\n    data=query_vectors,\n    limit=5,\n)\n\nresults = results[0]\n\nids = [results[i][\"id\"] for i in range(len(results))]\n\nresults = client.get(\n    collection_name=\"milvus_jina\",\n    ids=ids,\n    output_fields=[\"id\", \"message\", \"metadata\"]\n)\n\njina_rf = JinaRerankFunction(\"jina-reranker-v1-base-en\")\n\ndocuments = [results[i][\"message\"] for i in range(len(results))]\nreranked_documents = jina_rf(query, documents)\n\nreranked_messages = []\nfor reranked_document in reranked_documents:\n  idx = reranked_document.index\n  reranked_messages.append(results[idx])</code></pre><p>Infine, genera una risposta alla query utilizzando Mixtral 7B Instruct e i messaggi riordinati come contesto:</p><pre><code class=\"language-Python\">from langchain.prompts import PromptTemplate\nfrom langchain_community.llms import HuggingFaceEndpoint\n\nllm = HuggingFaceEndpoint(repo_id=\"mistralai/Mixtral-8x7B-Instruct-v0.1\")\n\nprompt = \"\"\"&lt;s&gt;[INST] Context information is below.\\\\n\n        It includes the five most relevant messages to the query, sorted based on their relevance to the query.\\\\n\n        ---------------------\\\\n\n        {context_str}\\\\\\\\n\n        ---------------------\\\\n\n        Given the context information and not prior knowledge,\n        answer the query. Please be brief, concise, and complete.\\\\n\n        If the context information does not contain an answer to the query,\n        respond with \\\\\"No information\\\\\".\\\\n\n        Query: {query_str}[/INST] &lt;/s&gt;\"\"\"\n\nprompt = PromptTemplate(template=prompt, input_variables=[\"query_str\", \"context_str\"])\n\nllm_chain = prompt | llm\n\nanswer = llm_chain.invoke({\"query_str\":query, \"context_str\":reranked_messages})\n\nprint(f\"\\n\\nANSWER:\\n\\n{answer}\")</code></pre><p>La risposta alla nostra domanda è:</p><blockquote>\"Basandosi sulle informazioni contestuali, User5 sembra essere il più esperto in protocolli di crittografia nel tuo team. Hanno menzionato che i nuovi protocolli migliorano significativamente la sicurezza dei dati, specialmente per i deployment cloud.\"</blockquote><p>Se leggi i messaggi in <code>chat_history.json</code>, puoi verificare tu stesso se User5 è l'utente più esperto.</p><h2 id=\"summary\">Riepilogo</h2><p>Abbiamo visto come configurare Milvus Lite, incorporare i dati delle chat utilizzando Jina Embeddings v2 e perfezionare i risultati di ricerca con Jina Reranker v1, tutto all'interno di un caso d'uso pratico di ricerca in una cronologia chat di Slack. Milvus Lite semplifica lo sviluppo di applicazioni Python senza la necessità di configurazioni server complesse. La sua integrazione con Jina Embeddings e Reranker mira ad aumentare la produttività rendendo più facile l'accesso alle informazioni preziose dal tuo ambiente di lavoro.</p><h2 id=\"use-jina-ai-models-and-milvus-now\"><strong>Usa ora i modelli Jina AI e Milvus</strong></h2><p><a href=\"https://milvus.io/docs/integrate_with_jina.md?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\"><u>Milvus Lite</u></a> con integrati <a href=\"https://jina.ai/embeddings?ref=jina-ai-gmbh.ghost.io\"><u>Jina Embeddings</u></a> e <a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><u>Reranker</u></a> ti fornisce una pipeline di elaborazione completa, pronta all'uso con poche righe di codice.</p><p>Ci piacerebbe conoscere i tuoi casi d'uso e parlare di come l'estensione Jina AI Milvus possa adattarsi alle tue esigenze aziendali. Contattaci tramite <a href=\"https://jina.ai/contact-sales?ref=jina-ai-gmbh.ghost.io\"><u>il nostro sito web</u></a> o <a href=\"https://discord.jina.ai/?ref=jina-ai-gmbh.ghost.io\"><u>il nostro canale Discord</u></a> per condividere il tuo feedback e rimanere aggiornato sui nostri ultimi modelli. Per domande sull'integrazione tra Milvus e Jina AI, unisciti alla <a href=\"https://milvus.io/community?ref=jina-ai-gmbh.ghost.io\"><u>community Milvus</u></a>.</p>",
  "comment_id": "665d76034b4b4c0001ba1bb3",
  "feature_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/06/Blog-images--39-.jpg",
  "featured": false,
  "visibility": "public",
  "created_at": "2024-06-03T09:51:31.000+02:00",
  "updated_at": "2024-07-08T21:08:43.000+02:00",
  "published_at": "2024-06-03T16:09:33.000+02:00",
  "custom_excerpt": "Enhance your search applications in Python with Jina Embeddings and Reranker and lightweight, easy-to-deploy Milvus Lite.\n",
  "codeinjection_head": null,
  "codeinjection_foot": null,
  "custom_template": null,
  "canonical_url": null,
  "authors": [
    {
      "id": "65e85e35b22368000152a4bf",
      "name": "Francesco Kruk",
      "slug": "francesco",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/03/Portrait-Picture_Low.jpg",
      "cover_image": null,
      "bio": null,
      "website": null,
      "location": null,
      "facebook": null,
      "twitter": null,
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/francesco/"
    },
    {
      "id": "641c23a2f4d50d003d590474",
      "name": "Saahil Ognawala",
      "slug": "saahil",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2023/03/profile-option-2.jpg",
      "cover_image": null,
      "bio": "Senior Product Manager at Jina AI",
      "website": "http://www.saahilognawala.com/",
      "location": "Munich, DE",
      "facebook": null,
      "twitter": "@saahil",
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/saahil/"
    }
  ],
  "tags": [
    {
      "id": "634a1a8ccebfc1003d8ab706",
      "name": "Tech Blog",
      "slug": "tech-blog",
      "description": null,
      "feature_image": null,
      "visibility": "public",
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "canonical_url": null,
      "accent_color": null,
      "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
    }
  ],
  "primary_author": {
    "id": "65e85e35b22368000152a4bf",
    "name": "Francesco Kruk",
    "slug": "francesco",
    "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/03/Portrait-Picture_Low.jpg",
    "cover_image": null,
    "bio": null,
    "website": null,
    "location": null,
    "facebook": null,
    "twitter": null,
    "meta_title": null,
    "meta_description": null,
    "url": "https://jina-ai-gmbh.ghost.io/author/francesco/"
  },
  "primary_tag": {
    "id": "634a1a8ccebfc1003d8ab706",
    "name": "Tech Blog",
    "slug": "tech-blog",
    "description": null,
    "feature_image": null,
    "visibility": "public",
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "canonical_url": null,
    "accent_color": null,
    "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
  },
  "url": "https://jina-ai-gmbh.ghost.io/podcast/implementing-a-chat-history-rag-with-jina-ai-and-milvus-lite/",
  "excerpt": "Migliora le tue applicazioni di ricerca in Python con Jina Embeddings e Reranker e con Milvus Lite, leggero e facile da implementare.",
  "reading_time": 6,
  "access": true,
  "comments": false,
  "og_image": null,
  "og_title": null,
  "og_description": null,
  "twitter_image": null,
  "twitter_title": null,
  "twitter_description": null,
  "meta_title": null,
  "meta_description": null,
  "email_subject": null,
  "frontmatter": null,
  "feature_image_alt": "Black background with vivid geometric shapes on the sides and central logos \"Embeddings,\" \"Reranker,\" and \"Milvus.\"",
  "feature_image_caption": null
}