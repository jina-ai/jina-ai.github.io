{
  "slug": "jina-classifier-for-high-performance-zero-shot-and-few-shot-classification",
  "id": "6711fbbd708dbe0001924974",
  "uuid": "65c883e0-556a-4079-b07a-66e9e9926717",
  "title": "API классификатора Jina для высокопроизводительной классификации в режимах zero-shot и few-shot",
  "html": "<p>Классификация - это распространенная задача для эмбеддингов. Текстовые эмбеддинги могут категоризировать текст по предопределенным меткам для обнаружения спама или анализа тональности. Мультимодальные эмбеддинги, такие как <code>jina-clip-v1</code>, могут применяться для фильтрации контента или аннотации тегов. Недавно классификация также нашла применение в маршрутизации запросов к соответствующим LLM на основе сложности и стоимости, например, простые арифметические запросы могут быть направлены к небольшой языковой модели. Сложные задачи рассуждения могут быть направлены к более мощным, но более дорогим LLM.</p><p>Сегодня мы представляем новый <strong>Classifier API</strong> от Jina AI's Search Foundation. Поддерживая классификацию <strong>zero-shot</strong> и <strong>few-shot</strong> в режиме онлайн, он построен на наших последних моделях эмбеддингов, таких как <code>jina-embeddings-v3</code> и <code>jina-clip-v1</code>. Classifier API основан на <a href=\"https://jmlr.org/papers/v7/crammer06a.html?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\">онлайн пассивно-агрессивном обучении</a>, позволяющем адаптироваться к новым данным в реальном времени. Пользователи могут начать с zero-shot классификатора и использовать его немедленно. Затем они могут постепенно обновлять классификатор, отправляя новые примеры или когда происходит концептуальный сдвиг. Это обеспечивает эффективную, масштабируемую классификацию различных типов контента <em>без</em> обширных начальных размеченных данных. Пользователи также могут публиковать свои классификаторы для общего пользования. Когда выходят наши новые эмбеддинги, такие как предстоящий мультиязычный <code>jina-clip-v2</code>, пользователи могут немедленно получить к ним доступ через Classifier API, обеспечивая актуальные возможности классификации.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://jina.ai/classifier?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Classifier API</div><div class=\"kg-bookmark-description\">High performance classifier for image and text classification.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jina.ai/icons/favicon-128x128.png\" alt=\"\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jina.ai/banner-classifier.png\" alt=\"\" onerror=\"this.style.display = 'none'\"></div></a></figure><h2 id=\"zero-shot-classification\">Zero-Shot Классификация</h2><p>Classifier API предлагает мощные возможности zero-shot классификации, позволяющие категоризировать текст или изображения без предварительного обучения на размеченных данных. Каждый классификатор начинается с возможностей zero-shot, которые позже могут быть улучшены дополнительными тренировочными данными или обновлениями - тема, которую мы рассмотрим в следующем разделе.</p><h3 id=\"example-1-route-llm-requests\">Пример 1: Маршрутизация LLM Запросов</h3><p>Вот пример использования classifier API для маршрутизации LLM запросов:</p><pre><code class=\"language-bash\">curl https://api.jina.ai/v1/classify \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY_HERE\" \\\n  -d '{\n    \"model\": \"jina-embeddings-v3\",\n    \"labels\": [\n      \"Simple task\",\n      \"Complex reasoning\",\n      \"Creative writing\"\n    ],\n    \"input\": [\n      \"Calculate the compound interest on a principal of $10,000 invested for 5 years at an annual rate of 5%, compounded quarterly.\",\n      \"分析使用CRISPR基因编辑技术在人类胚胎中的伦理影响。考虑潜在的医疗益处和长期社会后果。\",\n      \"AIが自意識を持つディストピアの未来を舞台にした短編小説を書いてください。人間とAIの関係や意識の本質をテーマに探求してください。\",\n      \"Erklären Sie die Unterschiede zwischen Merge-Sort und Quicksort-Algorithmen in Bezug auf Zeitkomplexität, Platzkomplexität und Leistung in der Praxis.\",\n      \"Write a poem about the beauty of nature and its healing power on the human soul.\",\n      \"Translate the following sentence into French: The quick brown fox jumps over the lazy dog.\"\n    ]\n  }'</code></pre><p>Этот пример демонстрирует использование <code>jina-embeddings-v3</code> для маршрутизации пользовательских запросов на нескольких языках (английском, китайском, японском и немецком) по трем категориям, которые соответствуют трем разным размерам LLM. Формат ответа API следующий:</p><pre><code class=\"language-json\">{\n  \"usage\": {\"total_tokens\": 256, \"prompt_tokens\": 256},\n  \"data\": [\n    {\"object\": \"classification\", \"index\": 0, \"prediction\": \"Simple task\", \"score\": 0.35216382145881653},\n    {\"object\": \"classification\", \"index\": 1, \"prediction\": \"Complex reasoning\", \"score\": 0.34310275316238403},\n    {\"object\": \"classification\", \"index\": 2, \"prediction\": \"Creative writing\", \"score\": 0.3487184941768646},\n    {\"object\": \"classification\", \"index\": 3, \"prediction\": \"Complex reasoning\", \"score\": 0.35207709670066833},\n    {\"object\": \"classification\", \"index\": 4, \"prediction\": \"Creative writing\", \"score\": 0.3638903796672821},\n    {\"object\": \"classification\", \"index\": 5, \"prediction\": \"Simple task\", \"score\": 0.3561534285545349}\n  ]\n}</code></pre><p>Ответ включает:</p><ul><li><code>usage</code>: Информация об использовании токенов.</li><li><code>data</code>: Массив результатов классификации, по одному для каждого входа.<ul><li>Каждый результат содержит предсказанную метку (<code>prediction</code>) и оценку уверенности (<code>score</code>). <code>score</code> для каждого класса вычисляется через softmax нормализацию - для zero-shot он основан на косинусном сходстве между входными эмбеддингами и эмбеддингами меток <a href=\"https://jina.ai/news/jina-embeddings-v3-a-frontier-multilingual-embedding-model?ref=jina-ai-gmbh.ghost.io#parameter-task\" rel=\"noreferrer\">под task-LoRA <code>classification</code></a>; в то время как для few-shot он основан на изученных линейных преобразованиях входного эмбеддинга для каждого класса - в результате получаются вероятности, сумма которых равна 1 по всем классам.</li><li><code>index</code> соответствует позиции входа в исходном запросе.</li></ul></li></ul><h3 id=\"example-2-categorize-image-text\">Пример 2: Категоризация Изображений и Текста</h3><p>Давайте рассмотрим мультимодальный пример с использованием <code>jina-clip-v1</code>. Эта модель может классифицировать как текст, так и изображения, что делает ее идеальной для категоризации контента различных типов медиа. Рассмотрим следующий API-вызов:</p><pre><code class=\"language-bash\">curl https://api.jina.ai/v1/classify \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY_HERE\" \\\n  -d '{\n    \"model\": \"jina-clip-v1\",\n    \"labels\": [\n      \"Food and Dining\",\n      \"Technology and Gadgets\",\n      \"Nature and Outdoors\",\n      \"Urban and Architecture\"\n    ],\n    \"input\": [\n      {\"text\": \"A sleek smartphone with a high-resolution display and multiple camera lenses\"},\n      {\"text\": \"Fresh sushi rolls served on a wooden board with wasabi and ginger\"},\n      {\"image\": \"https://picsum.photos/id/11/367/267\"},\n      {\"image\": \"https://picsum.photos/id/22/367/267\"},\n      {\"text\": \"Vibrant autumn leaves in a dense forest with sunlight filtering through\"},\n      {\"image\": \"https://picsum.photos/id/8/367/267\"}\n    ]\n  }'</code></pre><p>Обратите внимание, как мы загружаем изображения в запросе, вы также можете использовать строку <code>base64</code> для представления изображения. API возвращает следующие результаты классификации:</p><pre><code class=\"language-json\">{\n  \"usage\": {\"total_tokens\": 12125, \"prompt_tokens\": 12125},\n  \"data\": [\n    {\"object\": \"classification\", \"index\": 0, \"prediction\": \"Technology and Gadgets\", \"score\": 0.30329811573028564},\n    {\"object\": \"classification\", \"index\": 1, \"prediction\": \"Food and Dining\", \"score\": 0.2765541970729828},\n    {\"object\": \"classification\", \"index\": 2, \"prediction\": \"Nature and Outdoors\", \"score\": 0.29503118991851807},\n    {\"object\": \"classification\", \"index\": 3, \"prediction\": \"Urban and Architecture\", \"score\": 0.2648046910762787},\n    {\"object\": \"classification\", \"index\": 4, \"prediction\": \"Nature and Outdoors\", \"score\": 0.3133063316345215},\n    {\"object\": \"classification\", \"index\": 5, \"prediction\": \"Technology and Gadgets\", \"score\": 0.27474141120910645}\n  ]\n}</code></pre><h3 id=\"example-3-detect-if-jina-reader-gets-genuine-content\">Пример 3: Определение Подлинности Контента в Jina Reader</h3><p>Интересное применение zero-shot классификации - определение доступности веб-сайта через <a href=\"https://jina.ai/reader?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\">Jina Reader</a>. Хотя это может показаться простой задачей, на практике она удивительно сложна. Заблокированные сообщения сильно различаются от сайта к сайту, появляясь на разных языках и указывая различные причины (платный доступ, ограничения частоты, сбои сервера). Это разнообразие делает сложным полагаться на regex или фиксированные правила для охвата всех сценариев.</p><pre><code class=\"language-python\">import requests\nimport json\n\nresponse1 = requests.get('https://r.jina.ai/https://jina.ai')\n\nurl = 'https://api.jina.ai/v1/classify'\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer $YOUR_API_KEY_HERE'\n}\ndata = {\n    'model': 'jina-embeddings-v3',\n    'labels': ['Blocked', 'Accessible'],\n    'input': [{'text': response1.text[:8000]}]\n}\nresponse2 = requests.post(url, headers=headers, data=json.dumps(data))\n\nprint(response2.text)</code></pre><p>Скрипт получает контент через <code>r.jina.ai</code> и классифицирует его как <code>\"Blocked\"</code> или <code>\"Accessible\"</code> используя Classifier API. Например, <a href=\"https://r.jina.ai/https://www.crunchbase.com/organization/jina-ai?ref=jina-ai-gmbh.ghost.io\">https://r.jina.ai/https://www.crunchbase.com/organization/jina-ai</a> вероятно будет <code>\"Blocked\"</code> из-за ограничений доступа, в то время как <a href=\"https://r.jina.ai/https://jina.ai?ref=jina-ai-gmbh.ghost.io\">https://r.jina.ai/https://jina.ai</a> должен быть \"Accessible\".</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-json\">{\"usage\":{\"total_tokens\":185,\"prompt_tokens\":185},\"data\":[{\"object\":\"classification\",\"index\":0,\"prediction\":\"Blocked\",\"score\":0.5392698049545288}]}</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">Classifier API может эффективно различать подлинный контент и заблокированные результаты от Jina Reader.</span></p></figcaption></figure><p>Этот пример использует <code>jina-embeddings-v3</code> и предлагает быстрый, автоматизированный способ мониторинга доступности веб-сайтов, полезный для систем агрегации контента или веб-скрапинга, особенно в многоязычных условиях.</p><h3 id=\"example-4-filtering-statements-from-opinions-for-grounding\">Пример 4: Фильтрация Утверждений от Мнений для Обоснования</h3><p>Еще одно интересное применение классификации с нулевым обучением — фильтрация утверждений, похожих на факты, от мнений в длинных документах. Обратите внимание, что классификатор сам по себе не может определить, является ли что-то фактически верным. Вместо этого он идентифицирует текст, который <em>написан в стиле фактического утверждения</em>, которое затем можно проверить через API проверки достоверности, что часто довольно затратно. Этот двухэтапный процесс является ключом к эффективной проверке фактов: сначала отфильтровываются все мнения и чувства, затем оставшиеся утверждения отправляются на проверку.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://jina.ai/news/fact-checking-with-new-grounding-api-in-jina-reader?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Fact-Checking with New Grounding API in Jina Reader</div><div class=\"kg-bookmark-description\">With the new g.jina.ai, you can easily ground statements to reduce LLM hallucinations or improve the integrity of human-written content.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jina.ai/icons/favicon-128x128.png\" alt=\"\"><span class=\"kg-bookmark-publisher\">Google Docs</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/10/grounding.png\" alt=\"\" onerror=\"this.style.display = 'none'\"></div></a></figure><p>Рассмотрим этот абзац о Космической гонке 1960-х годов:</p><pre><code class=\"language-json\">The Space Race of the 1960s was a breathtaking testament to human ingenuity. When the Soviet Union launched Sputnik 1 on October 4, 1957, it sent shockwaves through American society, marking the undeniable start of a new era. The silvery beeping of that simple satellite struck fear into the hearts of millions, as if the very stars had betrayed Western dominance. NASA was founded in 1958 as America's response, and they poured an astounding $28 billion into the Apollo program between 1960 and 1973. While some cynics claimed this was a waste of resources, the technological breakthroughs were absolutely worth every penny spent. On July 20, 1969, Neil Armstrong and Buzz Aldrin achieved the most magnificent triumph in human history by walking on the moon, their footprints marking humanity's destiny among the stars. The Soviet space program, despite its early victories, ultimately couldn't match the superior American engineering and determination. The moon landing was not just a victory for America - it represented the most inspiring moment in human civilization, proving that our species was meant to reach beyond our earthly cradle.\n</code></pre><p>Этот текст намеренно смешивает различные типы письма — от утверждений, похожих на факты (например, \"Спутник-1 был запущен 4 октября 1959 года\"), до явных мнений (\"впечатляющее свидетельство\"), эмоционального языка (\"вселил страх в сердца\"), и интерпретативных утверждений (\"обозначив несомненное начало новой эры\").</p><p>Задача классификатора с нулевым обучением <strong>чисто семантическая</strong> — он определяет, написан ли фрагмент текста как утверждение или как мнение/интерпретация. Например, <code>\"The Soviet Union launched Sputnik 1 on October 4, 1959\"</code> написано как утверждение, в то время как <code>\"The Space Race was a breathtaking testament\"</code> явно написано как мнение.</p><pre><code class=\"language-python\">headers = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {API_KEY}'\n}\n\n# Step 1: Split text and classify\nchunks = [chunk.strip() for chunk in text.split('.') if chunk.strip()]\nlabels = [\n    \"subjective, opinion, feeling, personal experience, creative writing, position\",\n    \"fact\"\n]\n\n# Classify chunks\nclassify_response = requests.post(\n    'https://api.jina.ai/v1/classify',\n    headers=headers,\n    json={\n        \"model\": \"jina-embeddings-v3\",\n        \"input\": [{\"text\": chunk} for chunk in chunks],\n        \"labels\": labels\n    }\n)\n\n# Sort chunks\nsubjective_chunks = []\nfactual_chunks = []\nfor chunk, classification in zip(chunks, classify_response.json()['data']):\n    if classification['prediction'] == labels[0]:\n        subjective_chunks.append(chunk)\n    else:\n        factual_chunks.append(chunk)\n\nprint(\"\\nSubjective statements:\", subjective_chunks)\nprint(\"\\nFactual statements:\", factual_chunks)</code></pre><p>И вы получите:</p><pre><code class=\"language-json\">Subjective statements: ['The Space Race of the 1960s was a breathtaking testament to human ingenuity', 'The silvery beeping of that simple satellite struck fear into the hearts of millions, as if the very stars had betrayed Western dominance', 'While some cynics claimed this was a waste of resources, the technological breakthroughs were absolutely worth every penny spent', \"The Soviet space program, despite its early victories, ultimately couldn't match the superior American engineering and determination\"]\n\nFactual statements: ['When the Soviet Union launched Sputnik 1 on October 4, 1957, it sent shockwaves through American society, marking the undeniable start of a new era', \"NASA was founded in 1958 as America's response, and they poured an astounding $28 billion into the Apollo program between 1960 and 1973\", \"On July 20, 1969, Neil Armstrong and Buzz Aldrin achieved the most magnificent triumph in human history by walking on the moon, their footprints marking humanity's destiny among the stars\", 'The moon landing was not just a victory for America - it represented the most inspiring moment in human civilization, proving that our species was meant to reach beyond our earthly cradle']</code></pre><p>Помните, то, что что-то написано как утверждение, не означает, что это правда. Поэтому нам нужен второй шаг — отправка этих утверждений в API проверки достоверности для фактической проверки. Например, давайте проверим это утверждение: <code>\"NASA was founded in 1958 as America's response, and they poured an astounding $28 billion into the Apollo program between 1960 and 1973\"</code> с помощью кода ниже.</p><pre><code class=\"language-python\">ground_headers = {\n        'Accept': 'application/json',\n        'Authorization': f'Bearer {API_KEY}'\n    }\n\nground_response = requests.get(\n    f'https://g.jina.ai/{quote(factual_chunks[1])}',\n    headers=ground_headers\n)\n\nprint(ground_response.json())</code></pre><p>который даст вам:</p><pre><code class=\"language-json\">{'code': 200, 'status': 20000, 'data': {'factuality': 1, 'result': True, 'reason': \"The statement is supported by multiple references confirming NASA's founding in 1958 and the significant financial investment in the Apollo program. The $28 billion figure aligns with the data provided in the references, which detail NASA's expenditures during the Apollo program from 1960 to 1973. Additionally, the context of NASA's budget peaking during this period further substantiates the claim. Therefore, the statement is factually correct based on the available evidence.\", 'references': [{'url': 'https://en.wikipedia.org/wiki/Budget_of_NASA', 'keyQuote': \"NASA's budget peaked in 1964–66 when it consumed roughly 4% of all federal spending. The agency was building up to the first Moon landing and the Apollo program was a top national priority, consuming more than half of NASA's budget.\", 'isSupportive': True}, {'url': 'https://en.wikipedia.org/wiki/NASA', 'keyQuote': 'Established in 1958, it succeeded the National Advisory Committee for Aeronautics (NACA)', 'isSupportive': True}, {'url': 'https://nssdc.gsfc.nasa.gov/planetary/lunar/apollo.html', 'keyQuote': 'More details on Apollo lunar landings', 'isSupportive': True}, {'url': 'https://usafacts.org/articles/50-years-after-apollo-11-moon-landing-heres-look-nasas-budget-throughout-its-history/', 'keyQuote': 'NASA has spent its money so far.', 'isSupportive': True}, {'url': 'https://www.nasa.gov/history/', 'keyQuote': 'Discover the history of our human spaceflight, science, technology, and aeronautics programs.', 'isSupportive': True}, {'url': 'https://www.nasa.gov/the-apollo-program/', 'keyQuote': 'Commander for Apollo 11, first to step on the lunar surface.', 'isSupportive': True}, {'url': 'https://www.planetary.org/space-policy/cost-of-apollo', 'keyQuote': 'A rich data set tracking the costs of Project Apollo, free for public use. Includes unprecedented program-by-program cost breakdowns.', 'isSupportive': True}, {'url': 'https://www.statista.com/statistics/1342862/nasa-budget-project-apollo-costs/', 'keyQuote': 'NASA&amp;#x27;s monetary obligations compared to Project Apollo&amp;#x27;s total costs from 1960 to 1973 (in million U.S. dollars)', 'isSupportive': True}], 'usage': {'tokens': 10640}}}</code></pre><p>С оценкой достоверности 1, API проверки подтверждает, что это утверждение хорошо обосновано историческими фактами. Этот подход открывает захватывающие возможности, от анализа исторических документов до проверки фактов в новостных статьях в реальном времени. Объединяя классификацию с нулевым обучением с проверкой фактов, мы создаем мощный конвейер для автоматизированного анализа информации — сначала отфильтровывая мнения, затем проверяя оставшиеся утверждения с помощью надежных источников.</p><h3 id=\"remarks-on-zero-shot-classification\">Замечания о классификации с нулевым обучением</h3><h4 id=\"using-semantic-labels\">Использование семантических меток</h4><p>При работе с классификацией с нулевым обучением <strong>крайне важно использовать семантически значимые метки, а не абстрактные символы или числа.</strong> Например, <code>\"Technology\"</code>, <code>\"Nature\"</code> и <code>\"Food\"</code> гораздо эффективнее, чем <code>\"Class1\"</code>, <code>\"Class2\"</code>, <code>\"Class3\"</code> или <code>\"0\"</code>, <code>\"1\"</code>, <code>\"2\"</code>. <code>\"Positive sentiment\"</code> эффективнее, чем <code>\"Positive\"</code> и <code>\"True\"</code>. Модели встраивания понимают семантические отношения, поэтому описательные метки позволяют модели использовать свои предварительно обученные знания для более точной классификации. Наш предыдущий пост исследует, как создавать эффективные семантические метки для лучших результатов классификации.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://jina.ai/news/rephrased-labels-improve-zero-shot-text-classification-30?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Rephrased Labels Improve Zero-Shot Text Classification by 30%</div><div class=\"kg-bookmark-description\">When using embedding models for zero-shot classification, rephrasing the class label to \"This is seriously about 'LABEL'\" gives higher accuracy vs. using LABEL alone. But how, and why?</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jina.ai/icons/favicon-128x128.png\" alt=\"\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/07/Heading.jpg\" alt=\"\" onerror=\"this.style.display = 'none'\"></div></a></figure><h4 id=\"stateless-nature\">Безсостояние</h4><p>Классификация с нулевым обучением фундаментально безсостоятельна, в отличие от традиционных подходов машинного обучения. <strong>Это означает, что при одинаковых входных данных и модели результаты всегда будут согласованными, независимо от того, кто использует API и когда.</strong> Модель не учится и не обновляется на основе выполняемых классификаций; каждая задача независима. Это позволяет немедленно использовать без настройки или обучения и предлагает гибкость в изменении категорий между вызовами API.</p><p>Эта безсостоятельность резко контрастирует с подходами малого количества обучающих примеров и онлайн-обучения, которые мы рассмотрим далее. В этих методах модели могут адаптироваться к новым примерам, потенциально давая разные результаты с течением времени или между пользователями.</p><h2 id=\"few-shot-classification\">Классификация с малым количеством обучающих примеров</h2><p>Классификация с малым количеством обучающих примеров предлагает простой подход к созданию и обновлению классификаторов с минимальным количеством размеченных данных. Этот метод предоставляет две основные конечные точки: <code>train</code> и <code>classify</code>.</p><p>Конечная точка <code>train</code> позволяет создавать или обновлять классификатор с небольшим набором примеров. Ваш первый вызов <code>train</code> вернет<code>classifier_id</code>, который вы можете использовать для последующего обучения, когда у вас появляются новые данные, замечаются изменения в распределении данных или необходимо добавить новые классы. Этот гибкий подход позволяет вашему классификатору развиваться со временем, адаптируясь к новым паттернам и категориям без необходимости начинать с нуля.</p><p>Аналогично zero-shot классификации, вы будете использовать конечную точку <code>classify</code> для выполнения предсказаний. Основное отличие в том, что вам нужно будет включить ваш <code>classifier_id</code> в запрос, но не нужно предоставлять варианты меток, так как они уже являются частью вашей обученной модели.</p><h3 id=\"example-train-a-support-ticket-assigner\">Пример: Обучение классификатора тикетов поддержки</h3><p>Давайте рассмотрим эти возможности на примере классификации тикетов службы поддержки для распределения между разными командами в быстрорастущем технологическом стартапе.</p><h4 id=\"initial-training\">Начальное обучение</h4><pre><code class=\"language-bash\">curl -X 'POST' \\\n  'https://api.jina.ai/v1/train' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer YOUR_API_KEY_HERE' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"model\": \"jina-embeddings-v3\",\n  \"access\": \"private\",\n  \"input\": [\n    {\n      \"text\": \"I cant log into my account after the latest app update.\",\n      \"label\": \"team1\"\n    },\n    {\n      \"text\": \"My subscription renewal failed due to an expired credit card.\",\n      \"label\": \"team2\"\n    },\n    {\n      \"text\": \"How do I export my data from the platform?\",\n      \"label\": \"team3\"\n    }\n  ],\n  \"num_iters\": 10\n}'</code></pre><p>Обратите внимание, что в few-shot обучении мы можем свободно использовать <code>team1</code> <code>team2</code> в качестве меток классов, даже если они не имеют внутреннего семантического значения. В ответе вы получите <code>classifier_id</code>, который представляет этот новый классификатор.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-json\">{\n  \"classifier_id\": \"918c0846-d6ae-4f34-810d-c0c7a59aee14\",\n  \"num_samples\": 3,\n}\n</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">Запишите </span><code spellcheck=\"false\" style=\"white-space: pre-wrap;\"><span>classifier_id</span></code><span style=\"white-space: pre-wrap;\">, он понадобится вам для обращения к этому классификатору позже.</span></p></figcaption></figure><h4 id=\"updating-classifier-to-adapt-team-restructuring\">Обновление классификатора для адаптации к реструктуризации команды</h4><p>По мере роста компании возникают новые типы проблем, и структура команды также меняется. Красота few-shot классификации заключается в её способности быстро адаптироваться к этим изменениям. Мы можем легко обновить классификатор, указав <code>classifier_id</code> и новые примеры, вводя новые категории команд (например, <code>team4</code>) или переназначая существующие типы проблем разным командам по мере развития организации.</p><pre><code class=\"language-bash\">curl -X 'POST' \\\n  'https://api.jina.ai/v1/train' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer YOUR_API_KEY_HERE' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"classifier_id\": \"b36b7b23-a56c-4b52-a7ad-e89e8f5439b6\",\n  \"input\": [\n    {\n      \"text\": \"Im getting a 404 error when trying to access the new AI chatbot feature.\",\n      \"label\": \"team4\"\n    },\n    {\n      \"text\": \"The latest security patch is conflicting with my company firewall.\",\n      \"label\": \"team1\"\n    },\n    {\n      \"text\": \"I need help setting up SSO for my organization account.\",\n      \"label\": \"team5\"\n    }\n  ],\n  \"num_iters\": 10\n}'</code></pre><h4 id=\"using-a-trained-classifier\">Использование обученного классификатора</h4><p>При выполнении предсказаний вам нужно только предоставить входной текст и <code>classifier_id</code>. API обрабатывает сопоставление между вашим входом и ранее обученными классами, возвращая наиболее подходящую метку на основе текущего состояния классификатора.</p><pre><code class=\"language-bash\">curl -X 'POST' \\\n  'https://api.jina.ai/v1/classify' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer YOUR_API_KEY_HERE' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"classifier_id\": \"b36b7b23-a56c-4b52-a7ad-e89e8f5439b6\",\n  \"input\": [\n    {\n      \"text\": \"The new feature is causing my dashboard to load slowly.\"\n    },\n    {\n      \"text\": \"I need to update my billing information for tax purposes.\"\n    }\n  ]\n}'</code></pre><p>Few-shot режим имеет два уникальных параметра.</p><h3 id=\"parameter-numiters\">Параметр <code>num_iters</code></h3><p>Параметр <code>num_iters</code> настраивает, насколько интенсивно классификатор учится на ваших обучающих примерах. Хотя значение по умолчанию 10 хорошо работает в большинстве случаев, вы можете стратегически настраивать это значение в зависимости от <strong>вашей уверенности в обучающих данных</strong>. Для высококачественных примеров, которые критически важны для классификации, увеличьте <code>num_iters</code>, чтобы усилить их важность. И наоборот, для менее надежных примеров уменьшите <code>num_iters</code>, чтобы минимизировать их влияние на производительность классификатора. Этот параметр также может использоваться для реализации обучения с учетом времени, где более новые примеры получают большее количество итераций для адаптации к развивающимся паттернам при сохранении исторических знаний.</p><h3 id=\"parameter-access\">Параметр <code>access</code></h3><p>Параметр <code>access</code> позволяет контролировать, кто может использовать ваш классификатор. По умолчанию классификаторы являются приватными и доступны только вам. Установка доступа как \"public\" позволяет любому с вашим <code>classifier_id</code> <strong>использовать его с их собственным API ключом и квотой токенов.</strong> Это позволяет делиться классификаторами при сохранении конфиденциальности - пользователи не могут видеть ваши обучающие данные или конфигурацию, а вы не можете видеть их запросы на классификацию. Этот параметр актуален только для few-shot классификации, так как zero-shot классификаторы не имеют состояния. Нет необходимости делиться zero-shot классификаторами, поскольку идентичные запросы всегда будут давать одинаковые ответы независимо от того, кто их делает.</p><h3 id=\"remarks-on-few-shot-learning\">Замечания о Few-Shot обучении</h3><p>Few-shot классификация в нашем API имеет некоторые уникальные характеристики, которые стоит отметить. В отличие от традиционных моделей машинного обучения, наша реализация использует однопроходное онлайн-обучение - обучающие примеры обрабатываются для обновления весов классификатора, но не сохраняются после этого. Это означает, что вы не можете получить исторические обучающие данные, но это обеспечивает лучшую конфиденциальность и эффективность использования ресурсов.</p><p>Хотя few-shot обучение является мощным, ему требуется период прогрева, чтобы превзойти zero-shot классификацию. Наши тесты показывают, что 200-400 обучающих примеров обычно предоставляют достаточно данных для достижения превосходной производительности. Однако вам не нужно предоставлять примеры для всех классов сразу - классификатор может масштабироваться для размещения новых классов со временем. Просто имейте в виду, что вновь добавленные классы могут испытывать короткий период холодного старта или дисбаланса классов, пока не будет предоставлено достаточное количество примеров.</p><h2 id=\"benchmark\">Тестирование производительности</h2><p>Для нашего анализа эффективности мы оценили zero-shot и few-shot подходы на различных наборах данных, включая задачи классификации текста, такие как определение эмоций (6 классов) и обнаружение спама (2 класса), а также задачи классификации изображений, такие как CIFAR10 (10 классов). Система оценки использовала стандартное разделение на обучающую и тестовую выборки, при этом zero-shot не требовал обучающих данных, а few-shot использовал части обучающего набора. Мы отслеживали ключевые метрики, такие как размер обучающей выборки и количество целевых классов, что позволило провести контролируемые сравнения. Для обеспечения надежности, особенно для few-shot обучения, каждый ввод проходил через несколько итераций обучения. Мы сравнили эти современные подходы с традиционными базовыми методами, такими как линейный SVM и RBF SVM, чтобы обеспечить контекст для их производительности.</p><figure class=\"kg-card kg-gallery-card kg-width-wide kg-card-hascaption\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/10/Multi-class-classification.svg\" width=\"445\" height=\"460\" loading=\"lazy\" alt=\"\"></div><div class=\"kg-gallery-image\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/10/Image-classification.svg\" width=\"445\" height=\"460\" loading=\"lazy\" alt=\"\"></div><div class=\"kg-gallery-image\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/10/Text-classification--1-.svg\" width=\"445\" height=\"460\" loading=\"lazy\" alt=\"\"></div></div></div><figcaption><p><span style=\"white-space: pre-wrap;\">Показаны F1-оценки. Для полных настроек тестирования, пожалуйста, посмотрите </span><a href=\"https://docs.google.com/spreadsheets/d/15vK6VPlcAM4e7lSJw6IeVtTtyariXEVQurDTFKXwwtY/edit?gid=249584681&ref=jina-ai-gmbh.ghost.io#gid=249584681\"><span style=\"white-space: pre-wrap;\">эту таблицу Google</span></a><span style=\"white-space: pre-wrap;\">.</span></p></figcaption></figure><p>Графики F1 показывают интересные закономерности для трех задач. Неудивительно, что классификация с нулевым обучением демонстрирует постоянную производительность с самого начала, независимо от размера обучающих данных. Напротив, малоразмерное обучение показывает быструю кривую обучения, изначально начинаясь ниже, но быстро превосходя производительность нулевого обучения по мере увеличения обучающих данных. Оба метода в итоге <strong>достигают сопоставимой точности около отметки в 400 образцов</strong>, причем малоразмерное обучение сохраняет небольшое преимущество. Эта закономерность справедлива как для многоклассовой, так и для классификации изображений, что говорит о том, что малоразмерное обучение может быть особенно выгодным при наличии некоторых обучающих данных, в то время как нулевое обучение обеспечивает надежную производительность даже без каких-либо обучающих примеров. В таблице ниже приведены различия между классификацией с нулевым и малоразмерным обучением с точки зрения пользователя API.</p>\n<!--kg-card-begin: html-->\n<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>Zero-shot</th>\n<th>Few-shot</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Primary Use Case</td>\n<td>Default solution for general classification</td>\n<td>For data outside v3/clip-v1's domain or time-sensitive data</td>\n</tr>\n<tr>\n<td>Training Data Required</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Labels Required in /train</td>\n<td>N/A</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Labels Required in /classify</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Classifier ID Required</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Semantic Labels Required</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td>State Management</td>\n<td>Stateless</td>\n<td>Stateful</td>\n</tr>\n<tr>\n<td>Continuous Model Updates</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Access Control</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Maximum Classes</td>\n<td>256</td>\n<td>16</td>\n</tr>\n<tr>\n<td>Maximum Classifiers</td>\n<td>N/A</td>\n<td>16</td>\n</tr>\n<tr>\n<td>Maximum Inputs per Request</td>\n<td>1,024</td>\n<td>1,024</td>\n</tr>\n<tr>\n<td>Maximum Token Length per Input</td>\n<td>8,192 tokens</td>\n<td>8,192 tokens</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: html-->\n<h2 id=\"summary\">Итоги</h2><p>API классификатора предлагает мощные возможности классификации с нулевым и малоразмерным обучением как для текста, так и для изображений, используя передовые модели эмбеддингов, такие как <code>jina-embeddings-v3</code> и <code>jina-clip-v1</code>. Наши тесты показывают, что классификация с нулевым обучением обеспечивает надежную производительность без обучающих данных, что делает её отличной отправной точкой для большинства задач с поддержкой до 256 классов. Хотя малоразмерное обучение может достичь немного лучшей точности при наличии обучающих данных, мы рекомендуем начинать с классификации с нулевым обучением из-за её мгновенных результатов и гибкости.</p><p>Универсальность API поддерживает различные приложения, от маршрутизации запросов LLM до определения доступности веб-сайтов и категоризации многоязычного контента. Независимо от того, начинаете ли вы с нулевого обучения или переходите к малоразмерному обучению для специализированных случаев, API сохраняет единообразный интерфейс для беспрепятственной интеграции в ваш процесс. Мы особенно рады видеть, как разработчики будут использовать этот API в своих приложениях, и в будущем мы добавим поддержку новых моделей эмбеддингов, таких как <code>jina-clip-v2</code>.</p>",
  "comment_id": "6711fbbd708dbe0001924974",
  "feature_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/10/classifier-header-1.png",
  "featured": true,
  "visibility": "public",
  "created_at": "2024-10-18T08:10:05.000+02:00",
  "updated_at": "2024-10-24T11:04:33.000+02:00",
  "published_at": "2024-10-22T10:57:15.000+02:00",
  "custom_excerpt": "New Classifier API offers zero-shot and few-shot classification for text and images. Start classifying content instantly or train it with your own examples.",
  "codeinjection_head": null,
  "codeinjection_foot": null,
  "custom_template": null,
  "canonical_url": null,
  "authors": [
    {
      "id": "62e3d0ef9cd5ce003d5e49e2",
      "name": "Jina AI",
      "slug": "company",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/08/Jjqb-JeY_400x400.jpg",
      "cover_image": null,
      "bio": "Creator of neural search, contributor to open source.",
      "website": "https://www.jina.ai",
      "location": "Berlin",
      "facebook": null,
      "twitter": "@JinaAI_",
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/company/"
    }
  ],
  "tags": [
    {
      "id": "655b2782bb728c000101bed7",
      "name": "Press",
      "slug": "press",
      "description": null,
      "feature_image": null,
      "visibility": "public",
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "canonical_url": null,
      "accent_color": null,
      "url": "https://jina-ai-gmbh.ghost.io/tag/press/"
    }
  ],
  "primary_author": {
    "id": "62e3d0ef9cd5ce003d5e49e2",
    "name": "Jina AI",
    "slug": "company",
    "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/08/Jjqb-JeY_400x400.jpg",
    "cover_image": null,
    "bio": "Creator of neural search, contributor to open source.",
    "website": "https://www.jina.ai",
    "location": "Berlin",
    "facebook": null,
    "twitter": "@JinaAI_",
    "meta_title": null,
    "meta_description": null,
    "url": "https://jina-ai-gmbh.ghost.io/author/company/"
  },
  "primary_tag": {
    "id": "655b2782bb728c000101bed7",
    "name": "Press",
    "slug": "press",
    "description": null,
    "feature_image": null,
    "visibility": "public",
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "canonical_url": null,
    "accent_color": null,
    "url": "https://jina-ai-gmbh.ghost.io/tag/press/"
  },
  "url": "https://jina-ai-gmbh.ghost.io/podcast/jina-classifier-for-high-performance-zero-shot-and-few-shot-classification/",
  "excerpt": "Новое API классификатора предлагает zero-shot и few-shot классификацию текста и изображений. Начните мгновенную классификацию контента или обучите его на своих примерах.",
  "reading_time": 16,
  "access": true,
  "comments": false,
  "og_image": null,
  "og_title": null,
  "og_description": null,
  "twitter_image": null,
  "twitter_title": null,
  "twitter_description": null,
  "meta_title": null,
  "meta_description": null,
  "email_subject": null,
  "frontmatter": null,
  "feature_image_alt": "Abstract artistic portrait using a montage of colorful squares and scattered text.",
  "feature_image_caption": null
}