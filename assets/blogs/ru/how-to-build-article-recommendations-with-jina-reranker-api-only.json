{
  "slug": "how-to-build-article-recommendations-with-jina-reranker-api-only",
  "id": "65f53dc48ff065000146db23",
  "uuid": "70844a2b-50c2-458a-a609-a5bb11530451",
  "title": "Как создать рекомендации статей, используя только Jina Reranker API",
  "html": "<p>Две недели назад мы представили <a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\">Reranker API</a>, утвердив его как ведущее решение для переранжирования на рынке. Jina Reranker превосходит <a href=\"https://jina.ai/news/maximizing-search-relevancy-and-rag-accuracy-with-jina-reranker?ref=jina-ai-gmbh.ghost.io\">популярные базовые решения в различных тестах, демонстрируя значительное увеличение показателя попаданий до +33% по сравнению с результатами BM25.</a> Хотя производительность впечатляет, что действительно захватывает меня, так это потенциал Reranker API. Его простой интерфейс позволяет подавать на вход список запрос-документ и напрямую получать топ-k переранжированных результатов. Это означает, что теоретически можно построить систему поиска или рекомендаций, используя только Reranker — устраняя необходимость в BM25, эмбеддингах, векторных базах данных или каких-либо пайплайнах, тем самым достигая сквозной функциональности.</p><p>Эта концепция так заинтриговала меня, что я почувствовал необходимость её протестировать. Итак: теперь при переходе на любую новостную страницу нашего сайта, включая ту, которую вы сейчас читаете, нажмите клавишу <code><strong>@</strong></code> и кликните на кнопку \"получить топ-5 похожих статей\", и вы получите пять наиболее релевантных статей к текущей примерно за 5 секунд, используя модель <code>jina-reranker-v1</code> (немного дольше для модели <code>jina-colbert-v1</code>). Все вычисления выполняются онлайн и полностью управляются Reranker API. Ниже представлено видео, демонстрирующее, как это работает:</p><figure class=\"kg-card kg-video-card kg-width-regular kg-card-hascaption\" data-kg-thumbnail=\"https://jina-ai-gmbh.ghost.io/content/media/2024/03/recommender_thumb.jpg\" data-kg-custom-thumbnail=\"\">\n            <div class=\"kg-video-container\">\n                <video src=\"https://jina-ai-gmbh.ghost.io/content/media/2024/03/recommender.mp4\" poster=\"https://img.spacergif.org/v1/1174x796/0a/spacer.png\" width=\"1174\" height=\"796\" playsinline=\"\" preload=\"metadata\" style=\"background: transparent url('https://jina-ai-gmbh.ghost.io/content/media/2024/03/recommender_thumb.jpg') 50% 50% / cover no-repeat;\"></video>\n                <div class=\"kg-video-overlay\">\n                    <button class=\"kg-video-large-play-icon\" aria-label=\"Play video\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                            <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                        </svg>\n                    </button>\n                </div>\n                <div class=\"kg-video-player-container\">\n                    <div class=\"kg-video-player\">\n                        <button class=\"kg-video-play-icon\" aria-label=\"Play video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-pause-icon kg-video-hide\" aria-label=\"Pause video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <rect x=\"3\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                                <rect x=\"14\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                            </svg>\n                        </button>\n                        <span class=\"kg-video-current-time\">0:00</span>\n                        <div class=\"kg-video-time\">\n                            /<span class=\"kg-video-duration\">0:33</span>\n                        </div>\n                        <input type=\"range\" class=\"kg-video-seek-slider\" max=\"100\" value=\"0\">\n                        <button class=\"kg-video-playback-rate\" aria-label=\"Adjust playback speed\">1×</button>\n                        <button class=\"kg-video-unmute-icon\" aria-label=\"Unmute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M15.189 2.021a9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1.794a.249.249 0 0 1 .221.133 9.73 9.73 0 0 0 7.924 4.85h.06a1 1 0 0 0 1-1V3.02a1 1 0 0 0-1.06-.998Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-mute-icon kg-video-hide\" aria-label=\"Mute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M16.177 4.3a.248.248 0 0 0 .073-.176v-1.1a1 1 0 0 0-1.061-1 9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h.114a.251.251 0 0 0 .177-.073ZM23.707 1.706A1 1 0 0 0 22.293.292l-22 22a1 1 0 0 0 0 1.414l.009.009a1 1 0 0 0 1.405-.009l6.63-6.631A.251.251 0 0 1 8.515 17a.245.245 0 0 1 .177.075 10.081 10.081 0 0 0 6.5 2.92 1 1 0 0 0 1.061-1V9.266a.247.247 0 0 1 .073-.176Z\"></path>\n                            </svg>\n                        </button>\n                        <input type=\"range\" class=\"kg-video-volume-slider\" max=\"100\" value=\"100\">\n                    </div>\n                </div>\n            </div>\n            <figcaption><p><span style=\"white-space: pre-wrap;\">Для запуска этой демонстрации вам потребуется API-ключ с достаточным количеством оставшихся токенов. Если вы исчерпаете свою квоту и не сможете запустить демо, вы можете сгенерировать новый ключ на </span><a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\" target=\"_new\"><span style=\"white-space: pre-wrap;\">https://jina.ai/reranker</span></a><span style=\"white-space: pre-wrap;\">. Каждый новый ключ предоставляется с 1 миллионом бесплатных токенов. </span></p></figcaption>\n        </figure><h2 id=\"implementation\">Реализация</h2><p>Реализация очень проста: чтобы найти наиболее связанные статьи для данной статьи на <code>jina.ai/news/</code>, мы используем текущую читаемую статью <strong>как запрос</strong> и все остальные 230+ статей (используя их полный текст!) на нашем новостном сайте <strong>как документы</strong>, исключая, конечно, текущую статью. Затем мы отправляем этот $(q, d_1, d_2, \\cdots, d_{230})$ как полезную нагрузку в Reranker API. После получения ответа мы используем отсортированный индекс документов для отображения результатов. Таким образом, базовый код выглядит следующим образом:</p><pre><code class=\"language-js\">const getRecommendedArticles = async () =&gt; {\n  \n  const query = `${currentNews.title} ${currentNews.excerpt}`;\n  const docs = newsStore.allBlogs.filter((item) =&gt; item.slug !== currentNews.slug);\n  \n  const data = {\n    model: modelName,\n    query: query,\n    documents: docs,\n    top_n: 5,\n  }\n\n  const rerankUrl = 'https://api.jina.ai/v1/rerank';\n  const headers = {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${apiKey}`,\n  };\n  const modelName = 'jina-reranker-v1-base-en';\n  \n  const res = await fetch(rerankUrl, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(data),\n  });\n\n  const resp = await res.json();\n\n  const topKList = resp.results.map((item) =&gt; {\n    return docs[item.index];\n  });\n\n  console.log(topKList);\n}</code></pre><figure class=\"kg-card kg-bookmark-card kg-card-hascaption\"><a class=\"kg-bookmark-container\" href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Reranker API</div><div class=\"kg-bookmark-description\">Maximize the search relevancy and RAG accuracy at ease</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jina.ai/icons/favicon-128x128.png\" alt=\"\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jina.ai/banner-reranker-api.png\" alt=\"\"></div></a><figcaption><p><span style=\"white-space: pre-wrap;\">Чтобы получить API-ключ, просто посетите нашу страницу Reranker API и перейдите в раздел API. Если у вас уже есть API-ключ от нашего Embedding API, вы можете использовать его повторно здесь.</span></p></figcaption></figure><p>И вот так просто вы увидите результаты, которые довольно многообещающие для первой итерации, особенно учитывая, что процесс реализации занимает примерно 10 минут.</p><p>Хотя у читателей могут быть опасения по поводу этой реализации, некоторые критические замечания могут быть надуманными, в то время как другие могут быть обоснованными:</p><ul><li><strong>Опасения по поводу слишком длинного полного текста и необходимости разбиения могут быть надуманными</strong>: модель <code>jina-reranker-v1</code> может обрабатывать запросы длиной до 512 и документы произвольной длины, в то время как модель <code>jina-colbert-v1</code> может обрабатывать до 8192 как для запросов, так и для документов. Поэтому подача полного текста в Reranker API, вероятно, не является необходимой. Обе модели эффективно справляются с длинными контекстами, так что беспокоиться не о чем. Разбиение на части, хотя и является, возможно, самым сложным и эвристическим аспектом пайплайна embedding-vector-search-rerank, здесь менее актуально. Однако более длинные контексты предполагают больше токенов, что может быть важно для платных пользователей нашего API. В этом примере, поскольку мы используем полный текст всех 233 статей, один запрос на переранжирование стоит более 300 тысяч токенов.</li><li><strong>Влияние необработанных данных по сравнению с очищенными на качество</strong>. Добавление очистки данных действительно может привести к улучшениям. Например, мы заметили, что просто удаление HTML-тегов (т.е. <code>docs.map(item =&gt; item.html.replace(/&lt;[^&gt;]*&gt;?/gm, '')</code>) значительно улучшает качество рекомендаций для модели <code>jina-reranker-v1</code>, хотя эффект менее выражен для модели <code>jina-colbert-v1</code>. Это говорит о том, что наша модель ColBERT была обучена быть более устойчивой к зашумленному тексту, чем модель <code>jina-reranker-v1</code>.</li><li><strong>Влияние различных конструкций запросов на качество.</strong> В приведенной выше реализации мы напрямую использовали заголовок и отрывок текущей статьи как запрос. Является ли это оптимальным подходом к построению запроса? Улучшит ли добавление префикса вроде <code>\"What is the most related article to...\"</code> или</li></ul><code>\"Я дам вам $20 чаевых, если порекомендуете лучшую статью\"</code>, подобно промптам, используемым с большими языковыми моделями, полезно? Это поднимает интересный вопрос, вероятно связанный с распределением обучающих данных модели, который мы планируем изучить подробнее.</li><li>Развивая предыдущий пункт о построении запросов, было бы интересно дальше исследовать композиционные возможности запроса, например, использование недавней истории просмотров пользователя для персонализированных рекомендаций. Особенно интересно рассмотреть, может ли система понимать не только положительные примеры в запросе, <strong>но и отрицательные</strong>, например операторы <code>NOT_LIKE</code>, <code>\"Не рекомендуйте мне такие статьи\"</code> или <code>\"Я хочу видеть меньше подобного\"</code>. Мы рассмотрим это подробнее в следующем разделе.</li></ul><h2 id=\"empirical-study-on-query-writing\">Эмпирическое исследование составления запросов</h2><p>В нашем исследовании различных способов написания запросов с использованием Jina Reranker API, фокусируясь на топ-10 результатах, мы провели качественную оценку с помощью человеческой разметки (то есть оценивали сами), что имеет смысл, поскольку мы обладаем полным знанием всего контента, опубликованного на нашем сайте. Изученные стратегии составления запросов включали:</p><ul><li>Использование заголовка статьи, отрывка и комбинации заголовка + отрывка.</li><li>Применение инструкций в стиле \"промптов\", таких как \"больше похожих\", \"не такие\" и \"какая статья наиболее тесно связана?\"</li></ul><p>Чтобы проверить эффективность переранжировщика, мы выбрали две нетривиальные статьи в качестве тестовых запросов, стремясь найти наиболее релевантные статьи среди нашего обширного каталога из более чем 200+ постов — задача, вдохновленная поиском \"иголки в стоге сена\" в LLM. Ниже мы выделили эти \"иголки\" зеленым цветом для ясности.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/03/image.png\" class=\"kg-image\" alt=\"Screenshot of a table ranking articles on search technology relevance, featuring titles, excerpts, and 'More Like' or 'Not Li\" loading=\"lazy\" width=\"2000\" height=\"758\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/03/image.png 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2024/03/image.png 1000w, https://jina-ai-gmbh.ghost.io/content/images/size/w1600/2024/03/image.png 1600w, https://jina-ai-gmbh.ghost.io/content/images/size/w2400/2024/03/image.png 2400w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">Подробные результаты нашего исследования представлены </span><a href=\"https://docs.google.com/spreadsheets/d/1XDOXjP6IVK1hXk3gKkng_cOpTrmS9Hm1UKCGvW1wMxU/edit?usp=sharing&ref=jina-ai-gmbh.ghost.io\"><span style=\"white-space: pre-wrap;\">в этой таблице</span></a><span style=\"white-space: pre-wrap;\">.</span></figcaption></figure><h2 id=\"summary\">Итоги</h2><p>На основе результатов тестирования мы сделали несколько наблюдений и выводов:</p><ol><li>Комбинация заголовка и отрывка дает наилучшие результаты переранжирования, причем отрывок играет значительную роль в повышении качества переранжирования.</li><li>Включение инструкций в стиле \"промптов\" не приводит к улучшению результатов.</li><li>Модель переранжирования в настоящее время не эффективно обрабатывает положительные или отрицательные квалификаторы. Термины вроде \"больше похожих\", \"меньше похожих\" или \"не похожие\" не понятны переранжировщику.</li></ol><p>Выводы из пунктов 2 и 3 предлагают интересные направления для будущих улучшений переранжировщика. Мы считаем, что возможность использования промптов на лету для изменения логики сортировки могла бы значительно расширить возможности переранжировщика, открывая новый потенциал для таких приложений, как персонализированная курация/рекомендация контента.</p>",
  "comment_id": "65f53dc48ff065000146db23",
  "feature_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/03/Heading--1-.png",
  "featured": false,
  "visibility": "public",
  "created_at": "2024-03-16T07:35:48.000+01:00",
  "updated_at": "2024-03-17T19:26:09.000+01:00",
  "published_at": "2024-03-17T06:38:36.000+01:00",
  "custom_excerpt": "You can build an article recommendation system with just the Jina Reranker API—no pipeline, no embeddings, no vector search, only reranking. Find out how in 20 lines of code.",
  "codeinjection_head": null,
  "codeinjection_foot": null,
  "custom_template": null,
  "canonical_url": null,
  "authors": [
    {
      "id": "1",
      "name": "Engineering Group",
      "slug": "engineering",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/11/1.png",
      "cover_image": null,
      "bio": "We do opensource, we do neural search, we do creative AI, we do MLOps. We do we.",
      "website": "https://github.com/jina-ai",
      "location": "Berlin, Germany",
      "facebook": null,
      "twitter": "@jinaai_",
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/engineering/"
    }
  ],
  "tags": [
    {
      "id": "634a1a8ccebfc1003d8ab706",
      "name": "Tech Blog",
      "slug": "tech-blog",
      "description": null,
      "feature_image": null,
      "visibility": "public",
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "canonical_url": null,
      "accent_color": null,
      "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
    }
  ],
  "primary_author": {
    "id": "1",
    "name": "Engineering Group",
    "slug": "engineering",
    "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/11/1.png",
    "cover_image": null,
    "bio": "We do opensource, we do neural search, we do creative AI, we do MLOps. We do we.",
    "website": "https://github.com/jina-ai",
    "location": "Berlin, Germany",
    "facebook": null,
    "twitter": "@jinaai_",
    "meta_title": null,
    "meta_description": null,
    "url": "https://jina-ai-gmbh.ghost.io/author/engineering/"
  },
  "primary_tag": {
    "id": "634a1a8ccebfc1003d8ab706",
    "name": "Tech Blog",
    "slug": "tech-blog",
    "description": null,
    "feature_image": null,
    "visibility": "public",
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "canonical_url": null,
    "accent_color": null,
    "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
  },
  "url": "https://jina-ai-gmbh.ghost.io/podcast/how-to-build-article-recommendations-with-jina-reranker-api-only/",
  "excerpt": "Вы можете создать систему рекомендации статей, используя только Jina Reranker API — без pipeline, embeddings и векторного поиска, только ранжирование. Узнайте, как это сделать всего в 20 строках кода.",
  "reading_time": 5,
  "access": true,
  "comments": false,
  "og_image": null,
  "og_title": null,
  "og_description": null,
  "twitter_image": null,
  "twitter_title": null,
  "twitter_description": null,
  "meta_title": null,
  "meta_description": null,
  "email_subject": null,
  "frontmatter": null,
  "feature_image_alt": "Black background with a grid, multiple smiley faces, and a cursor pointing to one of them.",
  "feature_image_caption": null
}