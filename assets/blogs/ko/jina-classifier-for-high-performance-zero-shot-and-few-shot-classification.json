{
  "slug": "jina-classifier-for-high-performance-zero-shot-and-few-shot-classification",
  "id": "6711fbbd708dbe0001924974",
  "uuid": "65c883e0-556a-4079-b07a-66e9e9926717",
  "title": "고성능 제로샷 및 퓨샷 분류를 위한 Jina Classifier API",
  "html": "<p>분류는 임베딩의 일반적인 다운스트림 태스크입니다. 텍스트 임베딩은 스팸 감지나 감성 분석을 위해 텍스트를 미리 정의된 레이블로 분류할 수 있습니다. <code>jina-clip-v1</code>과 같은 멀티모달 임베딩은 콘텐츠 기반 필터링이나 태그 주석에 적용될 수 있습니다. 최근에는 복잡성과 비용에 따라 적절한 LLM으로 쿼리를 라우팅하는 데도 분류가 사용되고 있습니다. 예를 들어 간단한 산술 쿼리는 작은 언어 모델로 라우팅될 수 있습니다. 복잡한 추론 작업은 더 강력하지만 비용이 높은 LLM으로 전달될 수 있습니다.</p><p>오늘 Jina AI의 Search Foundation에서 새로운 <strong>Classifier API</strong>를 소개합니다. <strong>제로샷</strong>과 <strong>퓨샷</strong> 온라인 분류를 지원하며, <code>jina-embeddings-v3</code>와 <code>jina-clip-v1</code>과 같은 최신 임베딩 모델을 기반으로 구축되었습니다. Classifier API는 <a href=\"https://jmlr.org/papers/v7/crammer06a.html?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\">온라인 패시브-어그레시브 러닝</a>을 기반으로 하여 실시간으로 새로운 데이터에 적응할 수 있습니다. 사용자는 제로샷 분류기로 시작하여 즉시 사용할 수 있습니다. 그런 다음 새로운 예제를 제출하거나 컨셉 드리프트가 발생할 때 분류기를 점진적으로 업데이트할 수 있습니다. 이를 통해 광범위한 초기 레이블링된 데이터 <em>없이도</em> 다양한 콘텐츠 유형에 대해 효율적이고 확장 가능한 분류가 가능합니다. 사용자는 또한 자신의 분류기를 공개적으로 사용할 수 있도록 게시할 수 있습니다. 곧 출시될 다국어 <code>jina-clip-v2</code>와 같은 새로운 임베딩이 출시되면 사용자는 Classifier API를 통해 즉시 액세스할 수 있어 최신 분류 기능을 보장받을 수 있습니다.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://jina.ai/classifier?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Classifier API</div><div class=\"kg-bookmark-description\">High performance classifier for image and text classification.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jina.ai/icons/favicon-128x128.png\" alt=\"\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jina.ai/banner-classifier.png\" alt=\"\" onerror=\"this.style.display = 'none'\"></div></a></figure><h2 id=\"zero-shot-classification\">제로샷 분류</h2><p>Classifier API는 레이블링된 데이터로 사전 학습하지 않고도 텍스트나 이미지를 분류할 수 있는 강력한 제로샷 분류 기능을 제공합니다. 모든 분류기는 제로샷 기능으로 시작하며, 이후 추가 학습 데이터나 업데이트로 향상될 수 있습니다 - 이는 다음 섹션에서 살펴볼 주제입니다.</p><h3 id=\"example-1-route-llm-requests\">예시 1: LLM 요청 라우팅</h3><p>다음은 LLM 쿼리 라우팅을 위한 분류기 API 사용 예시입니다:</p><pre><code class=\"language-bash\">curl https://api.jina.ai/v1/classify \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY_HERE\" \\\n  -d '{\n    \"model\": \"jina-embeddings-v3\",\n    \"labels\": [\n      \"Simple task\",\n      \"Complex reasoning\",\n      \"Creative writing\"\n    ],\n    \"input\": [\n      \"Calculate the compound interest on a principal of $10,000 invested for 5 years at an annual rate of 5%, compounded quarterly.\",\n      \"分析使用CRISPR基因编辑技术在人类胚胎中的伦理影响。考虑潜在的医疗益处和长期社会后果。\",\n      \"AIが自意識を持つディストピアの未来を舞台にした短編小説を書いてください。人間とAIの関係や意識の本質をテーマに探求してください。\",\n      \"Erklären Sie die Unterschiede zwischen Merge-Sort und Quicksort-Algorithmen in Bezug auf Zeitkomplexität, Platzkomplexität und Leistung in der Praxis.\",\n      \"Write a poem about the beauty of nature and its healing power on the human soul.\",\n      \"Translate the following sentence into French: The quick brown fox jumps over the lazy dog.\"\n    ]\n  }'</code></pre><p>이 예시는 <code>jina-embeddings-v3</code>를 사용하여 여러 언어(영어, 중국어, 일본어, 독일어)의 사용자 쿼리를 세 가지 카테고리로 분류하는 것을 보여줍니다. 이는 세 가지 다른 크기의 LLM에 대응됩니다. API 응답 형식은 다음과 같습니다:</p><pre><code class=\"language-json\">{\n  \"usage\": {\"total_tokens\": 256, \"prompt_tokens\": 256},\n  \"data\": [\n    {\"object\": \"classification\", \"index\": 0, \"prediction\": \"Simple task\", \"score\": 0.35216382145881653},\n    {\"object\": \"classification\", \"index\": 1, \"prediction\": \"Complex reasoning\", \"score\": 0.34310275316238403},\n    {\"object\": \"classification\", \"index\": 2, \"prediction\": \"Creative writing\", \"score\": 0.3487184941768646},\n    {\"object\": \"classification\", \"index\": 3, \"prediction\": \"Complex reasoning\", \"score\": 0.35207709670066833},\n    {\"object\": \"classification\", \"index\": 4, \"prediction\": \"Creative writing\", \"score\": 0.3638903796672821},\n    {\"object\": \"classification\", \"index\": 5, \"prediction\": \"Simple task\", \"score\": 0.3561534285545349}\n  ]\n}</code></pre><p>응답에는 다음이 포함됩니다:</p><ul><li><code>usage</code>: 토큰 사용량 정보.</li><li><code>data</code>: 각 입력에 대한 분류 결과 배열.<ul><li>각 결과는 예측된 레이블(<code>prediction</code>)과 신뢰도 점수(<code>score</code>)를 포함합니다. 각 클래스에 대한 <code>score</code>는 소프트맥스 정규화를 통해 계산됩니다 - 제로샷의 경우 <a href=\"https://jina.ai/news/jina-embeddings-v3-a-frontier-multilingual-embedding-model?ref=jina-ai-gmbh.ghost.io#parameter-task\" rel=\"noreferrer\"><code>classification</code> task-LoRA 하에서</a> 입력과 레이블 임베딩 간의 코사인 유사도를 기반으로 하며, 퓨샷의 경우 각 클래스에 대한 입력 임베딩의 학습된 선형 변환을 기반으로 하여 모든 클래스에 걸쳐 합이 1이 되는 확률을 산출합니다.</li><li><code>index</code>는 원래 요청에서 입력의 위치에 해당합니다.</li></ul></li></ul><h3 id=\"example-2-categorize-image-text\">예시 2: 이미지 & 텍스트 분류</h3><p><code>jina-clip-v1</code>을 사용한 멀티모달 예시를 살펴보겠습니다. 이 모델은 텍스트와 이미지 모두를 분류할 수 있어 다양한 미디어 유형의 콘텐츠 분류에 이상적입니다. 다음 API 호출을 고려해보세요:</p><pre><code class=\"language-bash\">curl https://api.jina.ai/v1/classify \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY_HERE\" \\\n  -d '{\n    \"model\": \"jina-clip-v1\",\n    \"labels\": [\n      \"Food and Dining\",\n      \"Technology and Gadgets\",\n      \"Nature and Outdoors\",\n      \"Urban and Architecture\"\n    ],\n    \"input\": [\n      {\"text\": \"A sleek smartphone with a high-resolution display and multiple camera lenses\"},\n      {\"text\": \"Fresh sushi rolls served on a wooden board with wasabi and ginger\"},\n      {\"image\": \"https://picsum.photos/id/11/367/267\"},\n      {\"image\": \"https://picsum.photos/id/22/367/267\"},\n      {\"text\": \"Vibrant autumn leaves in a dense forest with sunlight filtering through\"},\n      {\"image\": \"https://picsum.photos/id/8/367/267\"}\n    ]\n  }'</code></pre><p>요청에서 이미지를 업로드하는 방법에 주목하세요. 이미지를 나타내기 위해 <code>base64</code> 문자열을 사용할 수도 있습니다. API는 다음과 같은 분류 결과를 반환합니다:</p><pre><code class=\"language-json\">{\n  \"usage\": {\"total_tokens\": 12125, \"prompt_tokens\": 12125},\n  \"data\": [\n    {\"object\": \"classification\", \"index\": 0, \"prediction\": \"Technology and Gadgets\", \"score\": 0.30329811573028564},\n    {\"object\": \"classification\", \"index\": 1, \"prediction\": \"Food and Dining\", \"score\": 0.2765541970729828},\n    {\"object\": \"classification\", \"index\": 2, \"prediction\": \"Nature and Outdoors\", \"score\": 0.29503118991851807},\n    {\"object\": \"classification\", \"index\": 3, \"prediction\": \"Urban and Architecture\", \"score\": 0.2648046910762787},\n    {\"object\": \"classification\", \"index\": 4, \"prediction\": \"Nature and Outdoors\", \"score\": 0.3133063316345215},\n    {\"object\": \"classification\", \"index\": 5, \"prediction\": \"Technology and Gadgets\", \"score\": 0.27474141120910645}\n  ]\n}</code></pre><h3 id=\"example-3-detect-if-jina-reader-gets-genuine-content\">예시 3: Jina Reader가 진정한 콘텐츠를 받는지 감지</h3><p>제로샷 분류의 흥미로운 응용은 <a href=\"https://jina.ai/reader?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\">Jina Reader</a>를 통한 웹사이트 접근성 판단입니다. 이는 단순한 작업처럼 보일 수 있지만, 실제로는 놀랍게도 복잡합니다. 차단 메시지는 사이트마다 크게 다르며, 다양한 언어로 나타나고 여러 이유(유료 콘텐츠 제한, 속도 제한, 서버 중단)를 인용합니다. 이러한 다양성으로 인해 모든 시나리오를 포착하기 위해 정규식이나 고정된 규칙에 의존하기 어렵습니다.</p><pre><code class=\"language-python\">import requests\nimport json\n\nresponse1 = requests.get('https://r.jina.ai/https://jina.ai')\n\nurl = 'https://api.jina.ai/v1/classify'\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer $YOUR_API_KEY_HERE'\n}\ndata = {\n    'model': 'jina-embeddings-v3',\n    'labels': ['Blocked', 'Accessible'],\n    'input': [{'text': response1.text[:8000]}]\n}\nresponse2 = requests.post(url, headers=headers, data=json.dumps(data))\n\nprint(response2.text)</code></pre><p>이 스크립트는 <code>r.jina.ai</code>를 통해 콘텐츠를 가져오고 Classifier API를 사용하여 <code>\"Blocked\"</code> 또는 <code>\"Accessible\"</code>로 분류합니다. 예를 들어, <a href=\"https://r.jina.ai/https://www.crunchbase.com/organization/jina-ai?ref=jina-ai-gmbh.ghost.io\">https://r.jina.ai/https://www.crunchbase.com/organization/jina-ai</a>는 액세스 제한으로 인해 <code>\"Blocked\"</code>일 가능성이 높고, <a href=\"https://r.jina.ai/https://jina.ai?ref=jina-ai-gmbh.ghost.io\">https://r.jina.ai/https://jina.ai</a>는 \"Accessible\"일 것입니다. </p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-json\">{\"usage\":{\"total_tokens\":185,\"prompt_tokens\":185},\"data\":[{\"object\":\"classification\",\"index\":0,\"prediction\":\"Blocked\",\"score\":0.5392698049545288}]}</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">Classifier API는 Jina Reader의 실제 콘텐츠와 차단된 결과를 효과적으로 구분할 수 있습니다.</span></p></figcaption></figure><p>이 예시는 <code>jina-embeddings-v3</code>를 활용하여 특히 다국어 환경에서 콘텐츠 집계나 웹 스크래핑 시스템에 유용한 웹사이트 접근성을 모니터링하는 빠르고 자동화된 방법을 제공합니다.</p><h3 id=\"example-4-filtering-statements-from-opinions-for-grounding\">예시 4: 근거를 위한 의견에서 진술 필터링</h3><p>제로샷 분류의 또 다른 흥미로운 응용은 긴 문서에서 의견과 구별되는 사실 진술문을 필터링하는 것입니다. 분류기 자체는 어떤 것이 사실인지 판단할 수 없다는 점에 유의하세요. 대신, <em>사실적 진술문 스타일로 작성된</em> 텍스트를 식별하며, 이는 비용이 많이 드는 grounding API를 통해 검증될 수 있습니다. 이러한 두 단계 프로세스가 효과적인 팩트 체크의 핵심입니다: 먼저 의견과 감정을 필터링한 다음, 남은 진술문들을 grounding에 보내는 것입니다.</p>\n\n<figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://jina.ai/news/fact-checking-with-new-grounding-api-in-jina-reader?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Fact-Checking with New Grounding API in Jina Reader</div><div class=\"kg-bookmark-description\">With the new g.jina.ai, you can easily ground statements to reduce LLM hallucinations or improve the integrity of human-written content.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jina.ai/icons/favicon-128x128.png\" alt=\"\"><span class=\"kg-bookmark-publisher\">Google Docs</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/10/grounding.png\" alt=\"\" onerror=\"this.style.display = 'none'\"></div></a></figure>\n\n<p>1960년대 우주 경쟁에 대한 이 단락을 살펴보세요:</p>\n\n<pre><code class=\"language-json\">The Space Race of the 1960s was a breathtaking testament to human ingenuity. When the Soviet Union launched Sputnik 1 on October 4, 1957, it sent shockwaves through American society, marking the undeniable start of a new era. The silvery beeping of that simple satellite struck fear into the hearts of millions, as if the very stars had betrayed Western dominance. NASA was founded in 1958 as America's response, and they poured an astounding $28 billion into the Apollo program between 1960 and 1973. While some cynics claimed this was a waste of resources, the technological breakthroughs were absolutely worth every penny spent. On July 20, 1969, Neil Armstrong and Buzz Aldrin achieved the most magnificent triumph in human history by walking on the moon, their footprints marking humanity's destiny among the stars. The Soviet space program, despite its early victories, ultimately couldn't match the superior American engineering and determination. The moon landing was not just a victory for America - it represented the most inspiring moment in human civilization, proving that our species was meant to reach beyond our earthly cradle.\n</code></pre>\n\n<p>이 텍스트는 의도적으로 다양한 유형의 글을 혼합했습니다 - 사실적 진술문(예: \"스푸트니크 1호는 1959년 10월 4일에 발사되었다\")부터 명확한 의견(\"숨막히는 증거\"), 감정적 언어(\"마음에 두려움을 심어주었다\"), 해석적 주장(\"새로운 시대의 명백한 시작을 알렸다\")까지.</p>\n\n<p>제로샷 분류기의 역할은 <strong>순전히 의미적</strong>입니다 - 텍스트가 진술문으로 작성되었는지 또는 의견/해석으로 작성되었는지를 식별합니다. 예를 들어, <code>\"The Soviet Union launched Sputnik 1 on October 4, 1959\"</code>는 진술문으로 작성된 반면, <code>\"The Space Race was a breathtaking testament\"</code>는 명확히 의견으로 작성되었습니다.</p>\n\n<pre><code class=\"language-python\">headers = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {API_KEY}'\n}\n\n# Step 1: Split text and classify\nchunks = [chunk.strip() for chunk in text.split('.') if chunk.strip()]\nlabels = [\n    \"subjective, opinion, feeling, personal experience, creative writing, position\",\n    \"fact\"\n]\n\n# Classify chunks\nclassify_response = requests.post(\n    'https://api.jina.ai/v1/classify',\n    headers=headers,\n    json={\n        \"model\": \"jina-embeddings-v3\",\n        \"input\": [{\"text\": chunk} for chunk in chunks],\n        \"labels\": labels\n    }\n)\n\n# Sort chunks\nsubjective_chunks = []\nfactual_chunks = []\nfor chunk, classification in zip(chunks, classify_response.json()['data']):\n    if classification['prediction'] == labels[0]:\n        subjective_chunks.append(chunk)\n    else:\n        factual_chunks.append(chunk)\n\nprint(\"\\nSubjective statements:\", subjective_chunks)\nprint(\"\\nFactual statements:\", factual_chunks)</code></pre>\n\n<p>그러면 다음과 같은 결과를 얻게 됩니다:</p>\n\n<pre><code class=\"language-json\">Subjective statements: ['The Space Race of the 1960s was a breathtaking testament to human ingenuity', 'The silvery beeping of that simple satellite struck fear into the hearts of millions, as if the very stars had betrayed Western dominance', 'While some cynics claimed this was a waste of resources, the technological breakthroughs were absolutely worth every penny spent', \"The Soviet space program, despite its early victories, ultimately couldn't match the superior American engineering and determination\"]\n\nFactual statements: ['When the Soviet Union launched Sputnik 1 on October 4, 1957, it sent shockwaves through American society, marking the undeniable start of a new era', \"NASA was founded in 1958 as America's response, and they poured an astounding $28 billion into the Apollo program between 1960 and 1973\", \"On July 20, 1969, Neil Armstrong and Buzz Aldrin achieved the most magnificent triumph in human history by walking on the moon, their footprints marking humanity's destiny among the stars\", 'The moon landing was not just a victory for America - it represented the most inspiring moment in human civilization, proving that our species was meant to reach beyond our earthly cradle']</code></pre>\n\n<p>어떤 것이 진술문 형식으로 작성되었다고 해서 그것이 사실이라는 것을 의미하지는 않는다는 점을 기억하세요. 그래서 두 번째 단계가 필요한 것입니다 - 이러한 진술문처럼 보이는 주장들을 실제 사실 검증을 위해 grounding API에 입력하는 것입니다. 예를 들어, 이 진술문을 검증해 봅시다: <code>\"NASA was founded in 1958 as America's response, and they poured an astounding $28 billion into the Apollo program between 1960 and 1973\"</code> 아래의 코드를 사용하여 검증할 수 있습니다.</p>\n\n<pre><code class=\"language-python\">ground_headers = {\n        'Accept': 'application/json',\n        'Authorization': f'Bearer {API_KEY}'\n    }\n\nground_response = requests.get(\n    f'https://g.jina.ai/{quote(factual_chunks[1])}',\n    headers=ground_headers\n)\n\nprint(ground_response.json())</code></pre>\n\n<p>다음과 같은 결과를 얻습니다:</p>\n\n<pre><code class=\"language-json\">{'code': 200, 'status': 20000, 'data': {'factuality': 1, 'result': True, 'reason': \"The statement is supported by multiple references confirming NASA's founding in 1958 and the significant financial investment in the Apollo program. The $28 billion figure aligns with the data provided in the references, which detail NASA's expenditures during the Apollo program from 1960 to 1973. Additionally, the context of NASA's budget peaking during this period further substantiates the claim. Therefore, the statement is factually correct based on the available evidence.\", 'references': [{'url': 'https://en.wikipedia.org/wiki/Budget_of_NASA', 'keyQuote': \"NASA's budget peaked in 1964–66 when it consumed roughly 4% of all federal spending. The agency was building up to the first Moon landing and the Apollo program was a top national priority, consuming more than half of NASA's budget.\", 'isSupportive': True}, {'url': 'https://en.wikipedia.org/wiki/NASA', 'keyQuote': 'Established in 1958, it succeeded the National Advisory Committee for Aeronautics (NACA)', 'isSupportive': True}, {'url': 'https://nssdc.gsfc.nasa.gov/planetary/lunar/apollo.html', 'keyQuote': 'More details on Apollo lunar landings', 'isSupportive': True}, {'url': 'https://usafacts.org/articles/50-years-after-apollo-11-moon-landing-heres-look-nasas-budget-throughout-its-history/', 'keyQuote': 'NASA has spent its money so far.', 'isSupportive': True}, {'url': 'https://www.nasa.gov/history/', 'keyQuote': 'Discover the history of our human spaceflight, science, technology, and aeronautics programs.', 'isSupportive': True}, {'url': 'https://www.nasa.gov/the-apollo-program/', 'keyQuote': 'Commander for Apollo 11, first to step on the lunar surface.', 'isSupportive': True}, {'url': 'https://www.planetary.org/space-policy/cost-of-apollo', 'keyQuote': 'A rich data set tracking the costs of Project Apollo, free for public use. Includes unprecedented program-by-program cost breakdowns.', 'isSupportive': True}, {'url': 'https://www.statista.com/statistics/1342862/nasa-budget-project-apollo-costs/', 'keyQuote': 'NASA&amp;#x27;s monetary obligations compared to Project Apollo&amp;#x27;s total costs from 1960 to 1973 (in million U.S. dollars)', 'isSupportive': True}], 'usage': {'tokens': 10640}}}</code></pre>\n\n<p>factuality 점수가 1인 것으로 보아, grounding API는 이 진술이 역사적 사실에 잘 근거하고 있음을 확인해줍니다. 이 접근 방식은 역사적 문서 분석부터 실시간 뉴스 기사 팩트 체크까지 흥미로운 가능성을 열어줍니다. 제로샷 분류와 사실 검증을 결합함으로써, 우리는 자동화된 정보 분석을 위한 강력한 파이프라인을 만들 수 있습니다 - 먼저 의견을 필터링한 다음, 남은 진술문들을 신뢰할 수 있는 출처와 대조하여 검증하는 것입니다.</p>\n\n<h3 id=\"remarks-on-zero-shot-classification\">제로샷 분류에 대한 고찰</h3>\n\n<h4 id=\"using-semantic-labels\">의미적 레이블 사용하기</h4>\n\n<p>제로샷 분류를 사용할 때, <strong>추상적인 기호나 숫자보다는 의미적으로 유의미한 레이블을 사용하는 것이 중요합니다.</strong> 예를 들어, <code>\"Class1\"</code>, <code>\"Class2\"</code>, <code>\"Class3\"</code> 또는 <code>\"0\"</code>, <code>\"1\"</code>, <code>\"2\"</code>보다는 <code>\"Technology\"</code>, <code>\"Nature\"</code>, <code>\"Food\"</code>가 훨씬 더 효과적입니다. <code>\"Positive\"</code>와 <code>\"True\"</code>보다는 <code>\"Positive sentiment\"</code>가 더 효과적입니다. 임베딩 모델은 의미적 관계를 이해하므로, 설명적인 레이블을 사용하면 모델이 더 정확한 분류를 위해 사전 학습된 지식을 활용할 수 있습니다. 이전 포스트에서는 더 나은 분류 결과를 위한 효과적인 의미적 레이블을 만드는 방법을 탐구했습니다.</p>\n\n<figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://jina.ai/news/rephrased-labels-improve-zero-shot-text-classification-30?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Rephrased Labels Improve Zero-Shot Text Classification by 30%</div><div class=\"kg-bookmark-description\">When using embedding models for zero-shot classification, rephrasing the class label to \"This is seriously about 'LABEL'\" gives higher accuracy vs. using LABEL alone. But how, and why?</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jina.ai/icons/favicon-128x128.png\" alt=\"\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/07/Heading.jpg\" alt=\"\" onerror=\"this.style.display = 'none'\"></div></a></figure>\n\n<h4 id=\"stateless-nature\">무상태 특성</h4>\n\n<p>제로샷 분류는 전통적인 기계 학습 접근 방식과 달리 근본적으로 무상태입니다. <strong>이는 동일한 입력과 모델이 주어졌을 때, API를 사용하는 사람이나 시점에 관계없이 결과가 항상 일관될 것임을 의미합니다.</strong> 모델은 수행하는 분류를 바탕으로 학습하거나 업데이트되지 않으며, 각 작업은 독립적입니다. 이는 설정이나 학습 없이 즉시 사용할 수 있게 하며, API 호출 간에 카테고리를 변경할 수 있는 유연성을 제공합니다.</p>\n\n<p>이러한 무상태 특성은 다음에 살펴볼 퓨샷과 온라인 학습 접근 방식과는 크게 대조됩니다. 이러한 방법들에서는 모델이 새로운 예제에 적응할 수 있어, 시간이 지나거나 사용자가 다를 때 다른 결과를 산출할 수 있습니다.</p>\n\n<h2 id=\"few-shot-classification\">퓨샷 분류</h2>\n\n<p>퓨샷 분류는 최소한의 레이블이 지정된 데이터로 분류기를 생성하고 업데이트하는 쉬운 접근 방식을 제공합니다. 이 방법은 <code>train</code>과 <code>classify</code> 두 가지 주요 엔드포인트를 제공합니다.</p>\n\n<p><code>train</code> 엔드포인트를 사용하면 적은 수의 예제로 분류기를 생성하거나 업데이트할 수 있습니다. <code>train</code>을 처음 호출하면<code>classifier_id</code>는 새로운 데이터가 있거나 데이터 분포에 변화가 있거나 새로운 클래스를 추가해야 할 때 후속 학습을 위해 사용할 수 있습니다. 이러한 유연한 접근 방식을 통해 분류기는 처음부터 다시 시작하지 않고도 시간이 지남에 따라 새로운 패턴과 카테고리에 적응하며 발전할 수 있습니다.</p><p>제로샷 분류와 마찬가지로, 예측을 위해 <code>classify</code> 엔드포인트를 사용합니다. 주요 차이점은 요청에 <code>classifier_id</code>를 포함해야 하지만, 후보 레이블은 이미 학습된 모델의 일부이므로 제공할 필요가 없다는 것입니다.</p><h3 id=\"example-train-a-support-ticket-assigner\">예시: 지원 티켓 할당기 학습하기</h3><p>빠르게 성장하는 테크 스타트업에서 다른 팀에 고객 지원 티켓을 할당하기 위한 분류 예시를 통해 이러한 기능들을 살펴보겠습니다.</p><h4 id=\"initial-training\">초기 학습</h4><pre><code class=\"language-bash\">curl -X 'POST' \\\n  'https://api.jina.ai/v1/train' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer YOUR_API_KEY_HERE' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"model\": \"jina-embeddings-v3\",\n  \"access\": \"private\",\n  \"input\": [\n    {\n      \"text\": \"I cant log into my account after the latest app update.\",\n      \"label\": \"team1\"\n    },\n    {\n      \"text\": \"My subscription renewal failed due to an expired credit card.\",\n      \"label\": \"team2\"\n    },\n    {\n      \"text\": \"How do I export my data from the platform?\",\n      \"label\": \"team3\"\n    }\n  ],\n  \"num_iters\": 10\n}'</code></pre><p>퓨샷 러닝에서는 본질적인 의미가 없더라도 <code>team1</code> <code>team2</code>와 같은 클래스 레이블을 자유롭게 사용할 수 있습니다. 응답에서는 이 새로 생성된 분류기를 나타내는 <code>classifier_id</code>를 받게 됩니다.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-json\">{\n  \"classifier_id\": \"918c0846-d6ae-4f34-810d-c0c7a59aee14\",\n  \"num_samples\": 3,\n}\n</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">이 </span><code spellcheck=\"false\" style=\"white-space: pre-wrap;\"><span>classifier_id</span></code><span style=\"white-space: pre-wrap;\">를 기록해 두세요. 나중에 이 분류기를 참조할 때 필요합니다.</span></p></figcaption></figure><h4 id=\"updating-classifier-to-adapt-team-restructuring\">팀 구조 조정에 맞춰 분류기 업데이트하기</h4><p>예시 회사가 성장함에 따라 새로운 유형의 문제가 발생하고 팀 구조도 변경됩니다. 퓨샷 분류의 장점은 이러한 변화에 빠르게 적응할 수 있다는 것입니다. <code>classifier_id</code>와 새로운 예시를 제공하여 분류기를 쉽게 업데이트할 수 있으며, 조직이 발전함에 따라 새로운 팀 카테고리(예: <code>team4</code>)를 도입하거나 기존 문제 유형을 다른 팀에 재할당할 수 있습니다.</p><pre><code class=\"language-bash\">curl -X 'POST' \\\n  'https://api.jina.ai/v1/train' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer YOUR_API_KEY_HERE' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"classifier_id\": \"b36b7b23-a56c-4b52-a7ad-e89e8f5439b6\",\n  \"input\": [\n    {\n      \"text\": \"Im getting a 404 error when trying to access the new AI chatbot feature.\",\n      \"label\": \"team4\"\n    },\n    {\n      \"text\": \"The latest security patch is conflicting with my company firewall.\",\n      \"label\": \"team1\"\n    },\n    {\n      \"text\": \"I need help setting up SSO for my organization account.\",\n      \"label\": \"team5\"\n    }\n  ],\n  \"num_iters\": 10\n}'</code></pre><h4 id=\"using-a-trained-classifier\">학습된 분류기 사용하기</h4><p>추론 시에는 입력 텍스트와 <code>classifier_id</code>만 제공하면 됩니다. API가 입력과 이전에 학습된 클래스 간의 매핑을 처리하여 분류기의 현재 상태를 기반으로 가장 적절한 레이블을 반환합니다.</p><pre><code class=\"language-bash\">curl -X 'POST' \\\n  'https://api.jina.ai/v1/classify' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer YOUR_API_KEY_HERE' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"classifier_id\": \"b36b7b23-a56c-4b52-a7ad-e89e8f5439b6\",\n  \"input\": [\n    {\n      \"text\": \"The new feature is causing my dashboard to load slowly.\"\n    },\n    {\n      \"text\": \"I need to update my billing information for tax purposes.\"\n    }\n  ]\n}'</code></pre><p>퓨샷 모드에는 두 가지 고유한 매개변수가 있습니다.</p><h3 id=\"parameter-numiters\">매개변수 <code>num_iters</code></h3><p><code>num_iters</code> 매개변수는 분류기가 학습 예시로부터 얼마나 집중적으로 학습할지를 조정합니다. 기본값 10이 대부분의 경우에 잘 작동하지만, <strong>학습 데이터에 대한 신뢰도</strong>에 따라 이 값을 전략적으로 조정할 수 있습니다. 분류에 매우 중요한 고품질 예시의 경우 <code>num_iters</code>를 늘려 중요도를 강화할 수 있습니다. 반대로 신뢰도가 낮은 예시의 경우 <code>num_iters</code>를 낮춰 분류기 성능에 미치는 영향을 최소화할 수 있습니다. 이 매개변수는 또한 시간 인식 학습을 구현하는 데 사용될 수 있으며, 여기서는 더 최근의 예시에 더 높은 반복 횟수를 부여하여 과거 지식을 유지하면서 진화하는 패턴에 적응할 수 있습니다.</p><h3 id=\"parameter-access\">매개변수 <code>access</code></h3><p><code>access</code> 매개변수를 통해 분류기 사용 권한을 제어할 수 있습니다. 기본적으로 분류기는 private이며 본인만 접근할 수 있습니다. 액세스를 \"public\"으로 설정하면 <code>classifier_id</code>를 가진 누구나 <strong>자신의 API 키와 토큰 할당량으로 사용할 수 있습니다.</strong> 이를 통해 분류기를 공유하면서 프라이버시를 유지할 수 있습니다 - 사용자는 학습 데이터나 설정을 볼 수 없으며, 분류 요청도 볼 수 없습니다. 이 매개변수는 퓨샷 분류에만 해당되며, 제로샷 분류기는 상태가 없습니다. 동일한 요청은 누가 하든 항상 동일한 응답을 제공하므로 제로샷 분류기를 공유할 필요가 없습니다.</p><h3 id=\"remarks-on-few-shot-learning\">퓨샷 러닝에 대한 참고사항</h3><p>우리 API의 퓨샷 분류에는 주목할 만한 몇 가지 독특한 특성이 있습니다. 전통적인 머신러닝 모델과 달리, 우리의 구현은 원패스 온라인 학습을 사용합니다 - 학습 예시는 분류기의 가중치를 업데이트하는 데 사용되지만 그 후에는 저장되지 않습니다. 이는 과거 학습 데이터를 검색할 수는 없지만, 더 나은 프라이버시와 리소스 효율성을 보장합니다.</p><p>퓨샷 러닝은 강력하지만, 제로샷 분류보다 더 나은 성능을 보이기 위해서는 웜업 기간이 필요합니다. 우리의 벤치마크에 따르면 일반적으로 200-400개의 학습 예시가 충분한 성능을 보이는 데 필요합니다. 하지만 모든 클래스에 대한 예시를 처음부터 제공할 필요는 없습니다 - 분류기는 시간이 지남에 따라 새로운 클래스를 수용할 수 있도록 확장될 수 있습니다. 다만 새로 추가된 클래스는 충분한 예시가 제공될 때까지 짧은 콜드스타트 기간이나 클래스 불균형을 경험할 수 있다는 점을 유의하세요.</p><h2 id=\"benchmark\">벤치마크</h2><p>벤치마크 분석을 위해, 우리는 감정 감지(6개 클래스)와 스팸 감지(2개 클래스)와 같은 텍스트 분류 작업과 CIFAR10(10개 클래스)와 같은 이미지 분류 작업을 포함한 다양한 데이터셋에서 제로샷과 퓨샷 접근 방식을 평가했습니다. 평가 프레임워크는 표준 train-test 분할을 사용했으며, 제로샷은 학습 데이터가 필요 없고 퓨샷은 학습 세트의 일부를 사용했습니다. 통제된 비교를 위해 학습 크기와 대상 클래스 수와 같은 주요 메트릭을 추적했습니다. 특히 퓨샷 러닝의 견고성을 보장하기 위해 각 입력은 여러 학습 반복을 거쳤습니다. 성능 맥락을 제공하기 위해 Linear SVM과 RBF SVM 같은 전통적인 기준과 이러한 현대적 접근 방식을 비교했습니다.</p><figure class=\"kg-card kg-gallery-card kg-width-wide kg-card-hascaption\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/10/Multi-class-classification.svg\" width=\"445\" height=\"460\" loading=\"lazy\" alt=\"\"></div><div class=\"kg-gallery-image\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/10/Image-classification.svg\" width=\"445\" height=\"460\" loading=\"lazy\" alt=\"\"></div><div class=\"kg-gallery-image\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/10/Text-classification--1-.svg\" width=\"445\" height=\"460\" loading=\"lazy\" alt=\"\"></div></div></div><figcaption><p><span style=\"white-space: pre-wrap;\">F1 점수가 그래프로 표시되어 있습니다. 전체 벤치마크 설정은 </span><a href=\"https://docs.google.com/spreadsheets/d/15vK6VPlcAM4e7lSJw6IeVtTtyariXEVQurDTFKXwwtY/edit?gid=249584681&ref=jina-ai-gmbh.ghost.io#gid=249584681\"><span style=\"white-space: pre-wrap;\">이 Google 스프레드시트</span></a><span style=\"white-space: pre-wrap;\">를 확인하세요.</span></p></figcaption></figure><p>F1 플롯은 세 가지 작업에서 흥미로운 패턴을 보여줍니다. 예상대로 제로샷 분류는 학습 데이터 크기와 관계없이 시작부터 일정한 성능을 보여줍니다. 반면에 퓨샷 러닝은 급격한 학습 곡선을 보이며, 처음에는 더 낮은 성능으로 시작하지만 학습 데이터가 증가함에 따라 빠르게 제로샷 성능을 넘어섭니다. 두 방법 모두 결국 <strong>400개 샘플 지점에서 비슷한 정확도에 도달</strong>하며, 퓨샷이 약간의 우위를 유지합니다. 이러한 패턴은 다중 클래스와 이미지 분류 시나리오 모두에서 유지되어, 퓨샷 러닝은 학습 데이터가 있을 때 특히 유리할 수 있으며, 제로샷은 학습 예제가 없어도 신뢰할 만한 성능을 제공함을 시사합니다. 아래 표는 API 사용자 관점에서 제로샷과 퓨샷 분류의 차이를 요약합니다.</p>\n<!--kg-card-begin: html-->\n<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>Zero-shot</th>\n<th>Few-shot</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Primary Use Case</td>\n<td>Default solution for general classification</td>\n<td>For data outside v3/clip-v1's domain or time-sensitive data</td>\n</tr>\n<tr>\n<td>Training Data Required</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Labels Required in /train</td>\n<td>N/A</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Labels Required in /classify</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Classifier ID Required</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Semantic Labels Required</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td>State Management</td>\n<td>Stateless</td>\n<td>Stateful</td>\n</tr>\n<tr>\n<td>Continuous Model Updates</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Access Control</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Maximum Classes</td>\n<td>256</td>\n<td>16</td>\n</tr>\n<tr>\n<td>Maximum Classifiers</td>\n<td>N/A</td>\n<td>16</td>\n</tr>\n<tr>\n<td>Maximum Inputs per Request</td>\n<td>1,024</td>\n<td>1,024</td>\n</tr>\n<tr>\n<td>Maximum Token Length per Input</td>\n<td>8,192 tokens</td>\n<td>8,192 tokens</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: html-->\n<h2 id=\"summary\">요약</h2><p>Classifier API는 <code>jina-embeddings-v3</code>와 <code>jina-clip-v1</code>과 같은 고급 임베딩 모델을 기반으로 텍스트와 이미지 콘텐츠 모두에 대해 강력한 제로샷 및 퓨샷 분류를 제공합니다. 우리의 벤치마크에 따르면 제로샷 분류는 학습 데이터 없이도 신뢰할 만한 성능을 제공하며, 최대 256개 클래스를 지원하여 대부분의 작업에 훌륭한 시작점이 됩니다. 퓨샷 러닝이 학습 데이터로 약간 더 나은 정확도를 달성할 수 있지만, 즉각적인 결과와 유연성을 위해 제로샷 분류로 시작하는 것을 권장합니다.</p><p>API의 다양성은 LLM 쿼리 라우팅부터 웹사이트 접근성 감지 및 다국어 콘텐츠 분류에 이르기까지 다양한 애플리케이션을 지원합니다. 제로샷으로 시작하든 특수한 경우를 위해 퓨샷 러닝으로 전환하든, API는 파이프라인에 원활하게 통합될 수 있도록 일관된 인터페이스를 유지합니다. 우리는 개발자들이 이 API를 자신들의 애플리케이션에서 어떻게 활용할지 특히 기대하고 있으며, 향후 <code>jina-clip-v2</code>와 같은 새로운 임베딩 모델에 대한 지원을 출시할 예정입니다.</p>",
  "comment_id": "6711fbbd708dbe0001924974",
  "feature_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/10/classifier-header-1.png",
  "featured": true,
  "visibility": "public",
  "created_at": "2024-10-18T08:10:05.000+02:00",
  "updated_at": "2024-10-24T11:04:33.000+02:00",
  "published_at": "2024-10-22T10:57:15.000+02:00",
  "custom_excerpt": "New Classifier API offers zero-shot and few-shot classification for text and images. Start classifying content instantly or train it with your own examples.",
  "codeinjection_head": null,
  "codeinjection_foot": null,
  "custom_template": null,
  "canonical_url": null,
  "authors": [
    {
      "id": "62e3d0ef9cd5ce003d5e49e2",
      "name": "Jina AI",
      "slug": "company",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/08/Jjqb-JeY_400x400.jpg",
      "cover_image": null,
      "bio": "Creator of neural search, contributor to open source.",
      "website": "https://www.jina.ai",
      "location": "Berlin",
      "facebook": null,
      "twitter": "@JinaAI_",
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/company/"
    }
  ],
  "tags": [
    {
      "id": "655b2782bb728c000101bed7",
      "name": "Press",
      "slug": "press",
      "description": null,
      "feature_image": null,
      "visibility": "public",
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "canonical_url": null,
      "accent_color": null,
      "url": "https://jina-ai-gmbh.ghost.io/tag/press/"
    }
  ],
  "primary_author": {
    "id": "62e3d0ef9cd5ce003d5e49e2",
    "name": "Jina AI",
    "slug": "company",
    "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/08/Jjqb-JeY_400x400.jpg",
    "cover_image": null,
    "bio": "Creator of neural search, contributor to open source.",
    "website": "https://www.jina.ai",
    "location": "Berlin",
    "facebook": null,
    "twitter": "@JinaAI_",
    "meta_title": null,
    "meta_description": null,
    "url": "https://jina-ai-gmbh.ghost.io/author/company/"
  },
  "primary_tag": {
    "id": "655b2782bb728c000101bed7",
    "name": "Press",
    "slug": "press",
    "description": null,
    "feature_image": null,
    "visibility": "public",
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "canonical_url": null,
    "accent_color": null,
    "url": "https://jina-ai-gmbh.ghost.io/tag/press/"
  },
  "url": "https://jina-ai-gmbh.ghost.io/podcast/jina-classifier-for-high-performance-zero-shot-and-few-shot-classification/",
  "excerpt": "새로운 Classifier API는 텍스트와 이미지에 대한 제로샷 및 퓨샷 분류를 제공합니다. 즉시 콘텐츠를 분류하거나 자신만의 예시로 학습시킬 수 있습니다.",
  "reading_time": 16,
  "access": true,
  "comments": false,
  "og_image": null,
  "og_title": null,
  "og_description": null,
  "twitter_image": null,
  "twitter_title": null,
  "twitter_description": null,
  "meta_title": null,
  "meta_description": null,
  "email_subject": null,
  "frontmatter": null,
  "feature_image_alt": "Abstract artistic portrait using a montage of colorful squares and scattered text.",
  "feature_image_caption": null
}