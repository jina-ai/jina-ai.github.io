{
  "slug": "how-to-build-article-recommendations-with-jina-reranker-api-only",
  "id": "65f53dc48ff065000146db23",
  "uuid": "70844a2b-50c2-458a-a609-a5bb11530451",
  "title": "Jina Reranker API만으로 게시글 추천 시스템 만들기",
  "html": "<p>2주 전에 시장의 선도적인 재순위화 솔루션으로 자리매김한 <a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\">Reranker API</a>를 소개했습니다. Jina Reranker는 <a href=\"https://jina.ai/news/maximizing-search-relevancy-and-rag-accuracy-with-jina-reranker?ref=jina-ai-gmbh.ghost.io\">다양한 벤치마크에서 BM25 결과 대비 히트율을 최대 +33% 향상시키며 인기 있는 기준들을 능가하는 성능을 보여줍니다.</a> 성능이 인상적이지만, 제가 더 흥미로워하는 것은 Reranker API의 잠재력입니다. 쿼리-문서 목록을 입력하고 재순위화된 상위 k개의 결과를 직접 출력하는 간단한 인터페이스를 제공합니다. 이는 이론적으로 BM25, 임베딩, 벡터 데이터베이스 또는 어떤 파이프라인도 필요 없이 Reranker만으로 검색이나 추천 시스템을 구축할 수 있어 엔드투엔드 기능을 달성할 수 있다는 것을 의미합니다.</p><p>이 개념이 너무 흥미로워서 실험해보지 않을 수 없었습니다. 그래서 지금 보시는 것처럼 우리 웹사이트의 뉴스 페이지에서 <code><strong>@</strong></code> 키를 누르고 \"get top 5 related articles\" 버튼을 클릭하면, <code>jina-reranker-v1</code> 모델을 사용하여 약 5초 만에 현재 기사와 가장 관련성이 높은 5개의 기사를 받을 수 있습니다(<code>jina-colbert-v1</code> 모델의 경우 조금 더 걸립니다). 모든 계산은 온라인으로 수행되며 Reranker API가 전적으로 관리합니다. 아래는 작동 방식을 보여주는 비디오입니다:</p><figure class=\"kg-card kg-video-card kg-width-regular kg-card-hascaption\" data-kg-thumbnail=\"https://jina-ai-gmbh.ghost.io/content/media/2024/03/recommender_thumb.jpg\" data-kg-custom-thumbnail=\"\">\n            <div class=\"kg-video-container\">\n                <video src=\"https://jina-ai-gmbh.ghost.io/content/media/2024/03/recommender.mp4\" poster=\"https://img.spacergif.org/v1/1174x796/0a/spacer.png\" width=\"1174\" height=\"796\" playsinline=\"\" preload=\"metadata\" style=\"background: transparent url('https://jina-ai-gmbh.ghost.io/content/media/2024/03/recommender_thumb.jpg') 50% 50% / cover no-repeat;\"></video>\n                <div class=\"kg-video-overlay\">\n                    <button class=\"kg-video-large-play-icon\" aria-label=\"Play video\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                            <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                        </svg>\n                    </button>\n                </div>\n                <div class=\"kg-video-player-container\">\n                    <div class=\"kg-video-player\">\n                        <button class=\"kg-video-play-icon\" aria-label=\"Play video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-pause-icon kg-video-hide\" aria-label=\"Pause video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <rect x=\"3\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                                <rect x=\"14\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                            </svg>\n                        </button>\n                        <span class=\"kg-video-current-time\">0:00</span>\n                        <div class=\"kg-video-time\">\n                            /<span class=\"kg-video-duration\">0:33</span>\n                        </div>\n                        <input type=\"range\" class=\"kg-video-seek-slider\" max=\"100\" value=\"0\">\n                        <button class=\"kg-video-playback-rate\" aria-label=\"Adjust playback speed\">1×</button>\n                        <button class=\"kg-video-unmute-icon\" aria-label=\"Unmute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M15.189 2.021a9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1.794a.249.249 0 0 1 .221.133 9.73 9.73 0 0 0 7.924 4.85h.06a1 1 0 0 0 1-1V3.02a1 1 0 0 0-1.06-.998Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-mute-icon kg-video-hide\" aria-label=\"Mute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M16.177 4.3a.248.248 0 0 0 .073-.176v-1.1a1 1 0 0 0-1.061-1 9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h.114a.251.251 0 0 0 .177-.073ZM23.707 1.706A1 1 0 0 0 22.293.292l-22 22a1 1 0 0 0 0 1.414l.009.009a1 1 0 0 0 1.405-.009l6.63-6.631A.251.251 0 0 1 8.515 17a.245.245 0 0 1 .177.075 10.081 10.081 0 0 0 6.5 2.92 1 1 0 0 0 1.061-1V9.266a.247.247 0 0 1 .073-.176Z\"></path>\n                            </svg>\n                        </button>\n                        <input type=\"range\" class=\"kg-video-volume-slider\" max=\"100\" value=\"100\">\n                    </div>\n                </div>\n            </div>\n            <figcaption><p><span style=\"white-space: pre-wrap;\">이 데모를 실행하려면 충분한 토큰이 남아있는 API 키가 필요합니다. 할당량을 모두 소진하여 데모를 실행할 수 없는 경우 </span><a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\" target=\"_new\"><span style=\"white-space: pre-wrap;\">https://jina.ai/reranker</span></a><span style=\"white-space: pre-wrap;\">에서 새 키를 생성할 수 있습니다. 새 키마다 100만 개의 무료 토큰이 제공됩니다. </span></p></figcaption>\n        </figure><h2 id=\"implementation\">구현</h2><p>구현은 매우 간단합니다: <code>jina.ai/news/</code>의 주어진 기사와 가장 관련된 기사를 찾기 위해, 현재 읽고 있는 기사를 <strong>쿼리로</strong> 사용하고 뉴스 사이트의 다른 모든 230여 개의 기사(전체 텍스트 사용!)를 <strong>문서로</strong> 사용합니다(물론 현재 기사는 제외). 그런 다음 이 $(q, d_1, d_2, \\cdots, d_{230})$를 페이로드로 Reranker API에 전송합니다. 응답을 받으면 정렬된 문서 인덱스를 사용하여 결과를 표시합니다. 따라서 기본 코드는 다음과 같습니다:</p><pre><code class=\"language-js\">const getRecommendedArticles = async () =&gt; {\n  \n  const query = `${currentNews.title} ${currentNews.excerpt}`;\n  const docs = newsStore.allBlogs.filter((item) =&gt; item.slug !== currentNews.slug);\n  \n  const data = {\n    model: modelName,\n    query: query,\n    documents: docs,\n    top_n: 5,\n  }\n\n  const rerankUrl = 'https://api.jina.ai/v1/rerank';\n  const headers = {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${apiKey}`,\n  };\n  const modelName = 'jina-reranker-v1-base-en';\n  \n  const res = await fetch(rerankUrl, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(data),\n  });\n\n  const resp = await res.json();\n\n  const topKList = resp.results.map((item) =&gt; {\n    return docs[item.index];\n  });\n\n  console.log(topKList);\n}</code></pre><figure class=\"kg-card kg-bookmark-card kg-card-hascaption\"><a class=\"kg-bookmark-container\" href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Reranker API</div><div class=\"kg-bookmark-description\">Maximize the search relevancy and RAG accuracy at ease</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jina.ai/icons/favicon-128x128.png\" alt=\"\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jina.ai/banner-reranker-api.png\" alt=\"\"></div></a><figcaption><p><span style=\"white-space: pre-wrap;\">API 키를 얻으려면 Reranker API 페이지를 방문하여 API 섹션으로 이동하면 됩니다. Embedding API에서 이미 API 키를 가지고 있다면 여기서도 재사용할 수 있습니다.</span></p></figcaption></figure><p>이렇게 하면 결과가 나타나며, 구현 과정이 약 10분 정도 걸린다는 점을 고려하면 첫 시도치고는 꽤 괜찮은 결과를 보여줍니다.</p><p>독자들은 이 구현에 대해 우려할 수 있는데, 일부 비판은 과도한 걱정일 수 있고 다른 일부는 타당할 수 있습니다:</p><ul><li><strong>전체 텍스트가 너무 길고 청킹이 필요하다는 우려는 과도한 걱정일 수 있습니다</strong>: <code>jina-reranker-v1</code> 모델은 길이가 512까지인 쿼리와 임의 길이의 문서를 처리할 수 있으며, <code>jina-colbert-v1</code> 모델은 쿼리와 문서 모두 8192까지 처리할 수 있습니다. 따라서 전체 텍스트를 Reranker API에 입력하는 것은 불필요할 수 있습니다. 두 모델 모두 긴 컨텍스트를 효율적으로 관리하므로 걱정할 필요가 없습니다. 임베딩-벡터-검색-재순위화 파이프라인에서 가장 번거롭고 휴리스틱한 측면일 수 있는 청킹은 여기서는 큰 문제가 되지 않습니다. 하지만 더 긴 컨텍스트는 더 많은 토큰을 가정하므로, 이는 API 유료 사용자가 고려해야 할 사항입니다. 이 예제에서는 233개 기사의 전체 텍스트를 사용하므로 하나의 재순위화 쿼리에 300K+ 토큰이 소비됩니다.</li><li><strong>품질에 대한 원시 데이터 대 정제된 데이터의 영향</strong>. 데이터 정제를 추가하면 향상될 수 있습니다. 예를 들어, HTML 태그를 제거하는 것만으로도 (즉, <code>docs.map(item =&gt; item.html.replace(/&lt;[^&gt;]*&gt;?/gm, '')</code>) <code>jina-reranker-v1</code> 모델의 추천 품질이 크게 향상되는 것을 관찰했습니다. 하지만 <code>jina-colbert-v1</code> 모델에서는 그 효과가 덜 두드러집니다. 이는 ColBERT 모델이 <code>jina-reranker-v1</code> 모델보다 노이즈가 있는 텍스트에 더 관대하도록 훈련되었다는 것을 시사합니다.</li><li><strong>다른 쿼리 구성이 품질에 미치는 영향.</strong> 위의 구현에서는 현재 기사의 제목과 요약을 쿼리로 직접 사용했습니다. 이것이 쿼리를 구성하는 최적의 방법일까요? <code>\"What is the most related article to...\"</code>와 같은 접두사를 추가하는 것이<code>\"가장 좋은 글을 추천해 주시면 $20를 드리겠습니다\"</code>와 같이 대규모 언어 모델에서 사용되는 프롬프트와 유사한 방식이 도움이 될까요? 이는 모델의 학습 데이터 분포와 관련이 있을 것으로 보이는 흥미로운 질문을 제기하며, 이에 대해 더 자세히 살펴볼 예정입니다.</li><li>쿼리 구성에 대한 이전 논점을 확장하여, 사용자의 최근 브라우징 기록을 활용한 개인화된 추천과 같이 쿼리의 조합 능력을 더 자세히 조사하는 것도 흥미로울 것입니다. 특히 시스템이 쿼리의 긍정적인 예시뿐만 아니라 <strong>부정적인 예시도</strong> 이해할 수 있는지, 예를 들어 <code>NOT_LIKE</code> 연산자, <code>\"이런 글은 추천하지 마세요\"</code> 또는 <code>\"이와 같은 글을 덜 보고 싶습니다\"</code>와 같은 것을 이해할 수 있는지 고려해 볼 만합니다. 다음 섹션에서 이에 대해 더 자세히 다룰 것입니다.</li></ul><h2 id=\"empirical-study-on-query-writing\">쿼리 작성에 대한 실증 연구</h2><p>Jina Reranker API를 사용한 다양한 쿼리 작성 탐구에서, 상위 10개 결과에 초점을 맞추어 인간 레이블링(즉, 우리 스스로 평가)을 통한 정성적 평가를 수행했습니다. 웹사이트에 게시된 모든 콘텐츠에 대한 완전한 지식을 가지고 있기 때문에 이는 타당한 접근이었습니다. 우리가 검토한 쿼리 작성 전략은 다음과 같습니다:</p><ul><li>글의 제목, 발췌문, 그리고 제목 + 발췌문의 조합 사용</li><li>\"이와 같은 글\", \"이런 글은 제외\", \"가장 관련성이 높은 글은 무엇인가요?\"와 같은 \"프롬프트\" 스타일의 지시문 채택</li></ul><p>reranker의 효과를 테스트하기 위해, 200개 이상의 게시물 중에서 가장 관련성 있는 글을 찾아내는—LLM에서의 \"건초더미 속 바늘 찾기\"에서 영감을 받은 도전 과제—을 위해 두 개의 복잡한 글을 쿼리 대상으로 선택했습니다. 아래에서는 이러한 \"바늘\"들을 녹색으로 강조 표시했습니다.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/03/image.png\" class=\"kg-image\" alt=\"Screenshot of a table ranking articles on search technology relevance, featuring titles, excerpts, and 'More Like' or 'Not Li\" loading=\"lazy\" width=\"2000\" height=\"758\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/03/image.png 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2024/03/image.png 1000w, https://jina-ai-gmbh.ghost.io/content/images/size/w1600/2024/03/image.png 1600w, https://jina-ai-gmbh.ghost.io/content/images/size/w2400/2024/03/image.png 2400w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">연구의 포괄적인 결과는 </span><a href=\"https://docs.google.com/spreadsheets/d/1XDOXjP6IVK1hXk3gKkng_cOpTrmS9Hm1UKCGvW1wMxU/edit?usp=sharing&ref=jina-ai-gmbh.ghost.io\"><span style=\"white-space: pre-wrap;\">이 스프레드시트</span></a><span style=\"white-space: pre-wrap;\">에서 자세히 볼 수 있습니다.</span></figcaption></figure><h2 id=\"summary\">요약</h2><p>테스트 결과를 바탕으로 다음과 같은 관찰 사항과 요약을 도출했습니다:</p><ol><li>제목과 발췌문을 조합하는 것이 가장 좋은 재순위화 결과를 보여주며, 발췌문은 재순위화 품질을 향상시키는 데 중요한 역할을 합니다.</li><li>\"프롬프트\" 스타일의 지시문을 포함하는 것은 개선으로 이어지지 않습니다.</li><li>현재 reranker 모델은 긍정적이거나 부정적인 한정자를 효과적으로 처리하지 못합니다. \"더 많이\", \"더 적게\" 또는 \"제외\"와 같은 용어는 reranker가 이해하지 못합니다.</li></ol><p>2번과 3번 포인트의 통찰은 reranker의 향후 개선을 위한 흥미로운 방향을 제시합니다. 정렬 로직을 변경하기 위한 즉각적인 프롬프팅을 가능하게 하면 reranker의 기능이 크게 확장되어 개인화된 콘텐츠 큐레이션/추천과 같은 새로운 잠재적 응용 분야가 열릴 수 있을 것으로 믿습니다.</p>",
  "comment_id": "65f53dc48ff065000146db23",
  "feature_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/03/Heading--1-.png",
  "featured": false,
  "visibility": "public",
  "created_at": "2024-03-16T07:35:48.000+01:00",
  "updated_at": "2024-03-17T19:26:09.000+01:00",
  "published_at": "2024-03-17T06:38:36.000+01:00",
  "custom_excerpt": "You can build an article recommendation system with just the Jina Reranker API—no pipeline, no embeddings, no vector search, only reranking. Find out how in 20 lines of code.",
  "codeinjection_head": null,
  "codeinjection_foot": null,
  "custom_template": null,
  "canonical_url": null,
  "authors": [
    {
      "id": "1",
      "name": "Engineering Group",
      "slug": "engineering",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/11/1.png",
      "cover_image": null,
      "bio": "We do opensource, we do neural search, we do creative AI, we do MLOps. We do we.",
      "website": "https://github.com/jina-ai",
      "location": "Berlin, Germany",
      "facebook": null,
      "twitter": "@jinaai_",
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/engineering/"
    }
  ],
  "tags": [
    {
      "id": "634a1a8ccebfc1003d8ab706",
      "name": "Tech Blog",
      "slug": "tech-blog",
      "description": null,
      "feature_image": null,
      "visibility": "public",
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "canonical_url": null,
      "accent_color": null,
      "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
    }
  ],
  "primary_author": {
    "id": "1",
    "name": "Engineering Group",
    "slug": "engineering",
    "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/11/1.png",
    "cover_image": null,
    "bio": "We do opensource, we do neural search, we do creative AI, we do MLOps. We do we.",
    "website": "https://github.com/jina-ai",
    "location": "Berlin, Germany",
    "facebook": null,
    "twitter": "@jinaai_",
    "meta_title": null,
    "meta_description": null,
    "url": "https://jina-ai-gmbh.ghost.io/author/engineering/"
  },
  "primary_tag": {
    "id": "634a1a8ccebfc1003d8ab706",
    "name": "Tech Blog",
    "slug": "tech-blog",
    "description": null,
    "feature_image": null,
    "visibility": "public",
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "canonical_url": null,
    "accent_color": null,
    "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
  },
  "url": "https://jina-ai-gmbh.ghost.io/podcast/how-to-build-article-recommendations-with-jina-reranker-api-only/",
  "excerpt": "Jina Reranker API만으로 추천 시스템을 구축할 수 있습니다—파이프라인도, 임베딩도, 벡터 검색도 필요 없이 리랭킹만으로 가능합니다. 20줄의 코드로 어떻게 구현하는지 알아보세요.",
  "reading_time": 5,
  "access": true,
  "comments": false,
  "og_image": null,
  "og_title": null,
  "og_description": null,
  "twitter_image": null,
  "twitter_title": null,
  "twitter_description": null,
  "meta_title": null,
  "meta_description": null,
  "email_subject": null,
  "frontmatter": null,
  "feature_image_alt": "Black background with a grid, multiple smiley faces, and a cursor pointing to one of them.",
  "feature_image_caption": null
}