{
  "slug": "implementing-a-chat-history-rag-with-jina-ai-and-milvus-lite",
  "id": "665d76034b4b4c0001ba1bb3",
  "uuid": "851bc948-281c-4fab-bc11-941c900b086b",
  "title": "Jina AI와 Milvus Lite를 사용한 채팅 내역 RAG 구현",
  "html": "<p>개발자와 운영 엔지니어들은 쉽게 설정하고, 빠르게 시작하며, 나중에 추가적인 어려움 없이 확장된 프로덕션 환경에 효율적으로 배포할 수 있는 인프라를 높게 평가합니다. 이러한 이유로, 우리의 파트너 <a href=\"https://milvus.io/?ref=jina-ai-gmbh.ghost.io\"><u>Milvus</u></a>의 최신 경량 벡터 데이터베이스인 <a href=\"https://milvus.io/docs/milvus_lite.md?ref=jina-ai-gmbh.ghost.io\"><u>Milvus Lite</u></a>는 Python 개발자들이 특히 고품질이고 사용하기 쉬운 검색 기반 모델과 함께 사용할 때 검색 애플리케이션을 빠르게 개발할 수 있는 중요한 도구입니다.</p><p>이 글에서는 가상의 회사 내부 공개 채널 채팅을 기반으로 구축된 <a href=\"https://jina.ai/news/albus-by-springworks-empowering-employees-with-enterprise-search?ref=jina-ai-gmbh.ghost.io\"><u>Retrieval Augmented Generation (RAG)</u></a> 애플리케이션의 예시를 통해 Milvus Lite가 <a href=\"https://jina.ai/embeddings/?ref=jina-ai-gmbh.ghost.io\"><u>Jina Embeddings v2</u></a>와 <a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><u>Jina Reranker v1</u></a>을 어떻게 통합하는지 설명하여, 직원들이 조직 관련 질문에 대한 정확하고 유용한 답변을 얻을 수 있도록 하겠습니다.</p><h2 id=\"overview-of-milvus-lite-jina-embeddings-and-jina-reranker\">Milvus Lite, Jina Embeddings 및 Jina Reranker 개요</h2><p>Milvus Lite는 선도적인 벡터 데이터베이스 Milvus의 새로운 경량 버전으로, 이제 Python 라이브러리로도 제공됩니다. Milvus Lite는 Docker나 Kubernetes에 배포된 Milvus와 동일한 API를 공유하지만 서버를 설정할 필요 없이 한 줄의 pip 명령으로 쉽게 설치할 수 있습니다.</p><p>Milvus의 Python SDK인 <a href=\"https://github.com/milvus-io/pymilvus?ref=jina-ai-gmbh.ghost.io\"><u>pymilvus</u></a>에 Jina Embeddings v2와 Jina Reranker v1을 통합함으로써, 이제 Milvus Lite를 포함한 모든 Milvus 배포 모드에서 동일한 Python 클라이언트를 사용하여 문서를 직접 임베딩할 수 있는 옵션이 생겼습니다. Jina Embeddings와 Reranker 통합에 대한 자세한 내용은 pymilvus의 <a href=\"https://milvus.io/docs/integrate_with_jina.md?ref=jina-ai-gmbh.ghost.io\"><u>문서 페이지</u></a>에서 찾을 수 있습니다.</p><p>8k-토큰 컨텍스트 윈도우와 다국어 기능을 갖춘 Jina Embeddings v2는 텍스트의 광범위한 의미를 인코딩하고 정확한 검색을 보장합니다. Jina Reranker v1을 파이프라인에 추가함으로써, 더 깊은 문맥적 이해를 위해 검색된 결과를 쿼리와 직접 크로스 인코딩하여 결과를 더욱 정제할 수 있습니다.</p><h2 id=\"milvus-and-jina-ai-models-in-action\">실전에서의 Milvus와 Jina AI 모델</h2><p>이 튜토리얼은 실제 사용 사례에 초점을 맞출 것입니다: 회사의 Slack 채팅 기록을 쿼리하여 과거 대화를 기반으로 다양한 질문에 답변하는 것입니다.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/E-R-slack--2-.jpg\" class=\"kg-image\" alt=\"Flowchart detailing the Rust community's model training process, featuring steps from the &quot;Next training step?&quot; query through\" loading=\"lazy\" width=\"1600\" height=\"900\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/E-R-slack--2-.jpg 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2024/06/E-R-slack--2-.jpg 1000w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/E-R-slack--2-.jpg 1600w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">예시 쿼리를 사용한 Slack 데이터 쿼리 프로세스 흐름</span></figcaption></figure><p>예를 들어, 직원이 위의 프로세스 스키마에서와 같이 AI 트레이닝의 다음 단계에 대해 물어볼 수 있습니다. Jina Embeddings, Jina Reranker, Milvus를 사용하여 기록된 Slack 메시지에서 관련 정보를 정확하게 식별할 수 있습니다. 이 애플리케이션은 과거 커뮤니케이션에서 가치 있는 정보에 쉽게 접근할 수 있게 함으로써 직장 생산성을 향상시킬 수 있습니다.</p><p>답변을 생성하기 위해, <a href=\"https://python.langchain.com/v0.1/docs/integrations/llms/huggingface_endpoint/?ref=jina-ai-gmbh.ghost.io\"><u>Langchain의 HuggingFace 통합</u></a>을 통해 <a href=\"https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1?ref=jina-ai-gmbh.ghost.io\"><u>Mixtral 7B Instruct</u></a>를 사용할 것입니다. 모델을 사용하려면 <a href=\"https://huggingface.co/docs/hub/en/security-tokens?ref=jina-ai-gmbh.ghost.io\"><u>여기</u></a>에 설명된 대로 생성할 수 있는 HuggingFace 액세스 토큰이 필요합니다.</p><p><a href=\"https://colab.research.google.com/github/jina-ai/workshops/blob/main/notebooks/embeddings/milvus/milvus_lite_jina_integration.ipynb?ref=jina-ai-gmbh.ghost.io\"><u>Colab</u></a>에서 따라하거나 <a href=\"https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/milvus/milvus_lite_jina_integration.ipynb?ref=jina-ai-gmbh.ghost.io\"><u>노트북을 다운로드</u></a>하여 진행할 수 있습니다.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://colab.research.google.com/github/jina-ai/workshops/blob/main/notebooks/embeddings/milvus/milvus_lite_jina_integration.ipynb?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Google Colab</div><div class=\"kg-bookmark-description\"></div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://ssl.gstatic.com/colaboratory-static/common/0d8af74d4089ab8b6d127bd74854be98/img/favicon.ico\" alt=\"\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://colab.research.google.com/img/colab_favicon_256px.png\" alt=\"\"></div></a></figure><h3 id=\"about-the-dataset\">데이터셋에 대하여</h3><p>이 튜토리얼에서 사용된 데이터셋은 GPT-4를 사용하여 생성되었으며, Blueprint AI의 Slack 채널 채팅 기록을 재현하도록 설계되었습니다. Blueprint는 자체 기반 모델을 개발하는 가상의 AI 스타트업입니다. 데이터셋은 <a href=\"https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/milvus/chat_history.json?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\"><u>여기</u></a>에서 다운로드할 수 있습니다.</p><p>데이터는 관련된 Slack 스레드 모음을 나타내는 <em>채널</em>로 구성되어 있습니다. 각 채널에는 10가지 주제 옵션 중 하나의 주제 레이블이 있습니다: <em>model distribution</em>, <em>model training</em>, <em>model fine-tuning</em>, <em>ethics and bias mitigation</em>, <em>user feedback</em>, <em>sales</em>, <em>marketing</em>, <em>model onboarding</em>, <em>creative design</em>, <em>product management</em>. 한 참가자는 \"전문가 사용자\"로 알려져 있습니다. 이 필드를 사용하여 아래에서 보여드릴 주제의 가장 전문적인 사용자를 쿼리한 결과를 검증할 수 있습니다.</p><p>각 채널에는 채널당 최대 100개의 메시지를 포함하는 대화 스레드가 있는 채팅 기록이 포함되어 있습니다. 데이터셋의 각 메시지에는 다음 정보가 포함되어 있습니다:</p><ul><li>메시지를 보낸 <strong>사용자</strong></li><li>사용자가 보낸 <strong>메시지 텍스트</strong></li><li>메시지의 <strong>타임스탬프</strong></li><li>사용자가 메시지에 첨부했을 수 있는 <strong>파일 이름</strong></li><li><strong>메시지 ID</strong></li><li>메시지가 다른 메시지에서 시작된 스레드 내에 있는 경우 <strong>부모 메시지 ID</strong></li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/image-1.png\" class=\"kg-image\" alt=\"Diagram showing the structure of a messaging system, detailing the relationship between 'Channel' and 'Message' entities, wit\" loading=\"lazy\" width=\"780\" height=\"450\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/image-1.png 600w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/image-1.png 780w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">채팅 데이터 구조의 UML 다이어그램.</span></figcaption></figure><h3 id=\"set-up-the-environment\">환경 설정</h3><p>먼저, 필요한 모든 구성 요소를 설치하세요:</p><pre><code class=\"language-Python\">pip install -U pymilvus\npip install -U \"pymilvus[model]\"\npip install langchain\npip install langchain-community\n</code></pre><p>데이터셋을 다운로드하세요:</p><pre><code class=\"language-Python\">import os\n\nif not os.path.exists(\"chat_history.json\"):\n    !wget https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/milvus/chat_history.json</code></pre><p>환경 변수에 Jina AI API Key를 설정하세요. <a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><u>여기</u></a>에서 생성할 수 있습니다.</p><pre><code class=\"language-Python\">import os\nimport getpass\n\nos.environ[\"JINAAI_API_KEY\"] = getpass.getpass(prompt=\"Jina AI API Key: \")</code></pre><p>Hugging Face Token도 동일하게 설정하세요. <a href=\"https://huggingface.co/docs/hub/en/security-tokens?ref=jina-ai-gmbh.ghost.io\"><u>여기</u></a>에서 생성하는 방법을 확인할 수 있습니다. <a href=\"https://huggingface.co/docs/hub/en/index?ref=jina-ai-gmbh.ghost.io\"><u>Hugging Face Hub</u></a>에 접근하기 위해 <code>READ</code>로 설정되어 있는지 확인하세요.</p><pre><code class=\"language-Python\">os.environ[\"HUGGINGFACEHUB_API_TOKEN\"] = getpass.getpass(prompt=\"Hugging Face Token: \")</code></pre><h3 id=\"create-the-milvus-collection\">Milvus Collection 생성</h3><p>데이터를 인덱싱하기 위한 Milvus Collection을 생성하세요:</p><pre><code class=\"language-Python\">from pymilvus import MilvusClient, DataType\n\n# Specify a local file name as uri parameter of MilvusClient to use Milvus Lite\nclient = MilvusClient(\"milvus_jina.db\")\n\nschema = MilvusClient.create_schema(\n    auto_id=True,\n    enable_dynamic_field=True,\n)\n\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, description=\"The Primary Key\", is_primary=True)\nschema.add_field(field_name=\"embedding\", datatype=DataType.FLOAT_VECTOR, description=\"The Embedding Vector\", dim=768)\n\nindex_params = client.prepare_index_params()\nindex_params.add_index(field_name=\"embedding\", metric_type=\"COSINE\", index_type=\"AUTOINDEX\")\n\nclient.create_collection(collection_name=\"milvus_jina\", schema=schema, index_params=index_params)</code></pre><h3 id=\"prepare-the-data\">데이터 준비</h3><p>채팅 기록을 파싱하고 메타데이터를 추출합니다:</p><pre><code class=\"language-Python\">import json\n\nwith open(\"chat_history.json\", \"r\", encoding=\"utf-8\") as file:\n    chat_data = json.load(file)\n\nmessages = []\nmetadatas = []\n\nfor channel in chat_data:\n  chat_history = channel[\"chat_history\"]\n  chat_topic = channel[\"topic\"]\n  chat_expert = channel[\"expert_user\"]\n  for message in chat_history:\n    text = f\"\"\"{message[\"user\"]}: {message[\"message\"]}\"\"\"\n    messages.append(text)\n    meta = {\n        \"time_stamp\": message[\"time_stamp\"],\n        \"file_name\": message[\"file_name\"],\n        \"parent_message_nr\": message[\"parent_message_nr\"],\n        \"channel\": chat_topic,\n        \"expert\": True if message[\"user\"] == chat_expert else False\n    }\n    metadatas.append(meta)\n</code></pre><h3 id=\"embed-the-chat-data\">채팅 데이터 임베딩</h3><p>관련 채팅 정보를 검색하기 위해 Jina Embeddings v2를 사용하여 각 메시지의 임베딩을 생성합니다:</p><pre><code class=\"language-Python\">from pymilvus.model.dense import JinaEmbeddingFunction\n\njina_ef = JinaEmbeddingFunction(\"jina-embeddings-v2-base-en\")\n\nembeddings = jina_ef.encode_documents(messages)</code></pre><h3 id=\"index-the-chat-data\">채팅 데이터 인덱싱</h3><p>메시지, 임베딩 및 관련 메타데이터를 인덱싱합니다:</p><pre><code class=\"language-Python\">collection_data = [{\n    \"message\": message,\n    \"embedding\": embedding,\n    \"metadata\": metadata\n} for message, embedding, metadata in zip(messages, embeddings, metadatas)]\n\ndata = client.insert(\n    collection_name=\"milvus_jina\",\n    data=collection_data\n)</code></pre><h3 id=\"query-the-chat-history\">채팅 기록 쿼리</h3><p>질문을 해봅시다:</p><pre><code class=\"language-Python\">query = \"Who knows the most about encryption protocols in my team?\"</code></pre><p>이제 쿼리를 임베딩하고 관련 메시지를 검색합니다. 여기서는 가장 관련성이 높은 5개의 메시지를 검색하고 Jina Reranker v1을 사용하여 순위를 재조정합니다:</p><pre><code class=\"language-Python\">from pymilvus.model.reranker import JinaRerankFunction\n\nquery_vectors = jina_ef.encode_queries([query])\n\nresults = client.search(\n    collection_name=\"milvus_jina\",\n    data=query_vectors,\n    limit=5,\n)\n\nresults = results[0]\n\nids = [results[i][\"id\"] for i in range(len(results))]\n\nresults = client.get(\n    collection_name=\"milvus_jina\",\n    ids=ids,\n    output_fields=[\"id\", \"message\", \"metadata\"]\n)\n\njina_rf = JinaRerankFunction(\"jina-reranker-v1-base-en\")\n\ndocuments = [results[i][\"message\"] for i in range(len(results))]\nreranked_documents = jina_rf(query, documents)\n\nreranked_messages = []\nfor reranked_document in reranked_documents:\n  idx = reranked_document.index\n  reranked_messages.append(results[idx])</code></pre><p>마지막으로, Mixtral 7B Instruct를 사용하여 쿼리에 대한 답변을 생성하고 재순위가 매겨진 메시지를 컨텍스트로 사용합니다:</p><pre><code class=\"language-Python\">from langchain.prompts import PromptTemplate\nfrom langchain_community.llms import HuggingFaceEndpoint\n\nllm = HuggingFaceEndpoint(repo_id=\"mistralai/Mixtral-8x7B-Instruct-v0.1\")\n\nprompt = \"\"\"&lt;s&gt;[INST] Context information is below.\\\\n\n        It includes the five most relevant messages to the query, sorted based on their relevance to the query.\\\\n\n        ---------------------\\\\n\n        {context_str}\\\\\\\\n\n        ---------------------\\\\n\n        Given the context information and not prior knowledge,\n        answer the query. Please be brief, concise, and complete.\\\\n\n        If the context information does not contain an answer to the query,\n        respond with \\\\\"No information\\\\\".\\\\n\n        Query: {query_str}[/INST] &lt;/s&gt;\"\"\"\n\nprompt = PromptTemplate(template=prompt, input_variables=[\"query_str\", \"context_str\"])\n\nllm_chain = prompt | llm\n\nanswer = llm_chain.invoke({\"query_str\":query, \"context_str\":reranked_messages})\n\nprint(f\"\\n\\nANSWER:\\n\\n{answer}\")</code></pre><p>우리의 질문에 대한 답변은:</p><blockquote>\"컨텍스트 정보를 바탕으로, User5가 팀에서 암호화 프로토콜에 대해 가장 잘 알고 있는 것 같습니다. 그들은 새로운 프로토콜이 특히 클라우드 배포에서 데이터 보안을 크게 향상시킨다고 언급했습니다.\"</blockquote><p><code>chat_history.json</code>의 메시지를 읽어보시면 User5가 가장 전문적인 사용자인지 직접 확인해볼 수 있습니다.</p><h2 id=\"summary\">요약</h2><p>우리는 Milvus Lite를 설정하고, Jina Embeddings v2를 사용하여 채팅 데이터를 임베딩하고, Jina Reranker v1로 검색 결과를 개선하는 방법을 Slack 채팅 기록 검색이라는 실용적인 사용 사례를 통해 살펴보았습니다. Milvus Lite는 복잡한 서버 설정 없이 Python 기반 애플리케이션 개발을 단순화합니다. Jina Embeddings 및 Reranker와의 통합은 직장에서 가치 있는 정보에 더 쉽게 접근할 수 있게 함으로써 생산성을 향상시키는 것을 목표로 합니다.</p><h2 id=\"use-jina-ai-models-and-milvus-now\"><strong>지금 Jina AI 모델과 Milvus 사용하기</strong></h2><p><a href=\"https://milvus.io/docs/integrate_with_jina.md?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\"><u>Milvus Lite</u></a>와 통합된 <a href=\"https://jina.ai/embeddings?ref=jina-ai-gmbh.ghost.io\"><u>Jina Embeddings</u></a> 및 <a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><u>Reranker</u></a>는 몇 줄의 코드만으로 사용할 수 있는 완벽한 처리 파이프라인을 제공합니다.</p><p>여러분의 사용 사례에 대해 듣고 Jina AI Milvus 확장이 여러분의 비즈니스 요구 사항에 어떻게 부합하는지 이야기하고 싶습니다. <a href=\"https://jina.ai/contact-sales?ref=jina-ai-gmbh.ghost.io\"><u>웹사이트</u></a>나 <a href=\"https://discord.jina.ai/?ref=jina-ai-gmbh.ghost.io\"><u>Discord 채널</u></a>을 통해 피드백을 공유하고 최신 모델에 대한 정보를 받아보세요. Milvus와 Jina AI의 통합에 대한 질문이 있으시다면 <a href=\"https://milvus.io/community?ref=jina-ai-gmbh.ghost.io\"><u>Milvus 커뮤니티</u></a>에 참여하세요.</p>",
  "comment_id": "665d76034b4b4c0001ba1bb3",
  "feature_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/06/Blog-images--39-.jpg",
  "featured": false,
  "visibility": "public",
  "created_at": "2024-06-03T09:51:31.000+02:00",
  "updated_at": "2024-07-08T21:08:43.000+02:00",
  "published_at": "2024-06-03T16:09:33.000+02:00",
  "custom_excerpt": "Enhance your search applications in Python with Jina Embeddings and Reranker and lightweight, easy-to-deploy Milvus Lite.\n",
  "codeinjection_head": null,
  "codeinjection_foot": null,
  "custom_template": null,
  "canonical_url": null,
  "authors": [
    {
      "id": "65e85e35b22368000152a4bf",
      "name": "Francesco Kruk",
      "slug": "francesco",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/03/Portrait-Picture_Low.jpg",
      "cover_image": null,
      "bio": null,
      "website": null,
      "location": null,
      "facebook": null,
      "twitter": null,
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/francesco/"
    },
    {
      "id": "641c23a2f4d50d003d590474",
      "name": "Saahil Ognawala",
      "slug": "saahil",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2023/03/profile-option-2.jpg",
      "cover_image": null,
      "bio": "Senior Product Manager at Jina AI",
      "website": "http://www.saahilognawala.com/",
      "location": "Munich, DE",
      "facebook": null,
      "twitter": "@saahil",
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/saahil/"
    }
  ],
  "tags": [
    {
      "id": "634a1a8ccebfc1003d8ab706",
      "name": "Tech Blog",
      "slug": "tech-blog",
      "description": null,
      "feature_image": null,
      "visibility": "public",
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "canonical_url": null,
      "accent_color": null,
      "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
    }
  ],
  "primary_author": {
    "id": "65e85e35b22368000152a4bf",
    "name": "Francesco Kruk",
    "slug": "francesco",
    "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/03/Portrait-Picture_Low.jpg",
    "cover_image": null,
    "bio": null,
    "website": null,
    "location": null,
    "facebook": null,
    "twitter": null,
    "meta_title": null,
    "meta_description": null,
    "url": "https://jina-ai-gmbh.ghost.io/author/francesco/"
  },
  "primary_tag": {
    "id": "634a1a8ccebfc1003d8ab706",
    "name": "Tech Blog",
    "slug": "tech-blog",
    "description": null,
    "feature_image": null,
    "visibility": "public",
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "canonical_url": null,
    "accent_color": null,
    "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
  },
  "url": "https://jina-ai-gmbh.ghost.io/podcast/implementing-a-chat-history-rag-with-jina-ai-and-milvus-lite/",
  "excerpt": "Jina Embeddings와 Reranker, 그리고 가벼우면서도 배포가 쉬운 Milvus Lite를 사용하여 Python 기반 검색 애플리케이션을 향상시켜보세요.",
  "reading_time": 6,
  "access": true,
  "comments": false,
  "og_image": null,
  "og_title": null,
  "og_description": null,
  "twitter_image": null,
  "twitter_title": null,
  "twitter_description": null,
  "meta_title": null,
  "meta_description": null,
  "email_subject": null,
  "frontmatter": null,
  "feature_image_alt": "Black background with vivid geometric shapes on the sides and central logos \"Embeddings,\" \"Reranker,\" and \"Milvus.\"",
  "feature_image_caption": null
}