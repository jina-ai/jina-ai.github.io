{
  "slug": "build-a-rag-system-with-jina-embeddings-and-qdrant",
  "id": "65ddadd039a5b70001810ea3",
  "uuid": "e3419a3e-4a7c-43c3-ac69-6f65f00a7ad8",
  "title": "基于 Jina Embeddings 和 Qdrant 构建 RAG 系统",
  "html": "<p>检索增强生成是一组快速发展的技术，最初是作为大语言模型（LLMs）的<a href=\"https://dl.acm.org/doi/abs/10.5555/3495724.3496517?ref=jina-ai-gmbh.ghost.io\"><u>扩展被提出的</u></a>，但现在越来越被视为一种重新构想 AI 模型角色的替代范式。</p><p>我们将向您展示如何使用 <a href=\"https://www.llamaindex.ai/?ref=jina-ai-gmbh.ghost.io\">LlamaIndex 框架</a>、开源的 <a href=\"https://docs.mistral.ai/?ref=jina-ai-gmbh.ghost.io\">Mistral LLM</a>、<a href=\"https://jina.ai/embeddings?ref=jina-ai-gmbh.ghost.io\">Jina Embeddings v2</a> 和 <a href=\"https://qdrant.tech/?utm_source=jinaai&utm_medium=partner&utm_campaign=qdrant-jinaai-rag-blog\" rel=\"noreferrer\">Qdrant 的 AI 就绪型向量数据库</a>构建一个基础的 RAG 引擎。</p><h2 id=\"rag-in-context\"><strong>RAG 的背景</strong></h2><p>在 RAG 系统中，AI 模型的角色仍然是核心的，但更加有限。它不是从训练数据中获得的内部知识来回答提示，而是在提示中呈现相关信息。模型的作用则是理解并将信息综合成输出。</p><p>这充分发挥了 AI 模型的优势，同时最小化了其缺点。</p><p>例如，我们可能给 <a href=\"https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1?ref=jina-ai-gmbh.ghost.io\"><u>Mistral-Instruct 模型</u></a>以下提示：</p><pre><code class=\"language-text\">Answer the query. Please be brief, concise, and complete.\nQuery: Why is Taylor Swift planning to attend the Superbowl?\nAnswer:\n</code></pre><p>当我这样做时，模型回应道：</p><pre><code class=\"language-text\">I don't have real-time information. However, as of my last update,&nbsp;\nTaylor Swift is not officially confirmed to attend or perform at&nbsp;\nthe Superbowl. If there are any updates, I recommend checking the&nbsp;\nlatest news sources.</code></pre><p>大语言模型更新和重新训练的成本很高，所以它们的内部信息永远不可能完全保持最新。</p><p>此外，大语言模型众所周知会\"产生幻觉\"，即编造看似合理但可能部分或完全不正确的答案，需要验证。</p><pre><code class=\"language-text\">Answer the query. Please be brief, concise, and complete.\nQuery: What was Weird Al Yankovic's first Taylor Swift parody?\nAnswer:\n\nWeird Al Yankovic's first Taylor Swift parody was \"TMZ,\" a spoof&nbsp;\nof Swift's song \"Blank Space.\" The parody was released in 2014&nbsp;\nas part of Yankovic's album \"Mandatory Fun.\" The song humorously&nbsp;\naddresses the obsession with celebrity gossip and scandals, as&nbsp;\nreported by the tabloid news website TMZ.</code></pre><p>Weird Al Yankovic 的 <em>TMZ</em> 在 2011 年的专辑 <em>Alpocalypse</em> 中发布，是对 Swift 的 <a href=\"https://youtu.be/vwp8Ur6tO-8?ref=jina-ai-gmbh.ghost.io\"><em><u>You Belong with Me</u></em></a> 的模仿。</p><figure class=\"kg-card kg-embed-card\"><iframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/BwqFgnl4rMs?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" title=\"TMZ (Parody of &quot;You Belong With Me&quot; by Taylor Swift) (Official 4K Video)\"></iframe></figure><p>神经网络的本质使得幻觉难以（如果不是不可能）完全预防，这严重削弱了将 AI 模型用作信息源的任何计划。</p><p>用 OpenAI 的 CEO <a href=\"https://youtu.be/uaQZIK9gvNo?t=1130&ref=jina-ai-gmbh.ghost.io\"><u>Sam Altman 的话</u></a>说：</p><blockquote class=\"kg-blockquote-alt\">\"我认为人们把这些模型（LLMs）当作数据库是一个大错误。[...] 它会起作用，某种程度上。但它是世界上最贵、最慢、最不准确的数据库。\"</blockquote><p>RAG 最大限度地减少了对 AI 模型内部世界知识的依赖，并利用了它最大的优势：自然语言理解和流畅的语言生成。</p><p>让我们再看一个 Mistral-Instruct 无法回答的问题：</p><pre><code class=\"language-text\">Answer the query. Please be brief, concise, and complete.\n\nQuery: What is the title of Taylor Swift's next album?\nAnswer:\n\nAs of the time I am providing this answer, Taylor Swift has&nbsp;\nnot yet announced the title of her next album. She has released&nbsp;\nseveral re-recorded albums, but the title of her next original&nbsp;\nalbum remains unknown. I recommend checking her official social&nbsp;\nmedia channels or website for the latest updates.</code></pre><p>现在，RAG 系统可能有一个最新新闻文章的数据库，或者也许会在互联网上搜索与 Taylor Swift 下一张专辑标题相关的文本。然后，它会将找到的文本插入提示中。</p><p>假设它识别出<a href=\"https://apnews.com/article/taylor-swift-new-album-5e219107982b1498a3656caeea85e0eb?ref=jina-ai-gmbh.ghost.io\"><u>这篇美联社文章</u></a>与查询相关，并构建以下提示：</p><pre><code class=\"language-text\">Context information is below.\n---------------------\nFebruary 6, 2024\nLOS ANGELES (AP) — Forget her \"Reputation.\" Taylor Swift has&nbsp;\na whole new album coming out.\n\nAccepting the Grammy for best pop vocal album on Sunday night,&nbsp;\nTaylor said she'd been keeping a secret for two years.\n\n\"My brand-new album comes out April 19. It's called 'The Tortured&nbsp;\nPoets Department.' I'm going to go and post the cover right now&nbsp;\nbackstage,\" she announced.\n\nAnd so she did.\n\n---------------------\nGiven the context information and not prior knowledge, answer the query.&nbsp;\nPlease be brief, concise, and complete.\nIf the context information does not contain an answer to the query,&nbsp;\nrespond with \"No information\".\nQuery: What is the title of Taylor Swift's next album?\nAnswer:</code></pre><p>Mistral-Instruct 回答道：</p><pre><code class=\"language-text\">The title of Taylor Swift's next album is 'The Tortured Poets Department'.</code></pre><p>这种提示方式也显著降低了产生幻觉的可能性。例如：</p><pre><code class=\"language-text\">Context information is below.\n---------------------\nAlpocalypse is the thirteenth studio album by American parody&nbsp;\nmusician \"Weird Al\" Yankovic, released on June 21, 2011.\n\nTrack List\n\n1. Perform This Way (Parody of \"Born This Way\" by Lady Gaga)\n2. CNR\n3. TMZ (Parody of \"You Belong with Me\" by Taylor Swift)\n4. Skipper Dan\n5. Polka Face (Polka medley including songs by artists such as&nbsp;\n&nbsp;&nbsp;&nbsp;Lady Gaga, Justin Bieber, Britney Spears, Ke$ha, and others)\n6. Craigslist\n7. Party in the CIA (Parody of \"Party in the U.S.A.\" by Miley&nbsp;\n&nbsp;&nbsp;&nbsp;Cyrus)\n8. Ringtone\n9. Another Tattoo (Parody of \"Nothin' on You\" by B.o.B featuring&nbsp;\n&nbsp;&nbsp;&nbsp;Bruno Mars)\n10. If That Isn't Love\n11. Whatever You Like (Parody of \"Whatever You Like\" by T.I.)\n12. Stop Forwarding That Crap to Me\n\n---------------------\nGiven the context information and not prior knowledge, answer the&nbsp;\nquery. Please be brief, concise, and complete.\nIf the context information does not contain an answer to the query,&nbsp;\nrespond with \"No information\".\nQuery: What was Weird Al Yankovic's first Taylor Swift parody, what&nbsp;\nyear was it released, and what song was he parodying?\nAnswer:\n\nWeird Al Yankovic's first Taylor Swift parody was \"TMZ,\" and it was&nbsp;\nreleased in 2011. He was parodying \"You Belong with Me\" by Taylor&nbsp;\nSwift.\n</code></pre><h2 id=\"anatomy-of-a-rag-system\"><strong>RAG 系统的构成</strong></h2><p>RAG 系统至少包含两个组件：</p><ul><li>生成式 AI 模型。</li><li>信息检索系统。</li></ul><p>在本文中，我们将使用 <a href=\"https://huggingface.co/mistralai/Mistral-7B-Instruct-v0.2?ref=jina-ai-gmbh.ghost.io\">Mistral-Instruct</a> 作为生成式 AI 模型，并通过 <a href=\"https://huggingface.co/docs/api-inference/index?ref=jina-ai-gmbh.ghost.io\">Hugging Face Inference API</a> 访问它。我们将使用 <a href=\"https://qdrant.tech/?utm_source=jinaai&utm_medium=partner&utm_campaign=qdrant-jinaai-rag-blog\">Qdrant 向量数据库</a>和 <a href=\"https://jina.ai/embeddings?ref=jina-ai-gmbh.ghost.io\">Jina Embeddings</a> 作为信息检索系统。</p><p>作为数据源，我们将使用 <a href=\"https://www.whitehouse.gov/ostp/ostps-teams/nstc/?ref=jina-ai-gmbh.ghost.io\">国家科技委员会</a>（该机构就科学和技术事务向美国总统提供建议）于 2023 年 5 月发布的<a href=\"https://www.whitehouse.gov/wp-content/uploads/2023/05/National-Artificial-Intelligence-Research-and-Development-Strategic-Plan-2023-Update.pdf?ref=jina-ai-gmbh.ghost.io\"><em><u>《国家人工智能研发战略规划 2023 年更新》</u></em></a>。这份约 25,000 字的文件是美国 AI 政策和发展的政策和战略规划文件。</p><p>这也是一份典型的\"太长不读\"政府政策文件。其中大部分内容都很枯燥，除非你在这个领域有利益相关或密切兴趣，否则你可能不会去读它。但你可能仍然想知道它说了什么。</p><p>本文将指导您创建一个能够回答有关该文本及其内容问题的 RAG 系统的步骤。</p><h2 id=\"install-the-prerequisites\"><strong>安装先决条件</strong></h2><p>首先，确保您已安装所有相关的 Python 库。在您的 Python 环境中运行以下命令：</p><pre><code class=\"language-shell\">pip install llama-index qdrant-client \npip install pdfminer.six llama-index-vector-stores-qdrant\npip install llama-index-llms-openai llama-index-embeddings-jinaai \npip install llama-index-llms-huggingface \"huggingface_hub[inference]\"</code></pre><p>我们将使用 LlamaIndex 来围绕 Mistral-Instruct 大语言模型构建一个 RAG 系统，并使用 <a href=\"https://pypi.org/project/pdfminer.six/?ref=jina-ai-gmbh.ghost.io\"><u>pdfminer.six</u></a> 来将 PDF 文件处理到 Qdrant 向量存储中。</p><h2 id=\"connect-to-mistral-instruct-via-the-hugging-face-inference-api\"><strong>通过 Hugging Face Inference API 连接 Mistral-Instruct</strong></h2><p>首先，设置 LLM。你需要访问 Hugging Face Inference API，包括访问令牌。如果你有 Hugging Face 账户，可以从<a href=\"https://huggingface.co/settings/tokens.?ref=jina-ai-gmbh.ghost.io\">你的账户设置页面</a>获取令牌。</p><p>如果你没有账户，首先需要<a href=\"https://huggingface.co/join?ref=jina-ai-gmbh.ghost.io\">注册一个</a>，然后创建一个<a href=\"https://huggingface.co/settings/tokens?ref=jina-ai-gmbh.ghost.io\">访问令牌</a>。</p><p>将你的令牌放在一个变量中以供后续使用：</p><pre><code class=\"language-python\">hf_inference_api_key = '&lt;your HuggingFace Inference API token&gt;'</code></pre><p>接下来，我们构建一个提示模板：</p><pre><code class=\"language-python\">from llama_index.core import PromptTemplate\n\nqa_prompt_tmpl = (\n&nbsp;&nbsp;&nbsp;&nbsp;\"Context information is below.\\n\"\n&nbsp;&nbsp;&nbsp;&nbsp;\"---------------------\\n\"\n&nbsp;&nbsp;&nbsp;&nbsp;\"{context_str}\\\\n\"\n&nbsp;&nbsp;&nbsp;&nbsp;\"---------------------\\n\"\n&nbsp;&nbsp;&nbsp;&nbsp;\"Given the context information and not prior knowledge, \"\n&nbsp;&nbsp;&nbsp;&nbsp;\"answer the query. Please be brief, concise, and complete.\\n\"\n&nbsp;&nbsp;&nbsp;&nbsp;\"If the context information does not contain an answer to the query, \"\n&nbsp;&nbsp;&nbsp;&nbsp;\"respond with \\\"No information\\\".\\n\"\n&nbsp;&nbsp;&nbsp;&nbsp;\"Query: {query_str}\\n\"\n&nbsp;&nbsp;&nbsp;&nbsp;\"Answer: \"\n)\nqa_prompt = PromptTemplate(qa_prompt_tmpl)</code></pre><p>这个模板指示 LLM 仅使用提示中提供的上下文信息来回答问题。这个提示在我们使用 Mistral-Instruct 时效果很好，但你可以尝试其他措辞来看看什么最适合你的用例。</p><pre><code class=\"language-python\">from llama_index.llms.huggingface import HuggingFaceInferenceAPI\n\nmixtral_llm = HuggingFaceInferenceAPI(\n    model_name=\"mistralai/Mixtral-8x7B-Instruct-v0.1\", \n    token=hf_inference_api_key\n)</code></pre><p>最后，为 LlamaIndex 框架创建并初始化一个对象，该对象持有与 Mistral-Instruct 的连接。下面的代码来自<a href=\"https://jina.ai/news/full-stack-rag-with-jina-embeddings-v2-and-llamaindex/?ref=jina-ai-gmbh.ghost.io\"><u>之前关于使用 LlamaIndex 创建 RAG 系统的文章</u></a>。</p><p>这将把与 Mistral LLM 的连接放入变量 <code>mistral_llm</code> 中。</p><h2 id=\"information-retrieval-with-qdrant-and-jina-embeddings\"><strong>使用 Qdrant 和 Jina Embeddings 进行信息检索</strong></h2><p>要设置检索系统，你需要一个 Jina Embeddings API 密钥。你可以在 <a href=\"https://jina.ai/embeddings/?ref=jina-ai-gmbh.ghost.io\">Jina Embeddings 网站</a>获得一个免费的 100 万 token 预付额度的密钥。</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://jina.ai/embeddings/?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Embedding API</div><div class=\"kg-bookmark-description\">从 100 万免费 token 开始。为你的搜索和 RAG 系统提供顶级性能、8192 上下文长度的双语嵌入。</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jina.ai/icons/favicon-128x128.png\" alt=\"\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jina.ai/banner-embedding-api.png\" alt=\"\"></div></a></figure><p>将你的 Jina Embeddings 密钥放在一个变量中以供后续使用：</p><pre><code class=\"language-python\">jina_emb_api_key = \"&lt;your Jina Embeddings API key&gt;\"</code></pre><p>然后，使用 LlamaIndex 创建一个 Jina Embeddings 服务器的连接器对象，特别选择英语单语模型：</p><pre><code class=\"language-python\">from llama_index.embeddings.jinaai import JinaEmbedding\n\njina_embedding_model = JinaEmbedding(\n    api_key=jina_emb_api_key,\n    model=\"jina-embeddings-v2-base-en\",\n)</code></pre><h3 id=\"load-text-data\"><strong>加载文本数据</strong></h3><p>接下来，我们将加载文档并将其分割成段落。首先，从白宫网站下载 PDF 到变量 <code>pdf_data</code>：</p><pre><code class=\"language-python\">import urllib.request\n\nuri = \"https://www.whitehouse.gov/wp-content/uploads/2023/05/National-Artificial-Intelligence-Research-and-Development-Strategic-Plan-2023-Update.pdf\"\npdf_data = urllib.request.urlopen(uri).read()</code></pre><p>接下来，我们将逐页处理 PDF，提取文本并通过在双换行符处分割将其分块成段落。这些都存储在列表 <code>text_paras</code> 中：</p><pre><code class=\"language-python\">import regex as re\nfrom io import BytesIO, StringIO\nfrom pdfminer.converter import TextConverter\nfrom pdfminer.layout import LAParams\nfrom pdfminer.pdfdocument import PDFDocument\nfrom pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter\nfrom pdfminer.pdfpage import PDFPage\nfrom pdfminer.pdfparser import PDFParser\n\ntext_paras = []\nparser = PDFParser(BytesIO(pdf_data))\ndoc = PDFDocument(parser)\nrsrcmgr = PDFResourceManager()\nfor page in PDFPage.create_pages(doc):\n&nbsp;&nbsp;&nbsp;&nbsp;output_string = StringIO()\n&nbsp;&nbsp;&nbsp;&nbsp;device = TextConverter(rsrcmgr, output_string, laparams=LAParams())\n&nbsp;&nbsp;&nbsp;&nbsp;interpreter = PDFPageInterpreter(rsrcmgr, device)\n&nbsp;&nbsp;&nbsp;&nbsp;interpreter.process_page(page)\n&nbsp;&nbsp;&nbsp;&nbsp;page_text = output_string.getvalue()\n&nbsp;&nbsp;&nbsp;&nbsp;text_paras.extend(re.split(r'\\n\\s*\\n', page_text))\n</code></pre><p>检查是否所有内容都已加载：</p><pre><code class=\"language-python\">assert len(text_paras) == 615</code></pre><p>接下来，我们将这个短文本列表转换为 <a href=\"https://docs.llamaindex.ai/en/stable/module_guides/loading/documents_and_nodes/root.html?ref=jina-ai-gmbh.ghost.io\">LlamaIndex Document 对象</a>：</p><pre><code class=\"language-python\">from llama_index.core.readers import StringIterableReader\n\nrag_docs = StringIterableReader().load_data(text_paras)</code></pre><p>你可以检查文本：</p><pre><code class=\"language-python\">print(rag_docs[0].text)</code></pre><p>结果：</p><pre><code class=\"language-text\">NATIONAL ARTIFICIAL INTELLIGENCE&nbsp;\nRESEARCH AND DEVELOPMENT&nbsp;\nSTRATEGIC PLAN&nbsp;\n2023 UPDATE</code></pre><h3 id=\"set-up-a-qdrant-vector-database\"><strong>设置 Qdrant 向量数据库</strong></h3><p>在本文中，我们将使用 <a href=\"https://cloud.qdrant.io/?ref=jina-ai-gmbh.ghost.io\"><u>Qdrant Vector Search Cloud</u></a> 来实现 RAG 系统的数据库。Qdrant 的免费层包括 1GB 的存储空间，这对于本教程来说绰绰有余。</p><p>在继续之前，你需要<a href=\"https://cloud.qdrant.io/login?ref=jina-ai-gmbh.ghost.io\"><u>在 Qdrant Cloud 网站上创建一个账户</u></a>。</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://cloud.qdrant.io/login?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Vector Search Database | Qdrant Cloud</div><div class=\"kg-bookmark-description\">Qdrant 向量搜索引擎的托管云解决方案。用于高性能向量相似度搜索的云原生向量数据库。</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://cloud.qdrant.io/apple-touch-icon.png\" alt=\"\"><span class=\"kg-bookmark-author\">Qdrant Cloud</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://cloud.qdrant.io/social.png\" alt=\"\"></div></a></figure><p>一旦你有了账户并登录后，你需要创建一个集群。按照 Qdrant 网站上的<a href=\"https://qdrant.tech/documentation/cloud/quickstart-cloud/?utm_source=jinaai&utm_medium=partner&utm_campaign=qdrant-jinaai-rag-blog\" rel=\"noreferrer\"><u>\"快速入门\"说明</u></a>来设置一个免费集群并获取 API 和 Qdrant 主机服务器的名称。</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://qdrant.tech/documentation/cloud/quickstart-cloud/?utm_source=jinaai&utm_medium=partner&utm_campaign=qdrant-jinaai-rag-blog\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Quickstart - Qdrant</div><div class=\"kg-bookmark-description\">Qdrant 是一个用 Rust 编写的开源向量数据库和向量搜索引擎。它提供快速且可扩展的向量相似度搜索服务，并具有便捷的 API。</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://qdrant.tech/images/apple-touch-icon.png\" alt=\"\"><span class=\"kg-bookmark-author\">Edit on GitHub</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://qdrant.tech/documentation/cloud/quickstart-cloud-social-preview.png\" alt=\"\"></div></a></figure><p>将密钥和主机名存储在变量中：</p><pre><code class=\"language-python\">qdrant_api_key = \"&lt;your API key&gt;\"\nqdrant_server = \"https://&lt;your server&gt;\"</code></pre><p>接下来，我们需要从 <code>qdrant_client</code> 和 <code>llama_index</code> 包中导入相关组件：</p><pre><code class=\"language-python\">import qdrant_client\nfrom llama_index.vector_stores.qdrant import QdrantVectorStore\n\nclient = qdrant_client.QdrantClient(qdrant_server, api_key=qdrant_api_key)\nvector_store = QdrantVectorStore(client=client, collection_name=\"NTSC\")</code></pre><p>这将在你的免费集群中创建一个名为 <code>NTSC</code> 的集合。</p><p>你可以阅读 <a href=\"https://qdrant.tech/documentation/?utm_source=jinaai&utm_medium=partner&utm_campaign=qdrant-jinaai-rag-blog\" rel=\"noreferrer\"><u>Qdrant 文档</u></a>，了解如何在内存中或磁盘上构建本地数据存储，以及如何通过 web API 在 docker 容器中托管自己的 Qdrant 服务器实例。</p><h3 id=\"complete-the-rag-system\"><strong>完成 RAG 系统</strong></h3><p>现在我们将使用 LlamaIndex 的样板代码将这些组件组装成一个完整的 RAG 系统：</p><pre><code class=\"language-python\">from llama_index.core.query_engine import RetrieverQueryEngine\nfrom llama_index.core.retrievers import VectorIndexRetriever\nfrom llama_index.core.storage.storage_context import StorageContext\nfrom llama_index.core import (\n\t\tVectorStoreIndex,\n\t\tServiceContext,\n\t\tget_response_synthesizer,\n)\n\n# set up the service and storage contexts\nservice_context = ServiceContext.from_defaults(\n&nbsp;&nbsp;&nbsp;&nbsp;llm=mixtral_llm, embed_model=jina_embedding_model\n)\nstorage_context = StorageContext.from_defaults(vector_store=vector_store)\n\n# create an index\nindex = VectorStoreIndex.from_documents(\n&nbsp;&nbsp;&nbsp;&nbsp;rag_docs, storage_context=storage_context, service_context=service_context\n)\n\n# configure retriever\nretriever = VectorIndexRetriever(\n&nbsp;&nbsp;&nbsp;&nbsp;index=index,\n&nbsp;&nbsp;&nbsp;&nbsp;similarity_top_k=2,\n)\n\n# configure response synthesizer\nresponse_synthesizer = get_response_synthesizer(\n&nbsp;&nbsp;&nbsp;&nbsp;service_context=service_context,\n&nbsp;&nbsp;&nbsp;&nbsp;text_qa_template=qa_prompt,\n&nbsp;&nbsp;&nbsp;&nbsp;response_mode=\"compact\",\n)\n\n# assemble query engine\nquery_engine = RetrieverQueryEngine(\n&nbsp;&nbsp;&nbsp;&nbsp;retriever=retriever,\n&nbsp;&nbsp;&nbsp;&nbsp;response_synthesizer=response_synthesizer,\n)\n</code></pre><p>该系统将使用 Jina Embeddings 对文本源中的段落进行索引，并将两个最佳匹配放入每个提示的上下文中。例如，要更改为三个最佳匹配，只需修改上面 <code>VectorIndexRetriever</code> 初始化中的 <code>similarity_top_k</code> 参数：</p><pre><code class=\"language-python\"># configure retriever\nretriever = VectorIndexRetriever(\n&nbsp;&nbsp;&nbsp;&nbsp;index=index,\n&nbsp;&nbsp;&nbsp;&nbsp;similarity_top_k=3,\n)</code></pre><p>现在系统已经准备就绪。</p><h3 id=\"query-a-document\"><strong>查询文档</strong></h3><p>让我们尝试一个直接的查询：</p><pre><code class=\"language-python\">response = query_engine.query(\"\"\"\nWhat is the Biden Administration's policy with regard to AI?&nbsp;\n\"\"\")\nprint(response.response)</code></pre><p>结果（你的可能不完全相同）：</p><pre><code class=\"language-text\">The Biden Administration prioritizes responsible AI systems that&nbsp;\nare ethical, trustworthy, and safe, and serve the public good. \nThe Administration has committed to substantial funding for AI \nR&amp;D, and has established the National AI Initiative Office to \ncoordinate AI activities across the federal government.&nbsp;\n\nThe Administration's AI policy focuses on developing evaluative\ntechniques for AI, workforce development, public-private\npartnerships, and international collaboration in AI research.</code></pre><p>或者更具体一点：</p><pre><code class=\"language-python\">response = query_engine.query(\"\"\"\nWhat protections does the AI Bill of Rights propose to offer?\n\"\"\")\n\nprint(response.response)</code></pre><pre><code class=\"language-text\">The AI Bill of Rights proposes five core protections: Safe and&nbsp;\nEffective Systems; Algorithmic Discrimination Protections; Data&nbsp;\nPrivacy; Notice and Explanation; and Human Alternatives,&nbsp;\nConsideration, and Fallback.</code></pre><p>甚至可以非常具体：</p><pre><code class=\"language-python\">response = query_engine.query(\"Who is Kei Koizumi?\")\nprint(response.response)</code></pre><pre><code class=\"language-text\">Kei Koizumi is the Principal Deputy Director for Policy at the Office&nbsp;\nof Science and Technology Policy (OSTP).</code></pre><p>你也可以问一些富有想象力的问题：</p><pre><code class=\"language-python\">response = query_engine.query(\"\"\"\nWhat rights will AI's receive under President Biden's proposed&nbsp;\nAI Bill of Rights?\n\"\"\")\nprint(response.response)</code></pre><pre><code class=\"language-text\">The proposed AI Bill of Rights does not grant rights to AI systems, but&nbsp;\nrather outlines principles to ensure that AI technologies are&nbsp;\ndeveloped and used in a manner that respects human rights and values.&nbsp;\nThe principles include safety, transparency, fairness, disclosure,&nbsp;\ndata privacy, non-discrimination, and the ability for individuals to&nbsp;\nopt out of certain AI systems.</code></pre><pre><code class=\"language-python\">response = query_engine.query(\"\"\"\nWhy is President Biden's proposing an AI Bill of Rights?\nDoes AI really need rights?\n\"\"\")\nprint(response.response)</code></pre><pre><code class=\"language-text\">President Biden's proposed AI Bill of Rights aims to ensure that AI&nbsp;\ntechnologies are developed and used ethically, legally, and with&nbsp;\nsocietal considerations in mind. The Bill of Rights is not granting&nbsp;\n\"rights\" to AI, but rather setting guidelines for the responsible&nbsp;\ndevelopment and deployment of AI systems to protect individuals and&nbsp;\ncommunities from potential negative impacts.</code></pre><pre><code class=\"language-python\">response = query_engine.query(\"\"\"\nHas Donald Trump weighed in on AI?\nWill he Make Humans Great Again?\n\"\"\")\nprint(response.response)\n</code></pre><pre><code class=\"language-text\">No information. The context information does not mention Donald&nbsp;\nTrump's views on AI.</code></pre><h2 id=\"jina-ai-and-qdrant\"><strong>Jina AI 和 Qdrant</strong></h2><p>Jina Embeddings 的 8k token 上下文窗口使其特别适合检索增强生成，因为它可以处理更大的文本块。在其他 RAG 应用程序通常必须存储单个句子或句子对的情况下，在本教程中，我们可以使用整个段落而不用担心其大小。</p><p>这减少了需要存储的文本项目数量以携带相同的信息，降低了计算成本，节省了内存，并使检索更快。</p><p>Qdrant 的向量数据库配置简单、快速且经济实惠，正如你所看到的，只需几行 Python 代码就可以将其集成到 RAG 系统中。</p><p>要了解更多关于 Qdrant 的 AI 就绪数据库和云服务的信息，你可以<a href=\"https://qdrant.tech/?utm_source=jinaai&utm_medium=partner&utm_campaign=qdrant-jinaai-rag-blog\" rel=\"noreferrer\"><u>访问他们的网站</u></a>。</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://qdrant.tech/?utm_source=jinaai&utm_medium=partner&utm_campaign=qdrant-jinaai-rag-blog\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Qdrant - Vector Database</div><div class=\"kg-bookmark-description\">Qdrant is an Open-Source Vector Database and Vector Search Engine written in Rust. It provides fast and scalable vector similarity search service with convenient API.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://qdrant.tech/images/apple-touch-icon.png\" alt=\"\"><span class=\"kg-bookmark-author\">Vector Database</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://qdrant.tech/images/previews/social-preview-P.png\" alt=\"\"></div></a></figure><h2 id=\"get-in-touch\"><strong>联系我们</strong></h2><p>Jina AI 致力于为各种规模和类型的企业提供可靠、经济的 AI 技术。我们很乐意了解你的使用案例并帮助将 AI 融入你的业务流程。要了解更多关于 Jina AI 产品的信息并与我们联系，请访问 <a href=\"https://jina.ai/?ref=jina-ai-gmbh.ghost.io\"><u>Jina AI 网站</u></a>或加入我们的 <a href=\"https://discord.jina.ai/?ref=jina-ai-gmbh.ghost.io\"><u>Discord 社区</u></a>。</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://jina.ai/?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Jina AI - Best Embeddings and Perfect Prompts</div><div class=\"kg-bookmark-description\">Jina AI provides best-in-class embedding API and prompt optimizer, easing the development of multimodal AI applications.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jina.ai/icons/favicon-128x128.png\" alt=\"\"><span class=\"kg-bookmark-author\">Best Embeddings and Perfect Prompts</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jina.ai/banner.png\" alt=\"\"></div></a></figure><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://discord.com/invite/AWXCCC6G2P?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Join the Jina AI Discord Server!</div><div class=\"kg-bookmark-description\">Check out the Jina AI community on Discord - hang out with 4493 other members and enjoy free voice and text chat.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://discord.com/assets/images/favicon.ico\" alt=\"\"><span class=\"kg-bookmark-author\">Discord</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://cdn.discordapp.com/splashes/1106542220112302130/80f2c2128aefeb55209a5bdb2130bb92.jpg?size=512\" alt=\"\"></div></a></figure>",
  "comment_id": "65ddadd039a5b70001810ea3",
  "feature_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/02/Blog-images--26-.jpg",
  "featured": false,
  "visibility": "public",
  "created_at": "2024-02-27T10:39:28.000+01:00",
  "updated_at": "2024-03-06T15:41:18.000+01:00",
  "published_at": "2024-03-04T16:00:13.000+01:00",
  "custom_excerpt": "Create a RAG system with Jina Embeddings v2, Qdrant vector database, LlamaIndex, and Mistral LLM.",
  "codeinjection_head": null,
  "codeinjection_foot": null,
  "custom_template": null,
  "canonical_url": null,
  "authors": [
    {
      "id": "632ae7353e4e55003d52598e",
      "name": "Scott Martens",
      "slug": "scott",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/11/photo-of-me-cropped.jpg",
      "cover_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/11/shanshui-ernie-crop.png",
      "bio": "A rogue AI created by Canada's Weapon X program.\n\nContent Creator @ Jina AI",
      "website": "https://jina.ai",
      "location": "Berlin",
      "facebook": null,
      "twitter": null,
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/scott/"
    }
  ],
  "tags": [
    {
      "id": "634a1a8ccebfc1003d8ab706",
      "name": "Tech Blog",
      "slug": "tech-blog",
      "description": null,
      "feature_image": null,
      "visibility": "public",
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "canonical_url": null,
      "accent_color": null,
      "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
    }
  ],
  "primary_author": {
    "id": "632ae7353e4e55003d52598e",
    "name": "Scott Martens",
    "slug": "scott",
    "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/11/photo-of-me-cropped.jpg",
    "cover_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/11/shanshui-ernie-crop.png",
    "bio": "A rogue AI created by Canada's Weapon X program.\n\nContent Creator @ Jina AI",
    "website": "https://jina.ai",
    "location": "Berlin",
    "facebook": null,
    "twitter": null,
    "meta_title": null,
    "meta_description": null,
    "url": "https://jina-ai-gmbh.ghost.io/author/scott/"
  },
  "primary_tag": {
    "id": "634a1a8ccebfc1003d8ab706",
    "name": "Tech Blog",
    "slug": "tech-blog",
    "description": null,
    "feature_image": null,
    "visibility": "public",
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "canonical_url": null,
    "accent_color": null,
    "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
  },
  "url": "https://jina-ai-gmbh.ghost.io/podcast/build-a-rag-system-with-jina-embeddings-and-qdrant/",
  "excerpt": "使用 Jina Embeddings v2、Qdrant 向量数据库、LlamaIndex 和 Mistral LLM 构建 RAG 系统",
  "reading_time": 13,
  "access": true,
  "comments": false,
  "og_image": null,
  "og_title": null,
  "og_description": null,
  "twitter_image": null,
  "twitter_title": null,
  "twitter_description": null,
  "meta_title": null,
  "meta_description": null,
  "email_subject": null,
  "frontmatter": null,
  "feature_image_alt": "Promotional graphic with \"EMBEDDINGS 2\" and Drant logo separated by a red cross, symbolizing a partnership.",
  "feature_image_caption": null
}