{
  "slug": "implementing-a-chat-history-rag-with-jina-ai-and-milvus-lite",
  "id": "665d76034b4b4c0001ba1bb3",
  "uuid": "851bc948-281c-4fab-bc11-941c900b086b",
  "title": "使用 Jina AI 和 Milvus Lite 实现聊天历史 RAG",
  "html": "<p>开发人员和运维工程师非常重视那些容易设置、快速启动、且后续能在生产环境中高效扩展的基础设施。基于这个原因，我们的合作伙伴 <a href=\"https://milvus.io/?ref=jina-ai-gmbh.ghost.io\"><u>Milvus</u></a> 最新推出的轻量级向量数据库 <a href=\"https://milvus.io/docs/milvus_lite.md?ref=jina-ai-gmbh.ghost.io\"><u>Milvus Lite</u></a>，对 Python 开发者来说是一个重要工具，特别是当它与高质量且易用的搜索基础模型结合使用时，可以快速开发搜索应用。</p><p>在本文中，我们将通过一个示例来说明 Milvus Lite 如何集成 <a href=\"https://jina.ai/embeddings/?ref=jina-ai-gmbh.ghost.io\"><u>Jina Embeddings v2</u></a> 和 <a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><u>Jina Reranker v1</u></a>。这个示例是一个基于虚构公司内部公共频道聊天记录构建的 <a href=\"https://jina.ai/news/albus-by-springworks-empowering-employees-with-enterprise-search?ref=jina-ai-gmbh.ghost.io\"><u>检索增强生成（RAG）</u></a> 应用，让员工能够准确且有效地获得与组织相关问题的答案。</p><h2 id=\"overview-of-milvus-lite-jina-embeddings-and-jina-reranker\">Milvus Lite、Jina Embeddings 和 Jina Reranker 概述</h2><p>Milvus Lite 是领先的向量数据库 Milvus 的新版轻量级版本，现在也作为 Python 库提供。Milvus Lite 与部署在 Docker 或 Kubernetes 上的 Milvus 共享相同的 API，但可以通过一行 pip 命令轻松安装，无需设置服务器。</p><p>通过在 Milvus 的 Python SDK <a href=\"https://github.com/milvus-io/pymilvus?ref=jina-ai-gmbh.ghost.io\"><u>pymilvus</u></a> 中集成 Jina Embeddings v2 和 Jina Reranker v1，你现在可以使用相同的 Python 客户端直接嵌入文档，适用于 Milvus 的任何部署模式，包括 Milvus Lite。你可以在 pymilvus 的<a href=\"https://milvus.io/docs/integrate_with_jina.md?ref=jina-ai-gmbh.ghost.io\"> <u>文档页面</u></a>中找到 Jina Embeddings 和 Reranker 集成的详细信息。</p><p>凭借 8k-token 的上下文窗口和多语言能力，Jina Embeddings v2 可以编码文本的广泛语义并确保准确检索。通过在流程中添加 Jina Reranker v1，你可以通过将检索结果与查询直接进行交叉编码来进一步优化结果，实现更深层次的上下文理解。</p><h2 id=\"milvus-and-jina-ai-models-in-action\">Milvus 和 Jina AI 模型实战</h2><p>本教程将专注于一个实际用例：查询公司的 Slack 聊天历史记录，基于过往对话回答各种问题。</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/E-R-slack--2-.jpg\" class=\"kg-image\" alt=\"Flowchart detailing the Rust community's model training process, featuring steps from the &quot;Next training step?&quot; query through\" loading=\"lazy\" width=\"1600\" height=\"900\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/E-R-slack--2-.jpg 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2024/06/E-R-slack--2-.jpg 1000w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/E-R-slack--2-.jpg 1600w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">使用示例查询查询 Slack 数据的流程</span></figcaption></figure><p>例如，一名员工可以询问 AI 训练过程中的下一步，如上述流程图所示。通过使用 Jina Embeddings、Jina Reranker 和 Milvus，我们可以准确地识别记录的 Slack 消息中的相关信息。该应用程序可以通过便于访问过往通信中的有价值信息来提升工作效率。</p><p>为了生成答案，我们将通过 <a href=\"https://python.langchain.com/v0.1/docs/integrations/llms/huggingface_endpoint/?ref=jina-ai-gmbh.ghost.io\"><u>Langchain 中的 HuggingFace 集成</u></a>使用 <a href=\"https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1?ref=jina-ai-gmbh.ghost.io\"><u>Mixtral 7B Instruct</u></a>。要使用该模型，你需要一个 HuggingFace 访问令牌，可以按照<a href=\"https://huggingface.co/docs/hub/en/security-tokens?ref=jina-ai-gmbh.ghost.io\"><u>这里</u></a>的说明生成。</p><p>你可以在 <a href=\"https://colab.research.google.com/github/jina-ai/workshops/blob/main/notebooks/embeddings/milvus/milvus_lite_jina_integration.ipynb?ref=jina-ai-gmbh.ghost.io\"><u>Colab</u></a> 上跟随学习，或者<a href=\"https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/milvus/milvus_lite_jina_integration.ipynb?ref=jina-ai-gmbh.ghost.io\"><u>下载 notebook</u></a>。</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://colab.research.google.com/github/jina-ai/workshops/blob/main/notebooks/embeddings/milvus/milvus_lite_jina_integration.ipynb?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Google Colab</div><div class=\"kg-bookmark-description\"></div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://ssl.gstatic.com/colaboratory-static/common/0d8af74d4089ab8b6d127bd74854be98/img/favicon.ico\" alt=\"\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://colab.research.google.com/img/colab_favicon_256px.png\" alt=\"\"></div></a></figure><h3 id=\"about-the-dataset\">关于数据集</h3><p>本教程使用的数据集是由 GPT-4 生成的，旨在复制 Blueprint AI 的 Slack 频道聊天历史。Blueprint 是一家虚构的 AI 初创公司，正在开发自己的基础模型。你可以在<a href=\"https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/milvus/chat_history.json?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\"><u>这里</u></a>下载数据集。</p><p>数据按<em>频道</em>组织，每个频道代表相关 Slack 对话的集合。每个频道都有一个主题标签，包含十个主题选项之一：<em>模型分发</em>、<em>模型训练</em>、<em>模型微调</em>、<em>伦理和偏见缓解</em>、<em>用户反馈</em>、<em>销售</em>、<em>市场营销</em>、<em>模型入职</em>、<em>创意设计</em>和<em>产品管理</em>。其中一个参与者被称为\"专家用户\"。你可以使用这个字段来验证查询主题专家用户的结果，我们将在下面展示如何做到这一点。</p><p>每个频道还包含聊天历史记录，每个频道最多包含 100 条消息的对话线程。数据集中的每条消息都包含以下信息：</p><ul><li><strong>用户</strong>：发送消息的用户</li><li><strong>消息文本</strong>：用户发送的消息内容</li><li><strong>时间戳</strong>：消息发送时间</li><li><strong>文件名</strong>：用户可能附加到消息的文件名</li><li><strong>消息 ID</strong></li><li><strong>父消息 ID</strong>：如果消息是源自另一条消息的线程中的消息</li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/image-1.png\" class=\"kg-image\" alt=\"Diagram showing the structure of a messaging system, detailing the relationship between 'Channel' and 'Message' entities, wit\" loading=\"lazy\" width=\"780\" height=\"450\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/image-1.png 600w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/image-1.png 780w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">聊天数据结构的 UML 图。</span></figcaption></figure><h3 id=\"set-up-the-environment\">设置环境</h3><p>首先，安装所有必需的组件：</p><pre><code class=\"language-Python\">pip install -U pymilvus\npip install -U \"pymilvus[model]\"\npip install langchain\npip install langchain-community\n</code></pre><p>下载数据集：</p><pre><code class=\"language-Python\">import os\n\nif not os.path.exists(\"chat_history.json\"):\n    !wget https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/milvus/chat_history.json</code></pre><p>在环境变量中设置你的 Jina AI API Key。你可以在<a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><u>这里</u></a>生成一个。</p><pre><code class=\"language-Python\">import os\nimport getpass\n\nos.environ[\"JINAAI_API_KEY\"] = getpass.getpass(prompt=\"Jina AI API Key: \")</code></pre><p>对 Hugging Face Token 执行相同操作。你可以在<a href=\"https://huggingface.co/docs/hub/en/security-tokens?ref=jina-ai-gmbh.ghost.io\"><u>这里</u></a>找到如何生成它。确保将其设置为 <code>READ</code> 以访问 <a href=\"https://huggingface.co/docs/hub/en/index?ref=jina-ai-gmbh.ghost.io\"><u>Hugging Face Hub</u></a>。</p><pre><code class=\"language-Python\">os.environ[\"HUGGINGFACEHUB_API_TOKEN\"] = getpass.getpass(prompt=\"Hugging Face Token: \")</code></pre><h3 id=\"create-the-milvus-collection\">创建 Milvus Collection</h3><p>创建 Milvus Collection 以索引数据：</p><pre><code class=\"language-Python\">from pymilvus import MilvusClient, DataType\n\n# Specify a local file name as uri parameter of MilvusClient to use Milvus Lite\nclient = MilvusClient(\"milvus_jina.db\")\n\nschema = MilvusClient.create_schema(\n    auto_id=True,\n    enable_dynamic_field=True,\n)\n\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, description=\"The Primary Key\", is_primary=True)\nschema.add_field(field_name=\"embedding\", datatype=DataType.FLOAT_VECTOR, description=\"The Embedding Vector\", dim=768)\n\nindex_params = client.prepare_index_params()\nindex_params.add_index(field_name=\"embedding\", metric_type=\"COSINE\", index_type=\"AUTOINDEX\")\n\nclient.create_collection(collection_name=\"milvus_jina\", schema=schema, index_params=index_params)</code></pre><h3 id=\"prepare-the-data\">准备数据</h3><p>解析聊天历史并提取元数据：</p><pre><code class=\"language-Python\">import json\n\nwith open(\"chat_history.json\", \"r\", encoding=\"utf-8\") as file:\n    chat_data = json.load(file)\n\nmessages = []\nmetadatas = []\n\nfor channel in chat_data:\n  chat_history = channel[\"chat_history\"]\n  chat_topic = channel[\"topic\"]\n  chat_expert = channel[\"expert_user\"]\n  for message in chat_history:\n    text = f\"\"\"{message[\"user\"]}: {message[\"message\"]}\"\"\"\n    messages.append(text)\n    meta = {\n        \"time_stamp\": message[\"time_stamp\"],\n        \"file_name\": message[\"file_name\"],\n        \"parent_message_nr\": message[\"parent_message_nr\"],\n        \"channel\": chat_topic,\n        \"expert\": True if message[\"user\"] == chat_expert else False\n    }\n    metadatas.append(meta)\n</code></pre><h3 id=\"embed-the-chat-data\">嵌入聊天数据</h3><p>使用 Jina Embeddings v2 为每条消息创建嵌入向量，以检索相关的聊天信息：</p><pre><code class=\"language-Python\">from pymilvus.model.dense import JinaEmbeddingFunction\n\njina_ef = JinaEmbeddingFunction(\"jina-embeddings-v2-base-en\")\n\nembeddings = jina_ef.encode_documents(messages)</code></pre><h3 id=\"index-the-chat-data\">索引聊天数据</h3><p>为消息、嵌入向量和相关元数据建立索引：</p><pre><code class=\"language-Python\">collection_data = [{\n    \"message\": message,\n    \"embedding\": embedding,\n    \"metadata\": metadata\n} for message, embedding, metadata in zip(messages, embeddings, metadatas)]\n\ndata = client.insert(\n    collection_name=\"milvus_jina\",\n    data=collection_data\n)</code></pre><h3 id=\"query-the-chat-history\">查询聊天历史</h3><p>是时候提出一个问题了：</p><pre><code class=\"language-Python\">query = \"Who knows the most about encryption protocols in my team?\"</code></pre><p>现在对查询进行嵌入并检索相关消息。这里我们检索五条最相关的消息，并使用 Jina Reranker v1 对它们进行重新排序：</p><pre><code class=\"language-Python\">from pymilvus.model.reranker import JinaRerankFunction\n\nquery_vectors = jina_ef.encode_queries([query])\n\nresults = client.search(\n    collection_name=\"milvus_jina\",\n    data=query_vectors,\n    limit=5,\n)\n\nresults = results[0]\n\nids = [results[i][\"id\"] for i in range(len(results))]\n\nresults = client.get(\n    collection_name=\"milvus_jina\",\n    ids=ids,\n    output_fields=[\"id\", \"message\", \"metadata\"]\n)\n\njina_rf = JinaRerankFunction(\"jina-reranker-v1-base-en\")\n\ndocuments = [results[i][\"message\"] for i in range(len(results))]\nreranked_documents = jina_rf(query, documents)\n\nreranked_messages = []\nfor reranked_document in reranked_documents:\n  idx = reranked_document.index\n  reranked_messages.append(results[idx])</code></pre><p>最后，使用 Mixtral 7B Instruct 和重新排序后的消息作为上下文来生成对查询的回答：</p><pre><code class=\"language-Python\">from langchain.prompts import PromptTemplate\nfrom langchain_community.llms import HuggingFaceEndpoint\n\nllm = HuggingFaceEndpoint(repo_id=\"mistralai/Mixtral-8x7B-Instruct-v0.1\")\n\nprompt = \"\"\"&lt;s&gt;[INST] Context information is below.\\\\n\n        It includes the five most relevant messages to the query, sorted based on their relevance to the query.\\\\n\n        ---------------------\\\\n\n        {context_str}\\\\\\\\n\n        ---------------------\\\\n\n        Given the context information and not prior knowledge,\n        answer the query. Please be brief, concise, and complete.\\\\n\n        If the context information does not contain an answer to the query,\n        respond with \\\\\"No information\\\\\".\\\\n\n        Query: {query_str}[/INST] &lt;/s&gt;\"\"\"\n\nprompt = PromptTemplate(template=prompt, input_variables=[\"query_str\", \"context_str\"])\n\nllm_chain = prompt | llm\n\nanswer = llm_chain.invoke({\"query_str\":query, \"context_str\":reranked_messages})\n\nprint(f\"\\n\\nANSWER:\\n\\n{answer}\")</code></pre><p>我们的问题的答案是：</p><blockquote>\"根据上下文信息，User5 似乎是你团队中最了解加密协议的人。他们提到新协议显著提高了数据安全性，特别是对于云部署来说。\"</blockquote><p>如果你阅读 <code>chat_history.json</code> 中的消息，你可以自己验证 User5 是否是最专业的用户。</p><h2 id=\"summary\">总结</h2><p>我们已经看到了如何设置 Milvus Lite、使用 Jina Embeddings v2 嵌入聊天数据，以及使用 Jina Reranker v1 优化搜索结果，所有这些都在搜索 Slack 聊天历史的实际用例中展示。Milvus Lite 简化了基于 Python 的应用程序开发，无需复杂的服务器设置。它与 Jina Embeddings 和 Reranker 的集成旨在通过让您更容易访问工作场所中的有价值信息来提高生产力。</p><h2 id=\"use-jina-ai-models-and-milvus-now\"><strong>立即使用 Jina AI Models 和 Milvus</strong></h2><p>集成了 <a href=\"https://jina.ai/embeddings?ref=jina-ai-gmbh.ghost.io\">Jina Embeddings</a> 和 <a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\">Reranker</a> 的 <a href=\"https://milvus.io/docs/integrate_with_jina.md?ref=jina-ai-gmbh.ghost.io\">Milvus Lite</a> 为您提供了一个完整的处理流程，只需几行代码即可使用。</p><p>我们很想听听您的使用案例，并讨论 Jina AI Milvus 扩展如何满足您的业务需求。通过<a href=\"https://jina.ai/contact-sales?ref=jina-ai-gmbh.ghost.io\">我们的网站</a>或<a href=\"https://discord.jina.ai/?ref=jina-ai-gmbh.ghost.io\">我们的 Discord 频道</a>联系我们，分享您的反馈并及时了解我们的最新模型。关于 Milvus 和 Jina AI 集成的问题，欢迎加入 <a href=\"https://milvus.io/community?ref=jina-ai-gmbh.ghost.io\">Milvus 社区</a>。</p>",
  "comment_id": "665d76034b4b4c0001ba1bb3",
  "feature_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/06/Blog-images--39-.jpg",
  "featured": false,
  "visibility": "public",
  "created_at": "2024-06-03T09:51:31.000+02:00",
  "updated_at": "2024-07-08T21:08:43.000+02:00",
  "published_at": "2024-06-03T16:09:33.000+02:00",
  "custom_excerpt": "Enhance your search applications in Python with Jina Embeddings and Reranker and lightweight, easy-to-deploy Milvus Lite.\n",
  "codeinjection_head": null,
  "codeinjection_foot": null,
  "custom_template": null,
  "canonical_url": null,
  "authors": [
    {
      "id": "65e85e35b22368000152a4bf",
      "name": "Francesco Kruk",
      "slug": "francesco",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/03/Portrait-Picture_Low.jpg",
      "cover_image": null,
      "bio": null,
      "website": null,
      "location": null,
      "facebook": null,
      "twitter": null,
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/francesco/"
    },
    {
      "id": "641c23a2f4d50d003d590474",
      "name": "Saahil Ognawala",
      "slug": "saahil",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2023/03/profile-option-2.jpg",
      "cover_image": null,
      "bio": "Senior Product Manager at Jina AI",
      "website": "http://www.saahilognawala.com/",
      "location": "Munich, DE",
      "facebook": null,
      "twitter": "@saahil",
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/saahil/"
    }
  ],
  "tags": [
    {
      "id": "634a1a8ccebfc1003d8ab706",
      "name": "Tech Blog",
      "slug": "tech-blog",
      "description": null,
      "feature_image": null,
      "visibility": "public",
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "canonical_url": null,
      "accent_color": null,
      "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
    }
  ],
  "primary_author": {
    "id": "65e85e35b22368000152a4bf",
    "name": "Francesco Kruk",
    "slug": "francesco",
    "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/03/Portrait-Picture_Low.jpg",
    "cover_image": null,
    "bio": null,
    "website": null,
    "location": null,
    "facebook": null,
    "twitter": null,
    "meta_title": null,
    "meta_description": null,
    "url": "https://jina-ai-gmbh.ghost.io/author/francesco/"
  },
  "primary_tag": {
    "id": "634a1a8ccebfc1003d8ab706",
    "name": "Tech Blog",
    "slug": "tech-blog",
    "description": null,
    "feature_image": null,
    "visibility": "public",
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "canonical_url": null,
    "accent_color": null,
    "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
  },
  "url": "https://jina-ai-gmbh.ghost.io/podcast/implementing-a-chat-history-rag-with-jina-ai-and-milvus-lite/",
  "excerpt": "使用 Jina Embeddings、Reranker 以及轻量级、易于部署的 Milvus Lite，在 Python 中增强你的搜索应用。",
  "reading_time": 6,
  "access": true,
  "comments": false,
  "og_image": null,
  "og_title": null,
  "og_description": null,
  "twitter_image": null,
  "twitter_title": null,
  "twitter_description": null,
  "meta_title": null,
  "meta_description": null,
  "email_subject": null,
  "frontmatter": null,
  "feature_image_alt": "Black background with vivid geometric shapes on the sides and central logos \"Embeddings,\" \"Reranker,\" and \"Milvus.\"",
  "feature_image_caption": null
}