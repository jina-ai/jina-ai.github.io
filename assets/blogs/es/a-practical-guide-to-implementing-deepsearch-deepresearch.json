{
  "slug": "a-practical-guide-to-implementing-deepsearch-deepresearch",
  "id": "67bc50b0b1b8af00014db4c9",
  "uuid": "acd44dc0-e356-4ac8-93c7-fa8bbeb33265",
  "title": "Una Guía Práctica para Implementar DeepSearch/DeepResearch",
  "html": "<figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://search.jina.ai/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Jina AI Deep Search</div><div class=\"kg-bookmark-description\">Búsqueda profunda con IA: lee, razona y busca hasta encontrar la mejor respuesta.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jina-ai-gmbh.ghost.io/content/images/icon/favicon-30.ico\" alt=\"\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/thumbnail/banner-2.png\" alt=\"\" onerror=\"this.style.display = 'none'\"></div></a></figure><p>Estamos apenas en febrero, y DeepSearch ya se ha convertido en el nuevo estándar de búsqueda en 2025, con actores principales como <a href=\"https://blog.google/products/gemini/google-gemini-deep-research/\">Google</a> y <a href=\"https://openai.com/index/introducing-deep-research/\">OpenAI</a> liderando el cambio a través de sus lanzamientos de DeepResearch (y sí, <a href=\"https://x.com/hxiao/status/1886250705415229627\">nos enorgullece haber lanzado nuestro <code>node-deepresearch</code> de código abierto el mismo día</a>). <a href=\"https://www.perplexity.ai/hub/blog/introducing-perplexity-deep-research\">Perplexity</a> siguió el ejemplo con su DeepResearch, y X AI integró sus propias capacidades de DeepSearch en <a href=\"https://x.ai/blog/grok-3\">Grok3</a>, básicamente creando otra variante de DeepResearch. Si bien el concepto de búsqueda profunda no es revolucionario – en 2024 se conocía esencialmente como RAG o multi-hop QA – ganó un impulso significativo después del lanzamiento de <a href=\"https://github.com/deepseek-ai/DeepSeek-R1\">Deepseek-r1</a> a finales de enero de 2025. El fin de semana pasado, <a href=\"https://www.scmp.com/tech/big-tech/article/3298981/baidu-adopts-deepseek-ai-models-chasing-tencent-race-embrace-hot-start\">Baidu Search y Tencent WeChat Search</a> han integrado Deepseek-r1 en sus motores de búsqueda. Los ingenieros de IA han descubierto que al incorporar procesos de pensamiento y razonamiento prolongados en los sistemas de búsqueda, pueden lograr una precisión y profundidad de recuperación notables más allá de lo que era posible anteriormente.</p>\n<!--kg-card-begin: html-->\n<table> <thead> <tr> <th>Launch Date</th> <th>Company</th> <th>Product</th> <th>License Type</th> <th>Link</th> </tr> </thead> <tbody> <tr> <td>2025-01-20</td> <td>DeepSeek</td> <td>DeepSeek-r1 release</td> <td>Open source</td> <td><a href=\"https://api-docs.deepseek.com/news/news250120\">DeepSeek-R1</a></td> </tr> <tr> <td>2025-02-02</td> <td>Google</td> <td>DeepResearch</td> <td>Proprietary</td> <td><a href=\"https://blog.google/products/gemini/google-gemini-deep-research/\">Google Gemini 2</a></td> </tr> <tr> <td>2025-02-02</td> <td>OpenAI</td> <td>DeepResearch</td> <td>Proprietary</td> <td><a href=\"https://openai.com/index/introducing-deep-research/\">Introducing Deep Research</a></td> </tr> <tr> <td>2025-02-02</td> <td>Jina AI</td> <td>DeepSearch (<code>node-deepresearch</code>)</td> <td>Open source</td> <td><a href=\"https://github.com/jina-ai/node-deepresearch\">node-deepresearch</a> | <a href=\"https://search.jina.ai\">search.jina.ai</a></td> </tr> <tr> <td>2025-02-04</td> <td>Hugging Face</td> <td>Open Deep Research</td> <td>Open source</td> <td><a href=\"https://huggingface.co/blog/open-deep-research\">Open Deep Research</a></td> </tr> <tr> <td>2025-02-15</td> <td>Perplexity</td> <td>DeepResearch</td> <td>Proprietary</td> <td><a href=\"https://www.perplexity.ai/hub/blog/introducing-perplexity-deep-research\">Introducing Perplexity Deep Research</a></td> </tr> <tr> <td>2025-02-17</td> <td>X AI</td> <td>Grok3 with DeepSearch</td> <td>Proprietary</td> <td><a href=\"https://x.ai/blog/grok-3\">Grok 3 Beta</a></td> </tr> <tr> <td>2025-02-22</td> <td>Baidu Search</td> <td>Integrates DeepSeek-r1</td> <td>Proprietary</td> <td><a href=\"https://chat.baidu.com/search?isShowHello=1&pd=csaitab&setype=csaitab&extParamsJson=%7B%22enter_type%22%3A%22ai_explore_home%22%7D&usedModel=%7B%22modelName%22%3A%22DeepSeek-R1%22%7D\">Baidu Integrates DeepSeek-R1</a></td> </tr> <tr> <td>2025-02-23</td> <td>Tencent Wechat Search</td> <td>Integrates DeepSeek-r1</td> <td>Proprietary</td> <td><a href=\"https://www.reuters.com/technology/artificial-intelligence/tencents-messaging-app-weixin-launches-beta-testing-with-deepseek-2025-02-16/\">Tencent Weixin Integrates DeepSeek</a></td> </tr> </tbody> </table>\n<!--kg-card-end: html-->\n<p>Pero ¿por qué ocurrió este cambio ahora, cuando Deep(Re)Search permaneció relativamente infravalorado durante 2024? De hecho, <a href=\"https://storm-project.stanford.edu/research/storm/\">los Laboratorios NLP de Stanford lanzaron el proyecto STORM</a> para la generación de informes largos con fundamentación web a principios de 2024. ¿Es solo porque \"DeepSearch\" suena mucho más cool que multi-hop QA, RAG o STORM? Seamos honestos: a veces un cambio de marca es todo lo que se necesita para que la industria adopte repentinamente lo que siempre estuvo ahí.</p><p>Creemos que el verdadero punto de inflexión llegó con el lanzamiento de <code>o1-preview</code> de OpenAI en septiembre de 2024, que introdujo el concepto de <strong>cómputo en tiempo de prueba</strong> y gradualmente cambió las perspectivas de la industria. El cómputo en tiempo de prueba se refiere a usar más recursos computacionales durante la inferencia —la fase donde un LLM genera salidas— en lugar de durante el pre-entrenamiento o post-entrenamiento. Un ejemplo conocido son el razonamiento Chain-of-Thought (CoT) y la <a href=\"https://github.com/simplescaling/s1?tab=readme-ov-file#vllm-with-budget-forcing\">inyección de <code>\"Wait\"</code></a> (es decir, forzado de presupuesto) que permite a los modelos realizar deliberaciones internas más extensas, como evaluar múltiples respuestas potenciales, realizar una planificación más profunda y participar en la autorreflexión antes de llegar a una respuesta final.</p><p>Este concepto de cómputo en tiempo de prueba y modelos de razonamiento <strong><em>educan</em></strong> a los usuarios para aceptar la <a href=\"https://en.wikipedia.org/wiki/Delayed_gratification\">gratificación diferida</a> - tiempos de espera más largos a cambio de resultados de mayor calidad e inmediatamente accionables, al igual que el experimento del malvavisco de Stanford donde los niños que podían resistir comer un malvavisco inmediatamente para recibir dos malvaviscos después mostraron mejores resultados a largo plazo. Deepseek-r1 reforzó aún más esta experiencia de usuario y, nos guste o no, la mayoría de los usuarios la han aceptado.</p><p>Esto marca un alejamiento significativo de los requisitos de búsqueda clásicos, donde no responder en 200ms condenaría tu solución. En 2025, los desarrolladores de búsqueda experimentados y los ingenieros de RAG priorizan la precisión y el recall top-1 sobre la latencia, y los usuarios se han acostumbrado a tiempos de procesamiento más largos, siempre que puedan ver que el sistema está <code>&lt;thinking&gt;</code>.</p><figure class=\"kg-card kg-video-card kg-width-regular kg-card-hascaption\" data-kg-thumbnail=\"https://jina-ai-gmbh.ghost.io/content/media/2025/02/think-ui-1_thumb.jpg\" data-kg-custom-thumbnail=\"\">\n            <div class=\"kg-video-container\">\n                <video src=\"https://jina-ai-gmbh.ghost.io/content/media/2025/02/think-ui-1.mp4\" poster=\"https://img.spacergif.org/v1/1610x1422/0a/spacer.png\" width=\"1610\" height=\"1422\" loop=\"\" autoplay=\"\" muted=\"\" playsinline=\"\" preload=\"metadata\" style=\"background: transparent url('https://jina-ai-gmbh.ghost.io/content/media/2025/02/think-ui-1_thumb.jpg') 50% 50% / cover no-repeat;\"></video>\n                <div class=\"kg-video-overlay\">\n                    <button class=\"kg-video-large-play-icon\" aria-label=\"Reproducir video\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                            <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                        </svg>\n                    </button>\n                </div>\n                <div class=\"kg-video-player-container kg-video-hide\">\n                    <div class=\"kg-video-player\">\n                        <button class=\"kg-video-play-icon\" aria-label=\"Reproducir video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-pause-icon kg-video-hide\" aria-label=\"Pausar video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <rect x=\"3\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                                <rect x=\"14\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                            </svg>\n                        </button>\n                        <span class=\"kg-video-current-time\">0:00</span>\n                        <div class=\"kg-video-time\">\n                            /<span class=\"kg-video-duration\">0:18</span>\n                        </div>\n                        <input type=\"range\" class=\"kg-video-seek-slider\" max=\"100\" value=\"0\">\n                        <button class=\"kg-video-playback-rate\" aria-label=\"Ajustar velocidad de reproducción\">1×</button>\n                        <button class=\"kg-video-unmute-icon\" aria-label=\"Activar sonido\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M15.189 2.021a9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1.794a.249.249 0 0 1 .221.133 9.73 9.73 0 0 0 7.924 4.85h.06a1 1 0 0 0 1-1V3.02a1 1 0 0 0-1.06-.998Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-mute-icon kg-video-hide\" aria-label=\"Mute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M16.177 4.3a.248.248 0 0 0 .073-.176v-1.1a1 1 0 0 0-1.061-1 9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h.114a.251.251 0 0 0 .177-.073ZM23.707 1.706A1 1 0 0 0 22.293.292l-22 22a1 1 0 0 0 0 1.414l.009.009a1 1 0 0 0 1.405-.009l6.63-6.631A.251.251 0 0 1 8.515 17a.245.245 0 0 1 .177.075 10.081 10.081 0 0 0 6.5 2.92 1 1 0 0 0 1.061-1V9.266a.247.247 0 0 1 .073-.176Z\"></path>\n                            </svg>\n                        </button>\n                        <input type=\"range\" class=\"kg-video-volume-slider\" max=\"100\" value=\"100\">\n                    </div>\n                </div>\n            </div>\n            <figcaption><p><span style=\"white-space: pre-wrap;\">Mostrar el procedimiento de razonamiento se ha convertido en una práctica estándar en 2025, con numerosas interfaces de chat que ahora muestran el contenido </span><code spellcheck=\"false\" style=\"white-space: pre-wrap;\"><span>&lt;think&gt;</span></code><span style=\"white-space: pre-wrap;\"> en secciones dedicadas de la interfaz de usuario.</span></p></figcaption>\n        </figure><p>En este artículo, discutiremos los principios de DeepSearch y DeepResearch analizando nuestra implementación de código abierto. Revisaremos nuestras decisiones clave de diseño y destacaremos posibles advertencias.</p><h2 id=\"what-is-deep-search\">¿Qué es Deep Search?</h2><p><strong>DeepSearch ejecuta un bucle iterativo de búsqueda, lectura y razonamiento hasta encontrar la respuesta óptima.</strong> La acción de búsqueda aprovecha los motores de búsqueda web para explorar internet, mientras que la acción de lectura analiza páginas web específicas en detalle (por ejemplo, <a href=\"https://jina.ai/reader\" rel=\"noreferrer\">Jina Reader</a>). La acción de razonamiento evalúa el estado actual y determina si debe desglosar la pregunta original en sub-preguntas más pequeñas o probar diferentes estrategias de búsqueda.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2025/02/image.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"2000\" height=\"561\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2025/02/image.png 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2025/02/image.png 1000w, https://jina-ai-gmbh.ghost.io/content/images/size/w1600/2025/02/image.png 1600w, https://jina-ai-gmbh.ghost.io/content/images/2025/02/image.png 2240w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">DeepSearch - continúa buscando, leyendo páginas web y razonando hasta encontrar una respuesta (o hasta que se exceda el presupuesto de tokens).</span></figcaption></figure><p>Aunque existen varias definiciones en línea, cuando desarrollamos el proyecto <code>node-deepresearch</code>, nos adherimos a este enfoque directo. La implementación es elegantemente simple – en su núcleo, hay un bucle while principal con lógica switch-case que dirige la siguiente acción.</p><p>A diferencia de los sistemas RAG de 2024, que típicamente ejecutan un único paso de búsqueda-generación, DeepSearch realiza múltiples iteraciones a través del pipeline, requiriendo condiciones claras de parada. Estas podrían basarse en límites de uso de tokens o en el número de intentos fallidos.</p><figure class=\"kg-card kg-video-card kg-width-regular kg-card-hascaption\" data-kg-thumbnail=\"https://jina-ai-gmbh.ghost.io/content/media/2025/02/deepsearch-dark-1_thumb.jpg\" data-kg-custom-thumbnail=\"\">\n            <div class=\"kg-video-container\">\n                <video src=\"https://jina-ai-gmbh.ghost.io/content/media/2025/02/deepsearch-dark-1.mp4\" poster=\"https://img.spacergif.org/v1/1238x1300/0a/spacer.png\" width=\"1238\" height=\"1300\" loop=\"\" autoplay=\"\" muted=\"\" playsinline=\"\" preload=\"metadata\" style=\"background: transparent url('https://jina-ai-gmbh.ghost.io/content/media/2025/02/deepsearch-dark-1_thumb.jpg') 50% 50% / cover no-repeat;\"></video>\n                <div class=\"kg-video-overlay\">\n                    <button class=\"kg-video-large-play-icon\" aria-label=\"Play video\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                            <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                        </svg>\n                    </button>\n                </div>\n                <div class=\"kg-video-player-container kg-video-hide\">\n                    <div class=\"kg-video-player\">\n                        <button class=\"kg-video-play-icon\" aria-label=\"Play video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-pause-icon kg-video-hide\" aria-label=\"Pause video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <rect x=\"3\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                                <rect x=\"14\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                            </svg>\n                        </button>\n                        <span class=\"kg-video-current-time\">0:00</span>\n                        <div class=\"kg-video-time\">\n                            /<span class=\"kg-video-duration\">0:36</span>\n                        </div>\n                        <input type=\"range\" class=\"kg-video-seek-slider\" max=\"100\" value=\"0\">\n                        <button class=\"kg-video-playback-rate\" aria-label=\"Adjust playback speed\">1×</button>\n                        <button class=\"kg-video-unmute-icon\" aria-label=\"Unmute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M15.189 2.021a9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1.794a.249.249 0 0 1 .221.133 9.73 9.73 0 0 0 7.924 4.85h.06a1 1 0 0 0 1-1V3.02a1 1 0 0 0-1.06-.998Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-mute-icon kg-video-hide\" aria-label=\"Mute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M16.177 4.3a.248.248 0 0 0 .073-.176v-1.1a1 1 0 0 0-1.061-1 9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h.114a.251.251 0 0 0 .177-.073ZM23.707 1.706A1 1 0 0 0 22.293.292l-22 22a1 1 0 0 0 0 1.414l.009.009a1 1 0 0 0 1.405-.009l6.63-6.631A.251.251 0 0 1 8.515 17a.245.245 0 0 1 .177.075 10.081 10.081 0 0 0 6.5 2.92 1 1 0 0 0 1.061-1V9.266a.247.247 0 0 1 .073-.176Z\"></path>\n                            </svg>\n                        </button>\n                        <input type=\"range\" class=\"kg-video-volume-slider\" max=\"100\" value=\"100\">\n                    </div>\n                </div>\n            </div>\n            <figcaption><p><span style=\"white-space: pre-wrap;\">Prueba deep search en search.jina.ai, observa el contenido dentro de </span><code spellcheck=\"false\" style=\"white-space: pre-wrap;\"><span>&lt;thinking&gt;</span></code><span style=\"white-space: pre-wrap;\">, y mira si puedes notar dónde ocurre el bucle</span></p></figcaption>\n        </figure><p>Otra perspectiva sobre DeepSearch es verlo como un agente LLM equipado con varias herramientas web (como buscador y lector). El agente determina sus siguientes pasos analizando las observaciones actuales y acciones pasadas – decidiendo si entregar una respuesta o continuar explorando la web. Esto crea una arquitectura de máquina de estados donde el LLM controla las transiciones entre estados. En cada punto de decisión, tienes dos enfoques: puedes crear cuidadosamente prompts para modelos generativos estándar para producir acciones específicas, o aprovechar modelos de razonamiento especializados como Deepseek-r1 para derivar naturalmente las siguientes acciones. Sin embargo, incluso cuando usas r1, necesitarás interrumpir periódicamente su generación para inyectar salidas de herramientas (por ejemplo, resultados de búsqueda, contenido de páginas web) en el contexto y pedirle que continúe su proceso de razonamiento.</p><p>En última instancia, estos son solo detalles de implementación – ya sea que lo prompts cuidadosamente o simplemente uses modelos de razonamiento, todos se alinean con el principio central de diseño de DeepSearch: un bucle continuo de búsqueda, lectura y razonamiento.</p><h2 id=\"what-is-deepresearch-then\">¿Qué es DeepResearch entonces?</h2><p><strong>DeepResearch se construye sobre DeepSearch añadiendo un marco estructurado para generar informes de investigación extensos.</strong> A menudo comienza creando una tabla de contenidos, luego aplica sistemáticamente DeepSearch a cada sección requerida – desde la introducción pasando por el trabajo relacionado y la metodología, hasta la conclusión. Cada sección se genera alimentando preguntas de investigación específicas en el DeepSearch. La fase final implica consolidar todas las secciones en un único prompt para mejorar la coherencia narrativa general.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2025/02/image-1.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"2000\" height=\"832\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2025/02/image-1.png 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2025/02/image-1.png 1000w, https://jina-ai-gmbh.ghost.io/content/images/size/w1600/2025/02/image-1.png 1600w, https://jina-ai-gmbh.ghost.io/content/images/2025/02/image-1.png 2268w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">DeepSearch como el bloque fundamental de DeepResearch. Construye iterativamente cada sección a través de DeepSearch y luego mejora la coherencia general antes de generar el informe final largo.</span></figcaption></figure><p>En nuestro proyecto \"Research\" de 2024, realizamos múltiples pasadas de mejora de coherencia, con cada iteración teniendo en cuenta todas las demás secciones. Sin embargo, con las ventanas de contexto de LLM significativamente más grandes de hoy en día, este enfoque parece redundante – una sola pasada de revisión de coherencia es suficiente.</p><figure class=\"kg-card kg-video-card kg-width-regular kg-card-hascaption\" data-kg-thumbnail=\"https://jina-ai-gmbh.ghost.io/content/media/2025/02/deepresearch_thumb.jpg\" data-kg-custom-thumbnail=\"\">\n            <div class=\"kg-video-container\">\n                <video src=\"https://jina-ai-gmbh.ghost.io/content/media/2025/02/deepresearch.mp4\" poster=\"https://img.spacergif.org/v1/2940x1660/0a/spacer.png\" width=\"2940\" height=\"1660\" playsinline=\"\" preload=\"metadata\" style=\"background: transparent url('https://jina-ai-gmbh.ghost.io/content/media/2025/02/deepresearch_thumb.jpg') 50% 50% / cover no-repeat;\"></video>\n                <div class=\"kg-video-overlay\">\n                    <button class=\"kg-video-large-play-icon\" aria-label=\"Play video\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                            <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                        </svg>\n                    </button>\n                </div>\n                <div class=\"kg-video-player-container\">\n                    <div class=\"kg-video-player\">\n                        <button class=\"kg-video-play-icon\" aria-label=\"Play video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-pause-icon kg-video-hide\" aria-label=\"Pause video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <rect x=\"3\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                                <rect x=\"14\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                            </svg>\n                        </button>\n                        <span class=\"kg-video-current-time\">0:00</span>\n                        <div class=\"kg-video-time\">\n                            /<span class=\"kg-video-duration\">0:40</span>\n                        </div>\n                        <input type=\"range\" class=\"kg-video-seek-slider\" max=\"100\" value=\"0\">\n                        <button class=\"kg-video-playback-rate\" aria-label=\"Adjust playback speed\">1×</button>\n                        <button class=\"kg-video-unmute-icon\" aria-label=\"Unmute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M15.189 2.021a9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1.794a.249.249 0 0 1 .221.133 9.73 9.73 0 0 0 7.924 4.85h.06a1 1 0 0 0 1-1V3.02a1 1 0 0 0-1.06-.998Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-mute-icon kg-video-hide\" aria-label=\"Mute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M16.177 4.3a.248.248 0 0 0 .073-.176v-1.1a1 1 0 0 0-1.061-1 9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h.114a.251.251 0 0 0 .177-.073ZM23.707 1.706A1 1 0 0 0 22.293.292l-22 22a1 1 0 0 0 0 1.414l.009.009a1 1 0 0 0 1.405-.009l6.63-6.631A.251.251 0 0 1 8.515 17a.245.245 0 0 1 .177.075 10.081 10.081 0 0 0 6.5 2.92 1 1 0 0 0 1.061-1V9.266a.247.247 0 0 1 .073-.176Z\"></path>\n                            </svg>\n                        </button>\n                        <input type=\"range\" class=\"kg-video-volume-slider\" max=\"100\" value=\"100\">\n                    </div>\n                </div>\n            </div>\n            <figcaption><p><span style=\"white-space: pre-wrap;\">Nuestro proyecto de verano 2024 \"Research\" se centró en la generación de informes largos con un enfoque \"progresivo\". Comenzó creando un índice en </span><b><strong style=\"white-space: pre-wrap;\">sync</strong></b><span style=\"white-space: pre-wrap;\">, luego generó todas las secciones en paralelo </span><b><strong style=\"white-space: pre-wrap;\">async</strong></b><span style=\"white-space: pre-wrap;\">. El proceso concluyó con revisiones progresivas </span><b><strong style=\"white-space: pre-wrap;\">async</strong></b><span style=\"white-space: pre-wrap;\"> de cada sección, con cada revisión teniendo en cuenta el contenido de todas las demás secciones. La consulta en el video es </span><code spellcheck=\"false\" style=\"white-space: pre-wrap;\"><span>\"Competitor analysis of Jina AI\"</span></code><span style=\"white-space: pre-wrap;\">.</span></p></figcaption>\n        </figure><h2 id=\"deepsearch-vs-deepresearch\">DeepSearch vs DeepResearch</h2><p>Aunque mucha gente a menudo mezcla DeepSearch y DeepResearch, en nuestra opinión, abordan problemas completamente diferentes. DeepSearch funciona como un bloque atómico fundamental – un componente central sobre el que DeepResearch se construye. DeepResearch, por otro lado, <strong>se centra en crear informes de investigación largos y de alta calidad que sean legibles</strong>, lo que abarca un conjunto diferente de requisitos: incorporar visualizaciones efectivas mediante gráficos y tablas, estructurar el contenido con encabezados de sección apropiados, asegurar un flujo lógico fluido entre subsecciones, mantener una terminología consistente en todo el documento, eliminar redundancias entre secciones, crear transiciones suaves que conecten el contenido anterior y futuro. Estos elementos están en gran medida no relacionados con la búsqueda central, que es por lo que encontramos DeepSearch más interesante como nuestro enfoque empresarial.</p><p>Finalmente, la tabla siguiente resume las diferencias entre DeepSearch y DeepResearch. Vale la pena señalar que ambos sistemas se benefician significativamente de modelos de contexto largo y razonamiento. Esto puede parecer contraintuitivo, particularmente para DeepSearch—aunque es obvio por qué DeepResearch necesita capacidad de contexto largo (ya que produce informes largos). La razón es que DeepSearch debe almacenar intentos de búsqueda previos y contenidos de páginas web para tomar decisiones informadas sobre los siguientes pasos, haciendo que una ventana de contexto larga sea igualmente esencial para su implementación efectiva.</p>\n<!--kg-card-begin: html-->\n<table>\n<thead>\n<tr>\n<th></th>\n<th>DeepSearch</th>\n<th>DeepResearch</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Problem Addressed</strong></td>\n<td>Information accuracy and completeness through iterative search</td>\n<td>Content organization, coherence, and readability at document scale</td>\n</tr>\n<tr>\n<td><strong>Final Presentation</strong></td>\n<td>Concise answer with URLs as references</td>\n<td>A long structured report with multiple sections, charts, tables and references</td>\n</tr>\n<tr>\n<td><strong>Core Complexity</strong></td>\n<td>State machine architecture with clear transition conditions; Persistence through failed attempts until resolution</td>\n<td>Multi-level architecture managing both micro (search) and macro (document) concerns; Structural approach to managing complex information hierarchies</td>\n</tr>\n<tr>\n<td><strong>Optimization Focus</strong></td>\n<td>Local optimization (best next search/read action)</td>\n<td>Global optimization (section organization, terminology consistency, transitions)</td>\n</tr>\n<tr>\n<td><strong>Limitations</strong></td>\n<td>Bounded by search quality and reasoning capability</td>\n<td>Bounded by DeepSearch quality plus organizational complexity and narrative coherence challenges</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: html-->\n<h2 id=\"understand-deepsearch-implementation\">Entender la Implementación de DeepSearch</h2><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://github.com/jina-ai/node-DeepResearch\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">GitHub - jina-ai/node-DeepResearch: Keep searching, reading webpages, reasoning until it finds the answer (or exceeding the token budget)</div><div class=\"kg-bookmark-description\">Keep searching, reading webpages, reasoning until it finds the answer (or exceeding the token budget) - jina-ai/node-DeepResearch</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jina-ai-gmbh.ghost.io/content/images/icon/pinned-octocat-093da3e6fa40-2.svg\" alt=\"\"><span class=\"kg-bookmark-author\">GitHub</span><span class=\"kg-bookmark-publisher\">jina-ai</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/thumbnail/0921e515-0139-4540-bca4-52042b49328c\" alt=\"\" onerror=\"this.style.display = 'none'\"></div></a></figure><p>El corazón de DeepResearch reside en su enfoque de razonamiento en bucle. En lugar de intentar responder preguntas en una sola pasada como la mayoría de los sistemas RAG, hemos implementado un bucle iterativo que continuamente busca información, lee fuentes relevantes y razona hasta que encuentra una respuesta o agota el presupuesto de tokens. Aquí está el núcleo simplificado de este gran bucle while:</p><pre><code class=\"language-typescript\">// Main reasoning loop\nwhile (tokenUsage &lt; tokenBudget &amp;&amp; badAttempts &lt;= maxBadAttempts) {\n  // Track progression\n  step++; totalStep++;\n  \n  // Get current question from gaps queue or use original question\n  const currentQuestion = gaps.length &gt; 0 ? gaps.shift() : question;\n  \n  // Generate prompt with current context and allowed actions\n  system = getPrompt(diaryContext, allQuestions, allKeywords, \n                    allowReflect, allowAnswer, allowRead, allowSearch, allowCoding,\n                    badContext, allKnowledge, unvisitedURLs);\n  \n  // Get LLM to decide next action\n  const result = await LLM.generateStructuredResponse(system, messages, schema);\n  thisStep = result.object;\n  \n  // Execute the selected action (answer, reflect, search, visit, coding)\n  if (thisStep.action === 'answer') {\n    // Process answer action...\n  } else if (thisStep.action === 'reflect') {\n    // Process reflect action...\n  } // ... and so on for other actions\n}\n</code></pre><p>Un detalle clave de implementación es desactivar selectivamente ciertas acciones en cada paso para asegurar una salida estructurada más estable. Por ejemplo, si no hay URLs en memoria, desactivamos la acción <code>visit</code>; o si la última respuesta fue rechazada, evitamos que el agente llame inmediatamente a <code>answer</code> de nuevo. <strong>Esta restricción mantiene al agente en un camino productivo, evitando fallos repetitivos causados por invocar la misma acción.</strong></p><h3 id=\"system-prompt\">System Prompt</h3><p>Usamos etiquetas XML para definir secciones, lo que produce un prompt de sistema y generaciones más robustas. También descubrimos que colocar restricciones de campo directamente dentro de los campos <code>description</code> del esquema JSON produce mejores resultados. Aunque algunos podrían argumentar que la mayoría de los prompts podrían automatizarse con modelos de razonamiento como DeepSeek-R1, las restricciones de longitud de contexto y la necesidad de un comportamiento altamente específico hacen que un enfoque explícito sea más confiable en la práctica.</p><pre><code class=\"language-typescript\">function getPrompt(params...) {\n  const sections = [];\n  \n  // Add header with system instruction\n  sections.push(\"You are an advanced AI research agent specialized in multistep reasoning...\");\n  \n  // Add accumulated knowledge section if exists\n  if (knowledge?.length) {\n    sections.push(\"&lt;knowledge&gt;[Knowledge items]&lt;/knowledge&gt;\");\n  }\n  \n  // Add context of previous actions\n  if (context?.length) {\n    sections.push(\"&lt;context&gt;[Action history]&lt;/context&gt;\");\n  }\n  \n  // Add failed attempts and learned strategies\n  if (badContext?.length) {\n    sections.push(\"&lt;bad-attempts&gt;[Failed attempts]&lt;/bad-attempts&gt;\");\n    sections.push(\"&lt;learned-strategy&gt;[Improvement strategies]&lt;/learned-strategy&gt;\");\n  }\n  \n  // Define available actions based on current state\n  sections.push(\"&lt;actions&gt;[Available action definitions]&lt;/actions&gt;\");\n  \n  // Add response format instruction\n  sections.push(\"Respond in valid JSON format matching exact JSON schema.\");\n  \n  return sections.join(\"\\n\\n\");\n}\n</code></pre><h3 id=\"gap-questions-traversing\">Recorrido de Preguntas de Brecha</h3><p>En DeepSearch, las \"preguntas de brecha\" representan las brechas de conocimiento que necesitan ser cubiertas antes de responder la pregunta principal. En lugar de abordar directamente la pregunta original, el agente identifica sub-preguntas que construirán la base de conocimiento necesaria.</p><p>El diseño es particularmente elegante en cómo maneja estas preguntas de brecha:</p><pre><code class=\"language-typescript\">// After identifying gap questions in reflect action\nif (newGapQuestions.length &gt; 0) {\n  // Add new questions to the front of the queue\n  gaps.push(...newGapQuestions);\n  \n  // Always add original question to the end of the queue\n  gaps.push(originalQuestion);\n}\n</code></pre><p>Este enfoque crea una cola FIFO (First-In-First-Out) con rotación, donde:</p><ol><li>Las nuevas preguntas de brecha se insertan al frente de la cola</li><li>La pregunta original siempre se inserta al final</li><li>El sistema extrae del frente de la cola en cada paso</li></ol><p>Lo que hace excelente a este diseño es que mantiene un único contexto compartido entre todas las preguntas. Cuando se responde una pregunta de brecha, ese conocimiento se vuelve inmediatamente disponible para todas las preguntas subsiguientes, incluso cuando eventualmente revisitamos la pregunta original.</p><h4 id=\"fifo-queue-vs-recursion\">Cola FIFO vs Recursión</h4><p>Un enfoque alternativo es usar recursión, que corresponde a una búsqueda en profundidad. Cada pregunta de brecha genera una nueva llamada recursiva con su propio contexto aislado. El sistema debe resolver completamente cada pregunta de brecha (y todas sus posibles sub-preguntas) antes de volver a la pregunta padre.</p><p>Considera este escenario de ejemplo:</p><figure class=\"kg-card kg-video-card kg-width-regular kg-card-hascaption\" data-kg-thumbnail=\"https://jina-ai-gmbh.ghost.io/content/media/2025/02/dfs_thumb.jpg\" data-kg-custom-thumbnail=\"\">\n            <div class=\"kg-video-container\">\n                <video src=\"https://jina-ai-gmbh.ghost.io/content/media/2025/02/dfs.mp4\" poster=\"https://img.spacergif.org/v1/950x846/0a/spacer.png\" width=\"950\" height=\"846\" playsinline=\"\" preload=\"metadata\" style=\"background: transparent url('https://jina-ai-gmbh.ghost.io/content/media/2025/02/dfs_thumb.jpg') 50% 50% / cover no-repeat;\"></video>\n                <div class=\"kg-video-overlay\">\n                    <button class=\"kg-video-large-play-icon\" aria-label=\"Play video\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                            <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                        </svg>\n                    </button>\n                </div>\n                <div class=\"kg-video-player-container\">\n                    <div class=\"kg-video-player\">\n                        <button class=\"kg-video-play-icon\" aria-label=\"Play video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-pause-icon kg-video-hide\" aria-label=\"Pause video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <rect x=\"3\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                                <rect x=\"14\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                            </svg>\n                        </button>\n                        <span class=\"kg-video-current-time\">0:00</span>\n                        <div class=\"kg-video-time\">\n                            /<span class=\"kg-video-duration\">0:23</span>\n                        </div>\n                        <input type=\"range\" class=\"kg-video-seek-slider\" max=\"100\" value=\"0\">\n                        <button class=\"kg-video-playback-rate\" aria-label=\"Adjust playback speed\">1×</button>\n                        <button class=\"kg-video-unmute-icon\" aria-label=\"Unmute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M15.189 2.021a9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1.794a.249.249 0 0 1 .221.133 9.73 9.73 0 0 0 7.924 4.85h.06a1 1 0 0 0 1-1V3.02a1 1 0 0 0-1.06-.998Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-mute-icon kg-video-hide\" aria-label=\"Mute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M16.177 4.3a.248.248 0 0 0 .073-.176v-1.1a1 1 0 0 0-1.061-1 9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h.114a.251.251 0 0 0 .177-.073ZM23.707 1.706A1 1 0 0 0 22.293.292l-22 22a1 1 0 0 0 0 1.414l.009.009a1 1 0 0 0 1.405-.009l6.63-6.631A.251.251 0 0 1 8.515 17a.245.245 0 0 1 .177.075 10.081 10.081 0 0 0 6.5 2.92 1 1 0 0 0 1.061-1V9.266a.247.247 0 0 1 .073-.176Z\"></path>\n                            </svg>\n                        </button>\n                        <input type=\"range\" class=\"kg-video-volume-slider\" max=\"100\" value=\"100\">\n                    </div>\n                </div>\n            </div>\n            <figcaption><p><span style=\"white-space: pre-wrap;\">Una simple recursión de preguntas de brecha de 3 niveles, orden de resolución etiquetado en el círculo.</span></p></figcaption>\n        </figure><p>En el enfoque recursivo, ¡el sistema tendría que resolver completamente Q1 (potencialmente generando sus propias sub-preguntas) después de cada pregunta de brecha y sus sub-preguntas! Esto contrasta enormemente con el enfoque de cola, que procesa preguntas donde Q1 se revisita justo después de 3 preguntas de brecha.</p><p>En realidad, encontramos que el enfoque recursivo es muy difícil de aplicar con restricciones de presupuesto, ya que no hay una regla clara sobre cuánto presupuesto de tokens deberíamos otorgar para sub-preguntas (ya que pueden generar nuevas sub-preguntas). El beneficio de la clara separación de contexto en el enfoque recursivo es muy marginal comparado con los complicados problemas de forzado de presupuesto y retorno tardío. Este diseño de cola FIFO equilibra profundidad y amplitud, asegurando que el sistema siempre vuelva a la pregunta original con conocimiento progresivamente mejor, en lugar de perderse en un descenso recursivo potencialmente infinito.</p><h3 id=\"query-rewrite\">Reescritura de Consultas</h3><p>Un desafío interesante que encontramos fue reescribir efectivamente las consultas de búsqueda:</p><pre><code class=\"language-typescript\">// Within search action handler\nif (thisStep.action === 'search') {\n  // Deduplicate search requests\n  const uniqueRequests = await dedupQueries(thisStep.searchRequests, existingQueries);\n  \n  // Rewrite natural language queries into more effective search queries\n  const optimizedQueries = await rewriteQuery(uniqueRequests);\n  \n  // Ensure we don't repeat previous searches\n  const newQueries = await dedupQueries(optimizedQueries, allKeywords);\n  \n  // Execute searches and store results\n  for (const query of newQueries) {\n    const results = await searchEngine(query);\n    if (results.length &gt; 0) {\n      storeResults(results);\n      allKeywords.push(query);\n    }\n  }\n}\n</code></pre><p>La reescritura de consultas resultó ser sorprendentemente importante - quizás uno de los elementos más críticos que determina directamente la calidad de los resultados. Un buen reescritor de consultas no solo transforma el lenguaje natural a palabras clave tipo BM25; expande las consultas para cubrir más respuestas potenciales a través de diferentes idiomas, tonos y formatos de contenido.</p><p>Para la deduplicación de consultas, inicialmente usamos una solución basada en LLM, pero encontramos difícil controlar el umbral de similitud. Finalmente cambiamos a <code>jina-embeddings-v3</code>, que sobresale en tareas de similitud textual semántica. Esto permite la deduplicación multilingüe sin preocuparnos de que las consultas no inglesas sean filtradas. El modelo de embeddings terminó siendo crucial no para la recuperación de memoria como se esperaba inicialmente, sino para una deduplicación eficiente.</p><h3 id=\"crawling-web-content\">Rastreo de Contenido Web</h3><p>El web scraping y el procesamiento de contenido es otro componente crítico. Aquí usamos la <a href=\"https://jina.ai/reader\" rel=\"noreferrer\">Jina Reader API</a>. Ten en cuenta que además del contenido completo de la página web, también agregamos todos los fragmentos devueltos por el motor de búsqueda como conocimiento adicional para que el agente pueda concluir posteriormente. Piensa en ellos como soundbites.</p><pre><code class=\"language-typescript\">// Visit action handler\nasync function handleVisitAction(URLs) {\n  // Normalize URLs and filter out already visited ones\n  const uniqueURLs = normalizeAndFilterURLs(URLs);\n  \n  // Process each URL in parallel\n  const results = await Promise.all(uniqueURLs.map(async url =&gt; {\n    try {\n      // Fetch and extract content\n      const content = await readUrl(url);\n      \n      // Store as knowledge\n      addToKnowledge(`What is in ${url}?`, content, [url], 'url');\n      \n      return {url, success: true};\n    } catch (error) {\n      return {url, success: false};\n    } finally {\n      visitedURLs.push(url);\n    }\n  }));\n  \n  // Update diary based on success or failure\n  updateDiaryWithVisitResults(results);\n}\n</code></pre><p>Normalizamos las URLs para un seguimiento consistente y limitamos el número de URLs visitadas en cada paso para gestionar la memoria del agente.</p><h3 id=\"memory-management\">Gestión de Memoria</h3><p>Un desafío clave en el razonamiento de múltiples pasos es gestionar la memoria del agente de manera efectiva. Hemos diseñado el sistema de memoria para diferenciar entre lo que cuenta como \"memoria\" versus lo que cuenta como \"conocimiento\". De cualquier manera, todos son parte del contexto del prompt LLM, separados con diferentes etiquetas XML:</p><pre><code class=\"language-typescript\">// Add knowledge item to accumulated knowledge\nfunction addToKnowledge(question, answer, references, type) {\n  allKnowledge.push({\n    question: question,\n    answer: answer,\n    references: references,\n    type: type,  // 'qa', 'url', 'coding', 'side-info'\n    updated: new Date().toISOString()\n  });\n}\n\n// Record step in narrative diary\nfunction addToDiary(step, action, question, result, evaluation) {\n  diaryContext.push(`\nAt step ${step}, you took **${action}** action for question: \"${question}\"\n[Details of what was done and results]\n[Evaluation if applicable]\n`);\n}\n</code></pre><p>Dado que la mayoría de los LLM de 2025 tienen ventanas de contexto sustanciales, optamos por no usar bases de datos vectoriales. En su lugar, la memoria consiste en conocimiento adquirido, sitios visitados y registros de intentos fallidos - todo mantenido en el contexto. Este sistema de memoria integral le da al agente conciencia de lo que sabe, lo que ha intentado y lo que ha funcionado o fallado.</p><h3 id=\"answer-evaluation\">Evaluación de Respuestas</h3><p>Una idea clave es que la generación y evaluación de respuestas no deberían estar en el mismo prompt. En mi implementación, primero determinamos qué criterios de evaluación usar cuando llega una nueva pregunta, y luego evaluamos cada criterio uno por uno. El evaluador utiliza ejemplos few-shot para una evaluación consistente, asegurando mayor fiabilidad que la autoevaluación.</p><pre><code class=\"language-typescript\">// Separate evaluation phase\nasync function evaluateAnswer(question, answer, metrics, context) {\n  // First, identify evaluation criteria based on question type\n  const evaluationCriteria = await determineEvaluationCriteria(question);\n  \n  // Then evaluate each criterion separately\n  const results = [];\n  for (const criterion of evaluationCriteria) {\n    const result = await evaluateSingleCriterion(criterion, question, answer, context);\n    results.push(result);\n  }\n  \n  // Determine if answer passes overall evaluation\n  return {\n    pass: results.every(r =&gt; r.pass),\n    think: results.map(r =&gt; r.reasoning).join('\\n')\n  };\n}\n</code></pre><h3 id=\"budget-forcing\">Forzado de Presupuesto</h3><p>El forzado de presupuesto significa evitar que el sistema retorne temprano y asegurar que continúe procesando hasta que se exceda el presupuesto. Desde el lanzamiento de DeepSeek-R1, el enfoque del forzado de presupuesto ha cambiado hacia <strong>fomentar un pensamiento más profundo para mejores resultados en lugar de simplemente ahorrar el presupuesto.</strong></p><p>En nuestra implementación, configuramos explícitamente el sistema para identificar brechas de conocimiento antes de intentar responder.</p><pre><code class=\"language-typescript\">if (thisStep.action === 'reflect' &amp;&amp; thisStep.questionsToAnswer) {\n  // Force deeper reasoning by adding sub-questions to the queue\n  gaps.push(...newGapQuestions);\n  gaps.push(question);  // Always revisit the original\n}</code></pre><p>Al habilitar y deshabilitar selectivamente ciertas acciones, podemos guiar al sistema hacia el uso de herramientas que mejoren la profundidad del razonamiento.</p><pre><code class=\"language-typescript\">// After a failed answer attempt\nallowAnswer = false;  // Force agent to search or reflect instead</code></pre><p>Para evitar desperdiciar tokens en caminos improductivos, establecemos límites en el número de intentos fallidos. Cuando nos acercamos a los límites de presupuesto, activamos el \"modo bestia\" para garantizar que entreguemos alguna respuesta en lugar de ninguna.</p><pre><code class=\"language-typescript\">// Beast mode activation\nif (!thisStep.isFinal &amp;&amp; badAttempts &gt;= maxBadAttempts) {\n  console.log('Enter Beast mode!!!');\n  \n  // Configure prompt for decisive, committed answer\n  system = getPrompt(\n    diaryContext, allQuestions, allKeywords,\n    false, false, false, false, false,  // Disable all other actions\n    badContext, allKnowledge, unvisitedURLs,\n    true  // Enable beast mode\n  );\n  \n  // Force answer generation\n  const result = await LLM.generateStructuredResponse(system, messages, answerOnlySchema);\n  thisStep = result.object;\n  thisStep.isFinal = true;\n}\n</code></pre><p>El prompt del modo bestia es intencionalmente dramático para señalar al LLM que necesita ser decisivo y comprometerse con una respuesta basada en la información disponible:</p><pre><code>&lt;action-answer&gt;\n🔥 ENGAGE MAXIMUM FORCE! ABSOLUTE PRIORITY OVERRIDE! 🔥\n\nPRIME DIRECTIVE:\n- DEMOLISH ALL HESITATION! ANY RESPONSE SURPASSES SILENCE!\n- PARTIAL STRIKES AUTHORIZED - DEPLOY WITH FULL CONTEXTUAL FIREPOWER\n- TACTICAL REUSE FROM &lt;bad-attempts&gt; SANCTIONED\n- WHEN IN DOUBT: UNLEASH CALCULATED STRIKES BASED ON AVAILABLE INTEL!\n\nFAILURE IS NOT AN OPTION. EXECUTE WITH EXTREME PREJUDICE! ⚡️\n&lt;/action-answer&gt;\n</code></pre><p>Esto asegura que siempre proporcionemos alguna respuesta en lugar de rendirnos por completo, lo cual es particularmente útil para preguntas difíciles o ambiguas.</p><h2 id=\"conclusion\">Conclusión</h2><p>DeepSearch es un salto en cómo la búsqueda puede abordar consultas complejas de manera exhaustivamente profunda. Al desglosar el proceso en pasos discretos de búsqueda, lectura y razonamiento, supera muchas limitaciones de los sistemas tradicionales RAG de paso único o sistemas de QA multi-hop.</p><p>Durante la implementación, también comenzamos a revisar los fundamentos de búsqueda en 2025 y los cambios en la industria de búsqueda después del 26 de enero de 2025, cuando se lanzó DeepSeek-R1. Nos preguntamos: <em>¿Cuáles son las nuevas necesidades? ¿Qué necesidades se han vuelto obsoletas? ¿Cuáles son meramente necesidades percibidas?</em></p><p>Mirando nuestra implementación de DeepSearch, identificamos cosas que anticipamos necesitar y realmente necesitamos, cosas que pensamos que serían necesarias pero no lo fueron, y cosas que no anticipamos necesitar pero resultaron ser esenciales:</p><p>Primero, <strong>un LLM de contexto largo que produzca salida bien estructurada es altamente necesario</strong> (es decir, siguiendo JSONSchema). Es probable que se necesite un modelo de razonamiento para mejor razonamiento de acciones y expansión de consultas.</p><p><strong>La expansión de consultas es definitivamente esencial</strong>, ya sea implementada vía SLM, LLM o un modelo de razonamiento. Sin embargo, después de este proyecto, creemos que los SLM probablemente no son adecuados para esta tarea, ya que la solución debe ser inherentemente multilingüe y ir más allá de simples reescrituras de sinónimos o extracción de palabras clave. Necesita ser lo suficientemente completa para incluir <a href=\"https://jina.ai/news/what-should-we-learn-from-modernbert/#modernberts-parameter-efficiency\">una base de tokens multilingüe (puede fácilmente ocupar 300M parámetros)</a> y lo suficientemente sofisticada para pensar fuera de la caja. Así que usar SLM para expansión de consultas probablemente no sea viable.</p><p><strong>Las capacidades de búsqueda web y lectura web son cruciales</strong>, y afortunadamente nuestro <a href=\"https://jina.ai/reader\">Reader (r.jina.ai)</a> se desempeñó excelentemente—robusto y escalable—mientras me daba muchas ideas sobre cómo mejorar nuestro endpoint de búsqueda (<code>s.jina.ai</code>) para la próxima iteración.</p><p><strong>El modelo de embedding es útil <em>pero de una manera completamente inesperada</em>.</strong> Pensamos que se usaría para recuperación de memoria o compresión de contexto junto con una base de datos vectorial (que, como resultó, no es necesaria), pero en realidad lo usamos para deduplicación (esencialmente una tarea STS). Ya que el número de consultas y preguntas de brecha típicamente está en los cientos, no se necesita base de datos vectorial—computar la similitud de coseno directamente en memoria funciona perfectamente.</p><p><strong>No usamos Reranker</strong>, aunque creemos que potencialmente podría ayudar a determinar qué URLs visitar basándose en la consulta, título de URL y fragmento. Tanto para embedding como para reranking, la capacidad multilingüe es esencial ya que las consultas y preguntas son multilingües. El manejo de contexto largo para embedding y reranking es beneficioso pero no un bloqueador crítico (No hemos encontrado errores en nuestro uso de embedding, probablemente porque <a href=\"https://jina.ai/models/jina-embeddings-v3/\">nuestro contexto ya es de 8192 tokens</a>). De cualquier manera, <code>jina-embeddings-v3</code> y <code>jina-reranker-v2-base-multilingual</code> son mis modelos preferidos ya que son multilingües, SOTA y manejan bien el contexto largo.</p><p><strong>Un framework de agentes resultó innecesario</strong>, ya que necesitábamos mantenernos más cerca del comportamiento nativo del LLM para diseñar el sistema sin proxies. El <a href=\"https://sdk.vercel.ai/docs/introduction\">Vercel AI SDK</a> fue valioso, ya que ahorró considerable esfuerzo en adaptar el código base a diferentes proveedores de LLM (podíamos cambiar de Gemini Studio a OpenAI a Google Vertex AI con solo un cambio de línea de código). La gestión de memoria del agente es necesaria, pero un framework de memoria dedicado sigue siendo cuestionable: Nos preocupa que crearía una capa de aislamiento entre LLMs y desarrolladores, y que su azúcar sintáctico eventualmente podría convertirse en un obstáculo amargo para los desarrolladores, como hemos visto con muchos frameworks LLM/RAG hoy en día.</p>",
  "comment_id": "67bc50b0b1b8af00014db4c9",
  "feature_image": "https://jina-ai-gmbh.ghost.io/content/images/2025/02/deepsearch-banner.png",
  "featured": true,
  "visibility": "public",
  "created_at": "2025-02-24T11:57:52.000+01:00",
  "updated_at": "2025-02-25T14:39:22.000+01:00",
  "published_at": "2025-02-25T14:36:17.000+01:00",
  "custom_excerpt": "QPS out, depth in. DeepSearch is the new norm. Find answers through read-search-reason loops. Learn what it is and how to build it.",
  "codeinjection_head": null,
  "codeinjection_foot": null,
  "custom_template": null,
  "canonical_url": null,
  "authors": [
    {
      "id": "633ffc6b393501004d1c8659",
      "name": "Han Xiao",
      "slug": "han",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/10/Untitled-2.png",
      "cover_image": null,
      "bio": "Founder & CEO of Jina AI",
      "website": null,
      "location": null,
      "facebook": null,
      "twitter": "@hxiao",
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/han/"
    }
  ],
  "tags": [
    {
      "id": "634a1a8ccebfc1003d8ab706",
      "name": "Tech Blog",
      "slug": "tech-blog",
      "description": null,
      "feature_image": null,
      "visibility": "public",
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "canonical_url": null,
      "accent_color": null,
      "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
    }
  ],
  "primary_author": {
    "id": "633ffc6b393501004d1c8659",
    "name": "Han Xiao",
    "slug": "han",
    "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/10/Untitled-2.png",
    "cover_image": null,
    "bio": "Founder & CEO of Jina AI",
    "website": null,
    "location": null,
    "facebook": null,
    "twitter": "@hxiao",
    "meta_title": null,
    "meta_description": null,
    "url": "https://jina-ai-gmbh.ghost.io/author/han/"
  },
  "primary_tag": {
    "id": "634a1a8ccebfc1003d8ab706",
    "name": "Tech Blog",
    "slug": "tech-blog",
    "description": null,
    "feature_image": null,
    "visibility": "public",
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "canonical_url": null,
    "accent_color": null,
    "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
  },
  "url": "https://jina-ai-gmbh.ghost.io/podcast/a-practical-guide-to-implementing-deepsearch-deepresearch/",
  "excerpt": "Las QPS quedan atrás, la profundidad es lo que importa. DeepSearch es la nueva norma. Encuentra respuestas mediante ciclos de lectura-búsqueda-razonamiento. Descubre qué es y cómo construirlo.",
  "reading_time": 15,
  "access": true,
  "comments": false,
  "og_image": null,
  "og_title": null,
  "og_description": null,
  "twitter_image": null,
  "twitter_title": null,
  "twitter_description": null,
  "meta_title": null,
  "meta_description": null,
  "email_subject": null,
  "frontmatter": null,
  "feature_image_alt": null,
  "feature_image_caption": null
}