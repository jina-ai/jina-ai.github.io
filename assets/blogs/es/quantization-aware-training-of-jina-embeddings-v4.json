{
  "slug": "quantization-aware-training-of-jina-embeddings-v4",
  "id": "685d4b76f1bef30001fc5449",
  "uuid": "6b06b483-2d13-4f1d-8d9d-147fa6dffe4b",
  "title": "Entrenamiento consciente de la cuantización de jina-embeddings-v4",
  "html": "<p>La cuantización es un método muy utilizado para abordar los problemas de escalamiento en la IA. El nombre hace que suene complicado, pero simplemente consiste en redondear los números para que ocupen menos espacio. Esto significa vectores de modelo (Embeddings) más pequeños que ocupan menos memoria y espacio de almacenamiento, y una recuperación de información más rápida porque se tarda menos tiempo en comparar vectores. La cuantización es una técnica puramente numérica que no se preocupa por el tipo de datos que procesa tu modelo ni por los casos de uso que tienes, por lo que puede aportar mejoras sin necesidad de muchos conocimientos especializados caros.</p><p>Uno podría esperar que la cuantización implique las típicas compensaciones y el cliché de que nada es gratis, donde debemos sacrificar algo de precisión. En este artículo, te mostraremos una forma de <strong>hacerla sin pérdidas</strong> mediante el <em>entrenamiento consciente de la cuantización</em> (QAT). Esta técnica se utiliza en <code>jina-embeddings-v4</code> para proporcionar modelos más pequeños que se necesitan en aplicaciones con limitaciones de espacio.</p><h2 id=\"overview-of-quantization-techniques\">Descripción general de las técnicas de cuantización</h2><p>La cuantización de modelos suele significar una de estas cuatro cosas:</p><ul><li>Cuantización posterior al entrenamiento (<strong>PTQ</strong>)</li><li>Entrenamiento para salidas de modelo cuantizadas (<strong>Output QAT</strong>)</li><li>Entrenamiento para modelos totalmente cuantizados (<strong>Full QAT</strong>)</li><li>Destilación de un nuevo modelo cuantizado a partir de uno no cuantizado existente</li></ul><p>La cuantización posterior al entrenamiento (<strong>PTQ</strong>) acepta el modelo de modelo entrenado tal cual y no lo modifica de ninguna manera. Se trata simplemente de descartar los dígitos menos significativos de los valores de coma flotante producidos por el modelo. Simplemente redondeamos los números y, a veces, los escalamos a un rango.</p><p><strong>Output QAT</strong> significa ajustar el modelo de modelo para producir vectores óptimos de precisión reducida. Esto significa modificar el modelo, pero no cambia la precisión de los pesos del modelo y, por lo tanto, no reduce su tamaño. Solo se reduce el tamaño del vector de salida.</p><p><strong>Full QAT</strong> comienza con un modelo de precisión completa totalmente entrenado y reduce la precisión de los pesos del modelo, luego ajusta el rendimiento de este modelo modificado. Esto produce un modelo significativamente más pequeño, así como modelos más pequeños, a costa de realizar algunos ajustes.</p><p>La <strong>destilación</strong> es el proceso de entrenar un nuevo modelo para que coincida con el rendimiento de uno existente. Esto significa crear un nuevo modelo que esté diseñado desde cero como cuantizado, y luego usar el modelo existente para generar tantos datos de entrenamiento como sea necesario para entrenarlo hasta que funcione lo más cerca posible del modelo existente.</p><p>Los beneficios de estos cuatro enfoques se resumen en la siguiente tabla:</p>\n<!--kg-card-begin: html-->\n<table>\n<thead>\n<tr>\n<th>Enfoque</th>\n<th>¿Modelos más compactos?</th>\n<th>¿Requiere entrenamiento?</th>\n<th>¿Compresión del modelo?</th>\n<th>¿Inferencia más rápida?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>PTQ</strong></td>\n<td><strong>✓</strong></td>\n<td>❌</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n<tr>\n<td><strong>Output QAT</strong></td>\n<td><strong>✓</strong></td>\n<td><strong>✓</strong></td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n<tr>\n<td><strong>Full QAT</strong></td>\n<td><strong>✓</strong></td>\n<td><strong>✓</strong></td>\n<td><strong>✓</strong></td>\n<td><strong>✓</strong></td>\n</tr>\n<tr>\n<td><strong>Destilación</strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><em>(a un modelo más pequeño)</em></td>\n<td><strong>✓</strong></td>\n<td><strong>✓</strong></td>\n<td><strong>✓</strong></td>\n<td><strong>✓</strong></td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: html-->\n<p>Los cuatro producen modelos más compactos, pero aparte de PTQ, todos requieren algún entrenamiento adicional, mientras que solo Full QAT y Distillation producen modelos nuevos y más rápidos. Full QAT y Distillation son mucho más caros de implementar porque requieren mucho más entrenamiento que Output QAT.</p><p>En este artículo, solo vamos a ver PTQ y Output QAT, que no cambian el tamaño ni la velocidad del modelo de modelo.</p><h2 id=\"experimental-setup\">Configuración experimental</h2><p>Para estos experimentos, nuestro modelo de referencia es <code>jina-embeddings-v4</code> con el adaptador de recuperación, que produce vectores de coma flotante (FP32) de precisión de 32 bits en 2048 dimensiones. Por lo tanto, cada modelo tiene un tamaño de 8196 bytes, u 8kB.</p><p>Estudiamos varias condiciones experimentales utilizando tareas de evaluación comparativa de recuperación de documentos de consulta del conjunto de <a href=\"https://huggingface.co/collections/zeta-alpha-ai/nanobeir-66e1a0af21dfd93e620cd9f6\">NanoBEIR benchmark</a>. El proceso de recuperación utiliza la similitud coseno entre vectores para encontrar y clasificar los documentos que mejor coinciden con las consultas.</p><ul><li><strong>Línea base</strong>: el rendimiento de los vectores de modelo <code>jina-embeddings-v4</code> sin ninguna cuantización. Todos estos experimentos utilizaron una versión beta del modelo, y el rendimiento de la versión es algo mejor.</li><li><strong>PTQ</strong>: cuantificamos los vectores de salida en vectores binarios sin cambiar el modelo.</li><li><strong>Output QAT</strong>: cuantificamos los vectores de salida y aplicamos un ajuste fino al adaptador de recuperación para mejorar su rendimiento en condiciones cuantificadas.</li></ul><h3 id=\"quantization-levels\">Niveles de cuantización</h3><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2025/06/image.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"816\" height=\"636\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2025/06/image.png 600w, https://jina-ai-gmbh.ghost.io/content/images/2025/06/image.png 816w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">Figura 1: Comparación de los tamaños de los modelos posteriores a la cuantización.</span></figcaption></figure><p>Experimentamos con cuatro niveles diferentes de cuantización.</p><ul><li><strong>Enteros de 8 bits</strong>: los valores FP32 se reducen a enteros en el rango de -128 a 127, lo que reduce los modelos 4 veces a <strong>2048 bytes</strong>.</li><li><strong>Enteros de 4 bits</strong>: igual que para los enteros de 4 bits, pero asignamos al rango de -8 a 7, lo que reduce el tamaño de los vectores en un factor de 8, a <strong>1024 bytes</strong>.</li><li><strong>Cuantización ternaria</strong>: todos los valores se asignan a uno de los tres valores: -1, 0, 1. Almacenado de forma óptima, esto reduce cada dimensión a 1,6 bits, lo que reduce el tamaño de los vectores de modelo aproximadamente 40 veces a aproximadamente <strong>230 bytes</strong>.</li><li><strong>Cuantización binaria</strong>: convertimos los valores escalares FP32 a un bit, utilizando el tipo de datos <code>torch.sign</code>, que proporciona solo dos valores, que tardan un bit en almacenarse. Esto reduce los vectores de modelo de 2048 dimensiones de 8192 bytes a <strong>128 bytes</strong>, una reducción de 64 veces.</li></ul><h3 id=\"scaling\">Escalado</h3><p>Para la cuantización binaria, la cuantización es muy simple: si un valor de vector es superior a 0 o positivo, se asigna a 1. De lo contrario, se asigna a -1.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2025/06/image-1.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"1159\" height=\"221\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2025/06/image-1.png 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2025/06/image-1.png 1000w, https://jina-ai-gmbh.ghost.io/content/images/2025/06/image-1.png 1159w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">Figura 2: Cuantización binaria. Todos los valores negativos se convierten en -1, todos los demás en 1.</span></figcaption></figure><p>Para los otros escenarios de cuantización, normalizamos los valores a un rango y luego redondeamos al valor más cercano permitido por el nivel de cuantización. Los vectores de modelo consisten en números de escala entre -∞ y +∞ (o, en la práctica, números positivos y negativos realmente grandes). Usamos dos números, $max$ y $min$, para escalar los valores para la cuantización.</p><p>Para la cuantización ternaria, tomamos cada componente de vector $v$ y lo traducimos de la siguiente manera:</p><ul><li>si $v$ ≥ $max$, $v$ se convierte en 1.</li><li>si $v$ ≤ $min$, $v$ se convierte en -1.</li><li>si $min$ &lt; $v$ &lt; $max$, $v$ se convierte en 0.</li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2025/06/image-2.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"1030\" height=\"220\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2025/06/image-2.png 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2025/06/image-2.png 1000w, https://jina-ai-gmbh.ghost.io/content/images/2025/06/image-2.png 1030w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">Figura 3: Cuantización ternaria. Se define un intervalo y los valores dentro de él se convierten en 0. Todos los valores más bajos se convierten en -1 y todos los más altos en 1.</span></figcaption></figure><p>Para enteros de 4 bits:</p><ul><li>si $v$ ≥ $max$, $v$ se convierte en 7.</li><li>si $v$ ≤ $min$, $v$ se convierte en -8.</li><li>si $min$ &lt; $v$ &lt; $max$, $v$ se convierte en $16*(v - min)/(max - min) - 8$, luego se redondea al entero más cercano. Esto escala el valor al rango $[-8,7]$.</li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2025/06/image-3.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"1023\" height=\"221\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2025/06/image-3.png 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2025/06/image-3.png 1000w, https://jina-ai-gmbh.ghost.io/content/images/2025/06/image-3.png 1023w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">Figura 4: Cuantización de 4 bits. Se define un intervalo y todos los valores se normalizan al rango definido [-8,7].</span></figcaption></figure><p></p><p>Para enteros de 8 bits:</p><ul><li>si $v$ ≥ $max$, $v$ se convierte en 127.</li><li>si $v$ ≤ $min$, $v$ se convierte en -128.</li><li>si $min$ &lt; $v$ &lt; $max$, $v$ se convierte en $256*(v - min)/(max - min) - 128$, redondeado al entero más cercano. Esto escala el valor al rango $[-128,127]$.</li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2025/06/image-4.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"1023\" height=\"219\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2025/06/image-4.png 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2025/06/image-4.png 1000w, https://jina-ai-gmbh.ghost.io/content/images/2025/06/image-4.png 1023w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">Figura 5: Cuantización de 8 bits. Se define un intervalo y todos los valores se normalizan al rango definido [-128,127].</span></figcaption></figure><p>Para calcular $max$ y $min$, utilizamos dos enfoques:</p><ul><li><strong>Mín./máx.</strong>: procesamos nuestros datos en lotes y, para cada lote, identificamos el componente vectorial más alto y más bajo, estableciendo $max$ en el más alto y $min$ en el más bajo.</li><li><strong>Promedio móvil en lotes</strong>: para cada lote, calculamos el promedio y la desviación estándar de los componentes del vector. Mantuvimos un promedio móvil tanto del promedio como de la desviación estándar a medida que procesábamos todos los lotes. Si $avg$ es el promedio móvil actual de los valores promedio del lote, y $std$ es el promedio móvil actual de las desviaciones estándar, entonces para cada lote:</li></ul><p>$max = avg + std$<br>$min = avg - std$</p><h3 id=\"qat-fine-tuning\">Ajuste fino de QAT</h3><p>Para los experimentos de PTQ, utilizamos el modelo tal cual y cuantificamos los modelos que produjo utilizando los métodos descritos anteriormente.</p><p>Para el Output QAT, ajustamos el modelo utilizando la <em>estimación directa</em>. Esto significa que invertimos el proceso de cuantización, restaurando la precisión completa de los valores, antes de calcular la pérdida (es decir, el error), y luego usamos esa métrica de pérdida para ajustar el modelo.</p><p>En cada caso, realizamos un ajuste fino durante 10.000 pasos, guardando un punto de control cada 500 pasos. Luego, conservamos el punto de control con la puntuación más alta en el <a href=\"https://huggingface.co/collections/zeta-alpha-ai/nanobeir-66e1a0af21dfd93e620cd9f6\">NanoBEIR</a> benchmark.</p><h3 id=\"asymmetric-quantization\">Cuantificación Asimétrica</h3><p>PTQ y Output QAT reducen el tamaño de los vectores de \"embeddings\" (vectores modelo), pero no reducen el tamaño del modelo ni la velocidad de inferencia; todo el ahorro se encuentra en el tamaño de los \"embeddings\" (vectores modelo) de documentos almacenados y la velocidad de recuperación.</p><p>Como resultado, probamos tanto la cuantificación de los vectores de consulta como el dejarlos sin cuantificar en el momento de la recuperación, ya que de cualquier manera no cambia el tamaño de los vectores de \"embeddings\" (vectores modelo) almacenados.</p><h2 id=\"results\">Resultados</h2><p>Probamos nueve condiciones en total, que se resumen en las tablas siguientes:</p>\n<!--kg-card-begin: html-->\n<table>\n<thead>\n<tr>\n<th>Nombre de la condición</th>\n<th>Ajuste Fino</th>\n<th>Nivel de Cuantificación</th>\n<th>Estrategia de Escala</th>\n<th>Consultas Cuantificadas</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Línea Base</td>\n<td>❌</td>\n<td>n/a</td>\n<td>n/a</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td>PTQ Ambos</td>\n<td>❌</td>\n<td>Binario</td>\n<td>n/a</td>\n<td><strong>✓</strong></td>\n</tr>\n<tr>\n<td>PTQ Docs Only</td>\n<td>❌</td>\n<td>Binario</td>\n<td>n/a</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>QAT Binario</td>\n<td><strong>✓</strong></td>\n<td>Binario</td>\n<td>n/a</td>\n<td><strong>✓</strong></td>\n</tr>\n<tr>\n<td>QAT Binario Docs Only</td>\n<td><strong>✓</strong></td>\n<td>Binario</td>\n<td>n/a</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>QAT Ternario</td>\n<td><strong>✓</strong></td>\n<td>Ternario</td>\n<td>Promedio Móvil</td>\n<td><strong>✓</strong></td>\n</tr>\n<tr>\n<td>QAT 4-bits</td>\n<td><strong>✓</strong></td>\n<td>4-bits</td>\n<td>Promedio Móvil</td>\n<td><strong>✓</strong></td>\n</tr>\n<tr>\n<td>QAT 8-bits</td>\n<td><strong>✓</strong></td>\n<td>8-bits</td>\n<td>Promedio Móvil</td>\n<td><strong>✓</strong></td>\n</tr>\n<tr>\n<td>QAT 8-bits Min/Max</td>\n<td><strong>✓</strong></td>\n<td>8-bits</td>\n<td>Min/Max</td>\n<td><strong>✓</strong></td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: html-->\n<p><em>Tabla 2: Condiciones Experimentales</em></p>\n<!--kg-card-begin: html-->\n<table>\n<thead>\n<tr>\n<th>Nombre de la condición</th>\n<th>Puntuación Promedio</th>\n<th>Diferencia con la línea base</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Línea Base</td>\n<td>60.10</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td>PTQ Binario</td>\n<td>58.33</td>\n<td>-1.78</td>\n</tr>\n<tr>\n<td>PTQ Binario Docs Only</td>\n<td>59.08</td>\n<td>-1.02</td>\n</tr>\n<tr>\n<td>QAT Binario</td>\n<td>59.22</td>\n<td>-0.89</td>\n</tr>\n<tr>\n<td>QAT Binario Docs Only</td>\n<td>60.81</td>\n<td>+0.70</td>\n</tr>\n<tr>\n<td>QAT Ternario</td>\n<td>59.49</td>\n<td>-0.62</td>\n</tr>\n<tr>\n<td>QAT 4-bits</td>\n<td>61.73</td>\n<td>+1.62</td>\n</tr>\n<tr>\n<td>QAT 8-bits</td>\n<td>61.67</td>\n<td>+1.56</td>\n</tr>\n<tr>\n<td>QAT 8-bits Min/Max</td>\n<td>61.29</td>\n<td>+1.19</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: html-->\n<p><em>Tabla 3: Puntuación promedio (en % correcto) para cada condición en los doce NanoBEIR benchmarks.</em></p><p>Como puede ver en la tabla anterior, el ajuste fino para la cuantificación mejora las puntuaciones. La única diferencia entre las condiciones <strong>PTQ Binario</strong> y <strong>QAT Binario</strong> es el ajuste fino, y la diferencia en la puntuación es significativa. Del mismo modo, vemos una mejora de casi el 2% en las puntuaciones entre las condiciones <strong>PTQ Binario Docs Only</strong> y <strong>QAT Binario Docs Only</strong>, que solo se distinguen por el mismo ajuste fino.</p><p>Como era de esperar, también vemos que las puntuaciones generalmente mejoran cuanto menos cuantificamos, con la cuantificación de 4 bits obteniendo mejores resultados que la ternaria, y la ternaria mejor que la binaria. Sin embargo, ir más allá a 8 bits no parece haber mejorado nada.</p><p>Solo probamos dejar las consultas sin cuantificar en los casos binarios, pero esto parece mejorar el rendimiento.</p><p>Finalmente, nuestras pruebas sugieren que el método de escala de promedio móvil supera al enfoque simplista de min/max.</p><h2 id=\"conclusion\">Conclusión</h2><p>La cuantificación tiene algunas ventajas operativas importantes para los modelos de \"embeddings\" (vectores modelo), al reducir significativamente el tamaño de los vectores de \"embeddings\" (vectores modelo) y acelerar la recuperación de información. Si bien la cuantificación simple posterior al entrenamiento (PTQ) proporciona beneficios inmediatos en términos de memoria y almacenamiento, nuestros experimentos demuestran que el entrenamiento con reconocimiento de cuantificación (QAT) mitiga significativamente las inevitables pérdidas de precisión. El ajuste fino produjo consistentemente mejores puntuaciones.</p><p>El grado de cuantificación impacta directamente en el rendimiento, que es lo que cabría esperar de un método basado en reducir la precisión de los valores. La cuantificación menos agresiva (por ejemplo, 4 bits) generalmente supera a los métodos más agresivos (por ejemplo, binario), pero sorprendentemente, no hubo una diferencia significativa en el rendimiento entre la cuantificación de 8 bits y la de 4 bits. Parece que hasta que no se alcanza un cierto umbral de imprecisión, hay poca diferencia entre una cuantificación mayor y menor.</p><p>Las estrategias de escala también son significativas, con el método de promedio móvil mostrando resultados superiores en comparación con un enfoque fijo de min/max. El uso de valores de escala que son relativos a los datos parece funcionar significativamente mejor y merece una mayor exploración.</p><p>La cuantificación puede obtener más de sus modelos de \"embeddings\" (vectores modelo) por menos. Aunque este artículo no explora todas las opciones de cuantificación, explora dos que son fácilmente accesibles y que tienen beneficios reales que ofrecer. Estamos trabajando para refinar y mejorar las estrategias de cuantificación para poder reducir aún más los costes de los usuarios, y esperamos lanzar soporte binario para <code>jina-embeddings-v4</code> en un futuro próximo.</p>",
  "comment_id": "685d4b76f1bef30001fc5449",
  "feature_image": "https://jina-ai-gmbh.ghost.io/content/images/2025/06/Heading---2025-06-30T114820.483.webp",
  "featured": false,
  "visibility": "public",
  "created_at": "2025-06-26T15:30:30.000+02:00",
  "updated_at": "2025-06-30T21:14:36.000+02:00",
  "published_at": "2025-06-30T21:14:36.000+02:00",
  "custom_excerpt": "Quantization gives smaller embeddings. We show you fine-tuned quantization gives you even lossless embeddings.",
  "codeinjection_head": null,
  "codeinjection_foot": null,
  "custom_template": null,
  "canonical_url": null,
  "authors": [
    {
      "id": "6360e7e05e0f6e004d70bd99",
      "name": "Bo Wang",
      "slug": "bo",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/11/4B483B29-E306-402B-8635-64866C458406.jpeg",
      "cover_image": null,
      "bio": "Developer @Jina, Contributor to open source ",
      "website": "https://bwanglzu.github.io/",
      "location": "Berlin",
      "facebook": null,
      "twitter": "@bo_wangbo",
      "meta_title": null,
      "meta_description": null,
      "threads": null,
      "bluesky": null,
      "mastodon": null,
      "tiktok": null,
      "youtube": null,
      "instagram": null,
      "linkedin": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/bo/"
    },
    {
      "id": "64ae64a4733bc60001949ca4",
      "name": "Andrei Ungureanu",
      "slug": "andrei",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2023/07/Me.jpg",
      "cover_image": null,
      "bio": "Software / AI Engineer, with a passion for content creation.",
      "website": null,
      "location": "Beijing, China",
      "facebook": null,
      "twitter": null,
      "meta_title": null,
      "meta_description": null,
      "threads": null,
      "bluesky": null,
      "mastodon": null,
      "tiktok": null,
      "youtube": null,
      "instagram": null,
      "linkedin": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/andrei/"
    },
    {
      "id": "632ae7353e4e55003d52598e",
      "name": "Scott Martens",
      "slug": "scott",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/11/photo-of-me-cropped.jpg",
      "cover_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/11/shanshui-ernie-crop.png",
      "bio": "A rogue AI created by Canada's Weapon X program.\n\nContent Creator @ Jina AI",
      "website": "https://jina.ai",
      "location": "Berlin",
      "facebook": null,
      "twitter": null,
      "meta_title": null,
      "meta_description": null,
      "threads": null,
      "bluesky": null,
      "mastodon": null,
      "tiktok": null,
      "youtube": null,
      "instagram": null,
      "linkedin": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/scott/"
    }
  ],
  "tags": [
    {
      "id": "634a1a8ccebfc1003d8ab706",
      "name": "Tech Blog",
      "slug": "tech-blog",
      "description": null,
      "feature_image": null,
      "visibility": "public",
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "canonical_url": null,
      "accent_color": null,
      "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
    }
  ],
  "primary_author": {
    "id": "6360e7e05e0f6e004d70bd99",
    "name": "Bo Wang",
    "slug": "bo",
    "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/11/4B483B29-E306-402B-8635-64866C458406.jpeg",
    "cover_image": null,
    "bio": "Developer @Jina, Contributor to open source ",
    "website": "https://bwanglzu.github.io/",
    "location": "Berlin",
    "facebook": null,
    "twitter": "@bo_wangbo",
    "meta_title": null,
    "meta_description": null,
    "threads": null,
    "bluesky": null,
    "mastodon": null,
    "tiktok": null,
    "youtube": null,
    "instagram": null,
    "linkedin": null,
    "url": "https://jina-ai-gmbh.ghost.io/author/bo/"
  },
  "primary_tag": {
    "id": "634a1a8ccebfc1003d8ab706",
    "name": "Tech Blog",
    "slug": "tech-blog",
    "description": null,
    "feature_image": null,
    "visibility": "public",
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "canonical_url": null,
    "accent_color": null,
    "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
  },
  "url": "https://jina-ai-gmbh.ghost.io/podcast/quantization-aware-training-of-jina-embeddings-v4/",
  "excerpt": "La cuantización proporciona vectores modelo (Embeddings) más pequeños. Le mostramos que la cuantización optimizada le brinda incluso vectores modelo sin pérdida.",
  "reading_time": 8,
  "access": true,
  "comments": false,
  "og_image": null,
  "og_title": null,
  "og_description": null,
  "twitter_image": null,
  "twitter_title": null,
  "twitter_description": null,
  "meta_title": null,
  "meta_description": null,
  "email_subject": null,
  "frontmatter": null,
  "feature_image_alt": null,
  "feature_image_caption": null
}