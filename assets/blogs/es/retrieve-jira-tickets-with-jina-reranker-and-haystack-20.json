{
  "slug": "retrieve-jira-tickets-with-jina-reranker-and-haystack-20",
  "id": "661543ffd6a1020001681e99",
  "uuid": "54231ab9-8258-4020-bd25-3d13ec8f5f04",
  "title": "Recuperar tickets de Jira con Jina Reranker y Haystack 2.0",
  "html": "<p>Tras la <a href=\"https://haystack.deepset.ai/blog/using-jina-embeddings-haystack?ref=jina-ai-gmbh.ghost.io\">integración de Jina Embeddings en Deepset's Haystack 2.0</a> y el <a href=\"https://jina.ai/news/maximizing-search-relevancy-and-rag-accuracy-with-jina-reranker?ref=jina-ai-gmbh.ghost.io\">lanzamiento de Jina Reranker</a>, nos complace anunciar que Jina Reranker ahora también está disponible a través de la <a href=\"https://docs.haystack.deepset.ai/docs/jinaranker?ref=jina-ai-gmbh.ghost.io\">extensión Jina Haystack</a>.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://haystack.deepset.ai/integrations/jina?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Jina AI | Haystack</div><div class=\"kg-bookmark-description\">Use the latest Jina AI embedding models</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://haystack.deepset.ai/favicon.ico\" alt=\"\"><span class=\"kg-bookmark-author\">Haystack</span><span class=\"kg-bookmark-publisher\">Authors deepset</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://haystack.deepset.ai/images/haystack-ogimage.png\" alt=\"\"></div></a></figure><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://jina.ai/reranker/?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Reranker API</div><div class=\"kg-bookmark-description\">Maximize the search relevancy and RAG accuracy at ease</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jina.ai/icons/favicon-128x128.png\" alt=\"\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jina.ai/banner-reranker-api.png\" alt=\"\"></div></a></figure><p><a href=\"https://haystack.deepset.ai/?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\">Haystack</a> es un framework de extremo a extremo que te acompaña en cada paso del ciclo de vida del proyecto GenAI. Ya sea que quieras realizar búsqueda de documentos, generación aumentada por recuperación (RAG), respuesta a preguntas o generación de respuestas, Haystack puede orquestar modelos de embeddings y LLMs de última generación en pipelines para construir aplicaciones NLP de extremo a extremo y resolver tu caso de uso.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://haystack.deepset.ai/?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Haystack | Haystack</div><div class=\"kg-bookmark-description\">Haystack, the composable open-source AI framework</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://haystack.deepset.ai/favicon.ico\" alt=\"\"><span class=\"kg-bookmark-author\">Haystack</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://haystack.deepset.ai/images/haystack-ogimage.png\" alt=\"\"></div></a></figure><p>En esta publicación, te mostraremos cómo usarlos para crear tu propio motor de búsqueda de tickets de Jira para optimizar tus operaciones y nunca más perder tiempo creando problemas duplicados.</p><p>Para seguir este tutorial, necesitarás una clave API de Jina Reranker. Puedes crear una con una cuota de prueba gratuita de un millón de tokens desde el <a href=\"https://jina.ai/reranker/?ref=jina-ai-gmbh.ghost.io\">sitio web de Jina Reranker</a>.</p><div class=\"kg-card kg-callout-card kg-callout-card-blue\"><div class=\"kg-callout-emoji\">💡</div><div class=\"kg-callout-text\">Puedes seguir el tutorial en <a href=\"https://colab.research.google.com/github/jina-ai/workshops/blob/main/notebooks/embeddings/haystack/Haystack_Reranker.ipynb?ref=jina-ai-gmbh.ghost.io\">Colab</a> o <a href=\"https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/haystack/Haystack_Reranker.ipynb?ref=jina-ai-gmbh.ghost.io\">descargando el notebook</a>.</div></div><h2 id=\"retrieving-jira-support-tickets\">Recuperando Tickets de Soporte de Jira</h2><p>Cualquier equipo que maneje un proyecto complejo ha experimentado la frustración de tener un problema que quieren reportar pero sin saber si ya existe un ticket para este problema.</p><p>En el siguiente tutorial, te mostraremos cómo puedes crear fácilmente una herramienta usando Jina Reranker y pipelines de Haystack, que sugiere posibles tickets duplicados cuando se está creando uno nuevo.</p><ul><li>Al ingresar un ticket que necesita ser verificado contra todos los tickets existentes, el pipeline primero recuperará de la base de datos todos los problemas relacionados.</li><li>Luego eliminará el ticket inicial de la lista (si ya existía en la base de datos) y cualquier ticket hijo (es decir, tickets cuyo ID padre corresponde al ticket original).</li><li>La selección final ahora solo comprende problemas que podrían cubrir el mismo tema que el ticket original pero no fueron marcados como tales en la base de datos a través de sus IDs. Estos tickets son reordenados para asegurar la máxima relevancia y permitirte identificar entradas duplicadas en la base de datos.</li></ul><h3 id=\"getting-the-dataset\">Obteniendo el Dataset</h3><p>Para implementar nuestra solución, hemos elegido todos los tickets \"En progreso\" de Jira para el proyecto <a href=\"https://zookeeper.apache.org/?ref=jina-ai-gmbh.ghost.io\">Apache Zookeeper</a>. Este es un servicio de código abierto para coordinar procesos de aplicaciones distribuidas.</p><p>Hemos colocado los tickets en un <a href=\"https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/haystack/tickets.json?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\">archivo JSON</a> para hacerlos más convenientes. Por favor, <a href=\"https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/haystack/tickets.json?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\">descarga el archivo</a> a tu espacio de trabajo.</p><h3 id=\"set-up-the-prerequisites\">Configurar los Prerequisitos</h3><p>Para instalar los requisitos, ejecuta:</p><pre><code class=\"language-Bash\">pip install --q chromadb haystack-ai jina-haystack chroma-haystack\n</code></pre><p>Para ingresar la clave API, configúrala como una variable de entorno:</p><pre><code class=\"language-Python\">import os\nimport getpass\n\nos.environ[\"JINA_API_KEY\"] = getpass.getpass()\n</code></pre><div class=\"kg-card kg-callout-card kg-callout-card-blue\"><div class=\"kg-callout-emoji\">💡</div><div class=\"kg-callout-text\">Si estás ejecutando este código a través del notebook, <code spellcheck=\"false\" style=\"white-space: pre-wrap;\">getpass.getpass()</code> te pedirá que ingreses la clave API debajo del bloque de código correspondiente. Puedes ingresar la clave allí y presionar enter para continuar con el tutorial. Si lo prefieres, también puedes sustituir <code spellcheck=\"false\" style=\"white-space: pre-wrap;\">getpass.getpass()</code> con la clave API directamente.</div></div><h3 id=\"build-the-indexing-pipeline\">Construir el Pipeline de Indexación</h3><p>El pipeline de indexación preprocesará los tickets, los convertirá en vectores y los almacenará. Usaremos el <a href=\"https://docs.trychroma.com/getting-started?ref=jina-ai-gmbh.ghost.io\">Chroma DocumentStore</a> como nuestra base de datos vectorial para almacenar los embeddings vectoriales, a través de la <a href=\"https://haystack.deepset.ai/integrations/chroma-documentstore?ref=jina-ai-gmbh.ghost.io\">integración Chroma Document Store de Haystack</a>.</p><pre><code class=\"language-Python\">from haystack_integrations.document_stores.chroma import ChromaDocumentStore\n\ndocument_store = ChromaDocumentStore()\n</code></pre><p>Comenzaremos definiendo nuestro preprocesador de datos personalizado para considerar solo los campos relevantes del documento y eliminar todas las entradas vacías:</p><pre><code class=\"language-Python\">import json\nfrom typing import List\nfrom haystack import Document, component\n\nrelevant_keys = ['Summary', 'Issue key', 'Issue id', 'Parent id', 'Issue type', 'Status', 'Project lead', 'Priority', 'Assignee', 'Reporter', 'Creator', 'Created', 'Updated', 'Last Viewed', 'Due Date', 'Labels',\n                 'Description', 'Comment', 'Comment__1', 'Comment__2', 'Comment__3', 'Comment__4', 'Comment__5', 'Comment__6', 'Comment__7', 'Comment__8', 'Comment__9', 'Comment__10', 'Comment__11', 'Comment__12',\n                 'Comment__13', 'Comment__14', 'Comment__15']\n\n@component\nclass RemoveKeys:\n    @component.output_types(documents=List[Document])\n    def run(self, file_name: str):\n        with open(file_name, 'r') as file:\n            tickets = json.load(file)\n        cleaned_tickets = []\n        for t in tickets:\n            t = {k: v for k, v in t.items() if k in relevant_keys and v}\n            cleaned_tickets.append(t)\n        return {'documents': cleaned_tickets}\n</code></pre><p>Luego necesitamos crear un convertidor JSON personalizado para transformar los tickets en objetos Document que Haystack pueda entender:</p><pre><code class=\"language-Python\">@component\nclass JsonConverter:\n    @component.output_types(documents=List[Document])\n    def run(self, tickets: List[Document]):\n        tickets_documents = []\n        for t in tickets:\n            if 'Parent id' in t:\n                t = Document(content=json.dumps(t), meta={'Issue key': t['Issue key'], 'Issue id': t['Issue id'], 'Parent id': t['Parent id']})\n            else:\n                t = Document(content=json.dumps(t), meta={'Issue key': t['Issue key'], 'Issue id': t['Issue id'], 'Parent id': ''})\n            tickets_documents.append(t)\n        return {'documents': tickets_documents}\n</code></pre><p>Finalmente, incrustamos los Documents y escribimos estos embeddings en el ChromaDocumentStore:</p><pre><code class=\"language-Python\">from haystack import Pipeline\n\nfrom haystack.components.writers import DocumentWriter\nfrom haystack_integrations.components.retrievers.chroma import ChromaEmbeddingRetriever\nfrom haystack.document_stores.types import DuplicatePolicy\n\nfrom haystack_integrations.components.embedders.jina import JinaDocumentEmbedder\n\nretriever = ChromaEmbeddingRetriever(document_store=document_store)\nretriever_reranker = ChromaEmbeddingRetriever(document_store=document_store)\n\nindexing_pipeline = Pipeline()\nindexing_pipeline.add_component('cleaner', RemoveKeys())\nindexing_pipeline.add_component('converter', JsonConverter())\nindexing_pipeline.add_component('embedder', JinaDocumentEmbedder(model='jina-embeddings-v2-base-en'))\nindexing_pipeline.add_component('writer', DocumentWriter(document_store=document_store, policy=DuplicatePolicy.SKIP))\n\nindexing_pipeline.connect('cleaner', 'converter')\nindexing_pipeline.connect('converter', 'embedder')\nindexing_pipeline.connect('embedder', 'writer')\n\nindexing_pipeline.run({'cleaner': {'file_name': 'tickets.json'}})\n</code></pre><p>Esto debería crear una barra de progreso y mostrar un breve JSON que contiene información sobre lo que se ha almacenado:</p><pre><code class=\"language-Text\">Calculating embeddings: 100%|██████████| 1/1 [00:01&lt;00:00,  1.21s/it]\n{'embedder': {'meta': {'model': 'jina-embeddings-v2-base-en',\n   'usage': {'total_tokens': 20067, 'prompt_tokens': 20067}}},\n 'writer': {'documents_written': 31}}</code></pre><h3 id=\"build-the-query-pipeline\">Construir el Pipeline de Consulta</h3><p>Vamos a crear un pipeline de consulta para poder comenzar a comparar tickets. En Haystack 2.0, los retrievers están estrechamente acoplados a los DocumentStores. Si pasamos el document store en el retriever que inicializamos anteriormente, este pipeline puede acceder a los documentos que generamos y pasarlos al reranker. El reranker entonces compara estos documentos directamente con la pregunta y los clasifica según su relevancia.</p><p>Primero definimos el limpiador personalizado para eliminar los tickets recuperados que contengan el mismo ID de problema o ID padre que el problema pasado como consulta:</p><pre><code class=\"language-Python\">from typing import Optional\n\n@component\nclass RemoveRelated:\n    @component.output_types(documents=List[Document])\n    def run(self, tickets: List[Document], query_id: Optional[str]):\n        retrieved_tickets = []\n        for t in tickets:\n            if not t.meta['Issue id'] == query_id and not t.meta['Parent id'] == query_id:\n                retrieved_tickets.append(t)\n        return {'documents': retrieved_tickets}\n</code></pre><p>Luego incrustamos la consulta, recuperamos documentos relevantes, limpiamos la selección y finalmente la reordenamos:</p><pre><code class=\"language-Python\">from haystack_integrations.components.embedders.jina import JinaTextEmbedder\nfrom haystack_integrations.components.rankers.jina import JinaRanker\n\nquery_pipeline_reranker = Pipeline()\nquery_pipeline_reranker.add_component('query_embedder_reranker', JinaTextEmbedder(model='jina-embeddings-v2-base-en'))\nquery_pipeline_reranker.add_component('query_retriever_reranker', retriever_reranker)\nquery_pipeline_reranker.add_component('query_cleaner_reranker', RemoveRelated())\nquery_pipeline_reranker.add_component('query_ranker_reranker', JinaRanker())\n\nquery_pipeline_reranker.connect('query_embedder_reranker.embedding', 'query_retriever_reranker.query_embedding')\nquery_pipeline_reranker.connect('query_retriever_reranker', 'query_cleaner_reranker')\nquery_pipeline_reranker.connect('query_cleaner_reranker', 'query_ranker_reranker')\n</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/04/upload_916b6073b69f880f765730833bcdfbe3.png\" class=\"kg-image\" alt=\"Diagrama de flujo que describe un flujo de trabajo de procesamiento de consultas con funciones como 'text', 'query_embedder_reranker', 'meta'.\" loading=\"lazy\" width=\"510\" height=\"972\"></figure><p>Para resaltar la diferencia causada por el reranker, analizamos el mismo pipeline sin el paso final de reordenamiento (el código correspondiente se omitió en esta publicación por legibilidad pero se puede encontrar en el notebook):</p><figure class=\"kg-card kg-image-card\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/04/upload_d16f493c35c403b55f7c420c11c1f998.png\" class=\"kg-image\" alt=\"Diagrama de flujo que detalla un proceso de búsqueda de texto con componentes 'query_embedding', 'query_retriever' y 'query_cleaner'.\" loading=\"lazy\" width=\"572\" height=\"984\"></figure><p>Para comparar los resultados de estos dos pipelines, ahora definimos nuestra consulta en forma de un ticket existente, en este caso \"ZOOKEEPER-3282\":</p><pre><code class=\"language-Python\">query_ticket_key = 'ZOOKEEPER-3282'\n\nwith open('tickets.json', 'r') as file:\n    tickets = json.load(file)\n\nfor ticket in tickets:\n    if ticket['Issue key'] == query_ticket_key:\n        query = str(ticket)\n        query_ticket_id = ticket['Issue id']\n</code></pre><p>Se trata de \"una gran refactorización de la documentacion\" [<a href=\"https://en.wikipedia.org/wiki/Sic?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\"><em>sic</em></a>]. Verás que, a pesar del error ortográfico, Jina Reranker recuperará correctamente tickets similares.</p><pre><code class=\"language-JSON\">{\n    \"Summary\": \"a big refactor for the documetations\"\n    \"Issue key\": \"ZOOKEEPER-3282\"\n    \"Issue id:: 13216608\n    \"Parent id\": \"\"\n    \"Issue Type\": \"Task\"\n    \"Status\": \"In Progress\"\n    \"Project lead\": \"phunt\"\n    \"Priority\": \"Major\"\n    \"Assignee\": \"maoling\"\n    \"Reporter\": \"maoling\"\n    \"Creator\": \"maoling\"\n    \"Created\": \"19/Feb/19 11:50\"\n    \"Updated\": \"04/Aug/19 12:48\"\n    \"Last Viewed\": \"12/Mar/24 11:56\"\n    \"Description\": \"Hi guys: I'am working on doing a big refactor for the documetations.it aims to - 1.make a better reading experiences and help users know more about zookeeper quickly,as good as other projects' doc(e.g redis,hbase). - 2.have less changes to diff with the original docs as far as possible. - 3.solve the problem when we have some new features or improvements,but cannot find a good place to doc it.   The new catalog may looks kile this: * is new one added. ** is the one to keep unchanged as far as possible. *** is the one modified. -------------------------------------------------------------- |---Overview    |---Welcome ** [1.1]    |---Overview ** [1.2]    |---Getting Started ** [1.3]    |---Release Notes ** [1.4] |---Developer    |---API *** [2.1]    |---Programmer's Guide ** [2.2]    |---Recipes *** [2.3]    |---Clients * [2.4]    |---Use Cases * [2.5] |---Admin &amp; Ops    |---Administrator's Guide ** [3.1]    |---Quota Guide ** [3.2]    |---JMX ** [3.3]    |---Observers Guide ** [3.4]    |---Dynamic Reconfiguration ** [3.5]    |---Zookeeper CLI * [3.6]    |---Shell * [3.7]    |---Configuration flags * [3.8]    |---Troubleshooting &amp; Tuning  * [3.9] |---Contributor Guidelines    |---General Guidelines * [4.1]    |---ZooKeeper Internals ** [4.2] |---Miscellaneous    |---Wiki ** [5.1]    |---Mailing Lists ** [5.2] -------------------------------------------------------------- The Roadmap is: 1.(I pick up it : D)  1.1 write API[2.1], which includes the：    1.1.1  original API Docs which is a Auto-generated java doc,just give a link.    1.1.2. Restful-api (the apis under the /zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources)  1.2 write Clients[2.4], which includes the:      1.2.1 C client      1.2.2 zk-python, kazoo      1.2.3 Curator etc.......      look at an example from: https://redis.io/clients # write Recipes[2.3], which includes the:  - integrate \"Java Example\" and \"Barrier and Queue Tutorial\"(Since some bugs in the examples and they are obsolete，we may delete something) into it.  - suggest users to use the recipes implements of Curator and link to the Curator's recipes doc.   # write Zookeeper CLI[3.6], which includes the:  - about how to use the zk command line interface [./zkCli.sh]    e.g ls /; get ; rmr;create -e -p etc.......  - look at an example from redis: https://redis.io/topics/rediscli   # write shell[3.7], which includes the:   - list all usages of the shells under the zookeeper/bin. (e.g zkTxnLogToolkit.sh,zkCleanup.sh)   # write Configuration flags[3.8], which includes the:   - list all usages of configurations properties(e.g zookeeper.snapCount):   - move the original Advanced Configuration part of zookeeperAdmin.md into it.     look at an example from:https://coreos.com/etcd/docs/latest/op-guide/configuration.html    # write Troubleshooting &amp; Tuning[3.9], which includes the:   - move the original \"Gotchas: Common Problems and Troubleshooting\" part of Administrator's Guide.md into it.   - move the original \"FAQ\" into into it.   - add some new contents （e.g https://www.yumpu.com/en/document/read/29574266/building-an-impenetrable-zookeeper-pdf-github）.   look at an example from:https://redis.io/topics/problems                             https://coreos.com/etcd/docs/latest/tuning.html   # write General Guidelines[4.1], which includes the:  - move the original \"Logging\" part of ZooKeeper Internals into it as the logger specification.  - write specifications about code, git commit messages,github PR  etc ...    look at an example from:    http://hbase.apache.org/book.html#hbase.commit.msg.format   # write Use Cases[2.5], which includes the:  - just move the context from: https://cwiki.apache.org/confluence/display/ZOOKEEPER/PoweredBy into it.  - add some new contents.(e.g Apache Projects:Spark;Companies:twitter,fb)   -------------------------------------------------------------- BTW: - Any insights or suggestions are very welcomed.After the dicussions,I will create a series of tickets(An umbrella) - Since these works can be done parallelly, if you are interested in them, please don't hesitate,just assign to yourself, pick it up. (Notice: give me a ping to avoid the duplicated work).\"\n}\n</code></pre><p>Finalmente, ejecutamos el pipeline de consulta. En este caso, recupera 20 tickets, elimina las entradas relacionadas por ID, las reordena y genera la selección final de los 10 problemas más relevantes.</p><p>Antes del paso de reordenamiento, la salida incluye 17 tickets:</p>\n<!--kg-card-begin: html-->\n<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Issue ID</th>\n<th>Issue Key</th>\n<th>Summary</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>13191544</td>\n<td>ZOOKEEPER-3170</td>\n<td>Umbrella for eliminating ZooKeeper flaky tests</td>\n</tr>\n<tr>\n<td>2</td>\n<td>13400622</td>\n<td>ZOOKEEPER-4375</td>\n<td>Quota cannot limit the specify value when multiply clients create/set znodes</td>\n</tr>\n<tr>\n<td>3</td>\n<td>13249579</td>\n<td>ZOOKEEPER-3499</td>\n<td>[admin server way] Add a complete backup mechanism for zookeeper internal</td>\n</tr>\n<tr>\n<td>4</td>\n<td>13295073</td>\n<td>ZOOKEEPER-3775</td>\n<td>Wrong message in IOException</td>\n</tr>\n<tr>\n<td>5</td>\n<td>13268474</td>\n<td>ZOOKEEPER-3617</td>\n<td>ZK digest ACL permissions gets overridden</td>\n</tr>\n<tr>\n<td>6</td>\n<td>13296971</td>\n<td>ZOOKEEPER-3787</td>\n<td>Apply modernizer-maven-plugin to build</td>\n</tr>\n<tr>\n<td>7</td>\n<td>13265507</td>\n<td>ZOOKEEPER-3600</td>\n<td>support the complete linearizable read and multiply read consistency level</td>\n</tr>\n<tr>\n<td>8</td>\n<td>13222060</td>\n<td>ZOOKEEPER-3318</td>\n<td>[CLI way]Add a complete backup mechanism for zookeeper internal</td>\n</tr>\n<tr>\n<td>9</td>\n<td>13262989</td>\n<td>ZOOKEEPER-3587</td>\n<td>Add a documentation about docker</td>\n</tr>\n<tr>\n<td>10</td>\n<td>13262130</td>\n<td>ZOOKEEPER-3578</td>\n<td>Add a new CLI: multi</td>\n</tr>\n<tr>\n<td>11</td>\n<td>13262828</td>\n<td>ZOOKEEPER-3585</td>\n<td>Add a documentation about RequestProcessors</td>\n</tr>\n<tr>\n<td>12</td>\n<td>13262494</td>\n<td>ZOOKEEPER-3583</td>\n<td>Add new apis to get node type and ttl time info</td>\n</tr>\n<tr>\n<td>13</td>\n<td>12998876</td>\n<td>ZOOKEEPER-2519</td>\n<td>zh->state should not be 0 while handle is active</td>\n</tr>\n<tr>\n<td>14</td>\n<td>13536435</td>\n<td>ZOOKEEPER-4696</td>\n<td>Update for Zookeeper latest version</td>\n</tr>\n<tr>\n<td>15</td>\n<td>13297249</td>\n<td>ZOOKEEPER-3789</td>\n<td>fix the build warnings about @see,@link,@return found by IDEA</td>\n</tr>\n<tr>\n<td>16</td>\n<td>12728973</td>\n<td>ZOOKEEPER-1983</td>\n<td>Append to zookeeper.out (not overwrite) to support logrotation</td>\n</tr>\n<tr>\n<td>17</td>\n<td>12478629</td>\n<td>ZOOKEEPER-915</td>\n<td>Errors that happen during sync() processing at the leader do not get propagated back to the client.</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: html-->\n<p>Después de incluir el reordenador, ahora ejecutamos el pipeline de consulta:</p><pre><code class=\"language-Python\">result = query_pipeline_reranker.run(data={'query_embedder_reranker':{'text': query},\n                                  'query_retriever_reranker': {'top_k': 20},\n                                  'query_cleaner_reranker': {'query_id': query_ticket_id},\n                                  'query_ranker_reranker': {'query': query, 'top_k': 10}\n                                  }\n                            )\n\nfor idx, res in enumerate(result['query_ranker_reranker']['documents']):\n    print('Doc {}:'.format(idx + 1), res)\n</code></pre><p>La salida final son los 10 tickets más relevantes:</p>\n<!--kg-card-begin: html-->\n<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Issue ID</th>\n<th>Issue Key</th>\n<th>Summary</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>13262989</td>\n<td>ZOOKEEPER-3587</td>\n<td>Add a documentation about docker</td>\n</tr>\n<tr>\n<td>2</td>\n<td>13265507</td>\n<td>ZOOKEEPER-3600</td>\n<td>support the complete linearizable read and multiply read consistency level</td>\n</tr>\n<tr>\n<td>3</td>\n<td>13249579</td>\n<td>ZOOKEEPER-3499</td>\n<td>[admin server way] Add a complete backup mechanism for zookeeper internal</td>\n</tr>\n<tr>\n<td>4</td>\n<td>12478629</td>\n<td>ZOOKEEPER-915</td>\n<td>Errors that happen during sync() processing at the leader do not get propagated back to the client.</td>\n</tr>\n<tr>\n<td>5</td>\n<td>13262828</td>\n<td>ZOOKEEPER-3585</td>\n<td>Add a documentation about RequestProcessors</td>\n</tr>\n<tr>\n<td>6</td>\n<td>13297249</td>\n<td>ZOOKEEPER-3789</td>\n<td>fix the build warnings about @see,@link,@return found by IDEA</td>\n</tr>\n<tr>\n<td>7</td>\n<td>12998876</td>\n<td>ZOOKEEPER-2519</td>\n<td>zh->state should not be 0 while handle is active</td>\n</tr>\n<tr>\n<td>8</td>\n<td>13536435</td>\n<td>ZOOKEEPER-4696</td>\n<td>Update for Zookeeper latest version</td>\n</tr>\n<tr>\n<td>9</td>\n<td>12728973</td>\n<td>ZOOKEEPER-1983</td>\n<td>Append to zookeeper.out (not overwrite) to support logrotation</td>\n</tr>\n<tr>\n<td>10</td>\n<td>13222060</td>\n<td>ZOOKEEPER-3318</td>\n<td>[CLI way]Add a complete backup mechanism for zookeeper internal</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: html-->\n<h2 id=\"advantages-of-jina-embeddings-and-reranker\">Ventajas de Jina Embeddings y Reranker</h2><p>Para resumir este tutorial, construimos una herramienta de identificación de tickets duplicados basada en <a href=\"https://jina.ai/embeddings/?ref=jina-ai-gmbh.ghost.io\">Jina Embeddings</a>, <a href=\"https://jina.ai/reranker/?ref=jina-ai-gmbh.ghost.io\">Jina Reranker</a> y <a href=\"https://haystack.deepset.ai/?ref=jina-ai-gmbh.ghost.io\">Haystack 2.0</a>. Los resultados anteriores muestran claramente la necesidad tanto de Jina Embeddings para recuperar documentos relevantes a través de búsqueda vectorial, como de Jina Reranker para obtener finalmente el contenido más relevante.</p><p>Si tomamos, por ejemplo, los dos problemas relacionados con la adición de documentación, es decir, \"ZOOKEEPER-3585\" y \"ZOOKEEPER-3587\", vemos que después del paso de recuperación, ambos están incluidos correctamente en las posiciones 11 y 9 respectivamente. Después de reordenar los documentos, ahora ambos están dentro de los 5 documentos más relevantes en las posiciones 5 y 1 respectivamente, mostrando una mejora significativa.</p><p>Al integrar ambos modelos en los pipelines de Haystack, la herramienta completa está lista para usar. Esta combinación hace que la <a href=\"https://haystack.deepset.ai/integrations/jina/?ref=jina-ai-gmbh.ghost.io\">extensión Jina Haystack</a> sea la solución perfecta para tu aplicación.</p>",
  "comment_id": "661543ffd6a1020001681e99",
  "feature_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/04/Reranker-Haystack.jpg",
  "featured": false,
  "visibility": "public",
  "created_at": "2024-04-09T15:34:55.000+02:00",
  "updated_at": "2024-07-08T21:11:51.000+02:00",
  "published_at": "2024-04-10T16:00:49.000+02:00",
  "custom_excerpt": "Learn how to use Jina Reranker and Embeddings with Haystack to create your own Jira ticket search engine, streamlining your operations and never again waste time creating duplicate issues.",
  "codeinjection_head": null,
  "codeinjection_foot": null,
  "custom_template": null,
  "canonical_url": null,
  "tags": [
    {
      "id": "634a1a8ccebfc1003d8ab706",
      "name": "Tech Blog",
      "slug": "tech-blog",
      "description": null,
      "feature_image": null,
      "visibility": "public",
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "canonical_url": null,
      "accent_color": null,
      "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
    }
  ],
  "authors": [
    {
      "id": "65e85e35b22368000152a4bf",
      "name": "Francesco Kruk",
      "slug": "francesco",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/03/Portrait-Picture_Low.jpg",
      "cover_image": null,
      "bio": null,
      "website": null,
      "location": null,
      "facebook": null,
      "twitter": null,
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/francesco/"
    }
  ],
  "primary_author": {
    "id": "65e85e35b22368000152a4bf",
    "name": "Francesco Kruk",
    "slug": "francesco",
    "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/03/Portrait-Picture_Low.jpg",
    "cover_image": null,
    "bio": null,
    "website": null,
    "location": null,
    "facebook": null,
    "twitter": null,
    "meta_title": null,
    "meta_description": null,
    "url": "https://jina-ai-gmbh.ghost.io/author/francesco/"
  },
  "primary_tag": {
    "id": "634a1a8ccebfc1003d8ab706",
    "name": "Tech Blog",
    "slug": "tech-blog",
    "description": null,
    "feature_image": null,
    "visibility": "public",
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "canonical_url": null,
    "accent_color": null,
    "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
  },
  "url": "https://jina-ai-gmbh.ghost.io/podcast/retrieve-jira-tickets-with-jina-reranker-and-haystack-20/",
  "excerpt": "Aprenda a utilizar Jina Reranker y Embeddings con Haystack para crear su propio motor de búsqueda de tickets de Jira, optimizando sus operaciones y evitando perder tiempo creando problemas duplicados.",
  "reading_time": 10,
  "access": true,
  "comments": false,
  "og_image": null,
  "og_title": null,
  "og_description": null,
  "twitter_image": null,
  "twitter_title": null,
  "twitter_description": null,
  "meta_title": null,
  "meta_description": null,
  "email_subject": null,
  "frontmatter": null,
  "feature_image_alt": "Graphic with \"Reranker\" and \"Haystack by deepset\" on a black background with teal decorative elements.",
  "feature_image_caption": null
}