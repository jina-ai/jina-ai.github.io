{
  "slug": "implementing-a-chat-history-rag-with-jina-ai-and-milvus-lite",
  "id": "665d76034b4b4c0001ba1bb3",
  "uuid": "851bc948-281c-4fab-bc11-941c900b086b",
  "title": "Implementación de un Chat History RAG con Jina AI y Milvus Lite",
  "html": "<p>Los desarrolladores e ingenieros de operaciones valoran mucho la infraestructura que pueden configurar fácilmente, iniciar rápidamente y, posteriormente, implementar de manera eficiente en un entorno de producción escalado sin complicaciones adicionales. Por esta razón, <a href=\"https://milvus.io/docs/milvus_lite.md?ref=jina-ai-gmbh.ghost.io\"><u>Milvus Lite</u></a>, la última base de datos vectorial ligera de nuestro socio <a href=\"https://milvus.io/?ref=jina-ai-gmbh.ghost.io\"><u>Milvus</u></a>, es una herramienta importante para que los desarrolladores de Python desarrollen rápidamente aplicaciones de búsqueda, especialmente cuando se usa junto con modelos base de búsqueda de alta calidad y fáciles de usar.</p><p>En este artículo, describiremos cómo Milvus Lite integra <a href=\"https://jina.ai/embeddings/?ref=jina-ai-gmbh.ghost.io\"><u>Jina Embeddings v2</u></a> y <a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><u>Jina Reranker v1</u></a> usando el ejemplo de una aplicación de <a href=\"https://jina.ai/news/albus-by-springworks-empowering-employees-with-enterprise-search?ref=jina-ai-gmbh.ghost.io\"><u>Retrieval Augmented Generation (RAG)</u></a> construida sobre los chats de canales públicos internos de una empresa ficticia para permitir que los empleados obtengan respuestas a sus preguntas relacionadas con la organización de manera precisa y útil.</p><h2 id=\"overview-of-milvus-lite-jina-embeddings-and-jina-reranker\">Descripción general de Milvus Lite, Jina Embeddings y Jina Reranker</h2><p>Milvus Lite es una nueva versión ligera de la base de datos vectorial líder Milvus, que ahora también se ofrece como una biblioteca de Python. Milvus Lite comparte la misma API que Milvus implementada en Docker o Kubernetes pero puede instalarse fácilmente mediante un comando pip de una línea, sin necesidad de configurar un servidor.</p><p>Con la integración de Jina Embeddings v2 y Jina Reranker v1 en <a href=\"https://github.com/milvus-io/pymilvus?ref=jina-ai-gmbh.ghost.io\"><u>pymilvus</u></a>, el SDK de Python de Milvus, ahora tienes la opción de incrustar documentos directamente usando el mismo cliente de Python para cualquier modo de implementación de Milvus, incluido Milvus Lite. Puedes encontrar detalles de la integración de Jina Embeddings y Reranker en las <a href=\"https://milvus.io/docs/integrate_with_jina.md?ref=jina-ai-gmbh.ghost.io\"><u>páginas de documentación</u></a> de pymilvus.</p><p>Con su ventana de contexto de 8k tokens y capacidades multilingües, Jina Embeddings v2 codifica la semántica amplia del texto y asegura una recuperación precisa. Al agregar Jina Reranker v1 al pipeline, puedes refinar aún más tus resultados mediante la codificación cruzada de los resultados recuperados directamente con la consulta para una comprensión contextual más profunda.</p><h2 id=\"milvus-and-jina-ai-models-in-action\">Milvus y modelos de Jina AI en acción</h2><p>Este tutorial se centrará en un caso de uso práctico: Consultar el historial de chat de Slack de una empresa para responder una amplia gama de preguntas basadas en conversaciones anteriores.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/E-R-slack--2-.jpg\" class=\"kg-image\" alt=\"Diagrama de flujo que detalla el proceso de entrenamiento del modelo de la comunidad Rust, con pasos desde la consulta &quot;¿Siguiente paso de entrenamiento?&quot;\" loading=\"lazy\" width=\"1600\" height=\"900\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/E-R-slack--2-.jpg 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2024/06/E-R-slack--2-.jpg 1000w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/E-R-slack--2-.jpg 1600w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">Flujo del proceso para consultar los datos de Slack usando un ejemplo de consulta</span></figcaption></figure><p>Por ejemplo, un empleado podría preguntar sobre el siguiente paso en algún proceso de entrenamiento de IA, como en el esquema del proceso anterior. Usando Jina Embeddings, Jina Reranker y Milvus, podemos identificar con precisión la información relevante en los mensajes de Slack registrados. Esta aplicación puede mejorar la productividad en el lugar de trabajo facilitando el acceso a información valiosa de comunicaciones anteriores.</p><p>Para generar las respuestas, usaremos <a href=\"https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1?ref=jina-ai-gmbh.ghost.io\"><u>Mixtral 7B Instruct</u></a> a través de la <a href=\"https://python.langchain.com/v0.1/docs/integrations/llms/huggingface_endpoint/?ref=jina-ai-gmbh.ghost.io\"><u>integración de HuggingFace en Langchain</u></a>. Para usar el modelo, necesitas un token de acceso de HuggingFace que puedes generar como se describe <a href=\"https://huggingface.co/docs/hub/en/security-tokens?ref=jina-ai-gmbh.ghost.io\"><u>aquí</u></a>.</p><p>Puedes seguir el tutorial en <a href=\"https://colab.research.google.com/github/jina-ai/workshops/blob/main/notebooks/embeddings/milvus/milvus_lite_jina_integration.ipynb?ref=jina-ai-gmbh.ghost.io\"><u>Colab</u></a> o <a href=\"https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/milvus/milvus_lite_jina_integration.ipynb?ref=jina-ai-gmbh.ghost.io\"><u>descargando el notebook</u></a>.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://colab.research.google.com/github/jina-ai/workshops/blob/main/notebooks/embeddings/milvus/milvus_lite_jina_integration.ipynb?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Google Colab</div><div class=\"kg-bookmark-description\"></div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://ssl.gstatic.com/colaboratory-static/common/0d8af74d4089ab8b6d127bd74854be98/img/favicon.ico\" alt=\"\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://colab.research.google.com/img/colab_favicon_256px.png\" alt=\"\"></div></a></figure><h3 id=\"about-the-dataset\">Sobre el conjunto de datos</h3><p>El conjunto de datos utilizado en este tutorial fue generado usando GPT-4 y está destinado a replicar los historiales de chat de los canales de Slack de Blueprint AI. Blueprint es una startup de IA ficticia que desarrolla sus propios modelos fundamentales. Puedes descargar el conjunto de datos <a href=\"https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/milvus/chat_history.json?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\"><u>aquí</u></a>.</p><p>Los datos están organizados en <em>canales</em>, cada uno representativo de una colección de hilos de Slack relacionados. Cada canal tiene una etiqueta de tema, una de diez opciones de tema: <em>distribución de modelos</em>, <em>entrenamiento de modelos</em>, <em>ajuste fino de modelos</em>, <em>ética y mitigación de sesgos</em>, <em>retroalimentación de usuarios</em>, <em>ventas</em>, <em>marketing</em>, <em>incorporación de modelos</em>, <em>diseño creativo</em> y <em>gestión de productos</em>. Un participante es conocido como el \"usuario experto\". Puedes usar este campo para validar los resultados de la búsqueda del usuario más experto en un tema, lo cual te mostraremos cómo hacer más adelante.</p><p>Cada canal también contiene un historial de chat con hilos de conversación de hasta 100 mensajes por canal. Cada mensaje en el conjunto de datos contiene la siguiente información:</p><ul><li>El <strong>usuario</strong> que envió el mensaje</li><li>El <strong>texto del mensaje</strong> enviado por el usuario</li><li>La <strong>marca de tiempo</strong> del mensaje</li><li>El <strong>nombre del archivo</strong> que el usuario pudo haber adjuntado al mensaje</li><li>El <strong>ID del mensaje</strong></li><li>El <strong>ID del mensaje padre</strong> si el mensaje estaba dentro de un hilo originado de otro mensaje</li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/image-1.png\" class=\"kg-image\" alt=\"Diagrama que muestra la estructura de un sistema de mensajería, detallando la relación entre las entidades 'Canal' y 'Mensaje'\" loading=\"lazy\" width=\"780\" height=\"450\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/image-1.png 600w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/image-1.png 780w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">Un diagrama UML de la estructura de los datos del chat.</span></figcaption></figure><h3 id=\"set-up-the-environment\">Configurar el entorno</h3><p>Para comenzar, instala todos los componentes necesarios:</p><pre><code class=\"language-Python\">pip install -U pymilvus\npip install -U \"pymilvus[model]\"\npip install langchain\npip install langchain-community\n</code></pre><p>Descarga el conjunto de datos:</p><pre><code class=\"language-Python\">import os\n\nif not os.path.exists(\"chat_history.json\"):\n    !wget https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/milvus/chat_history.json</code></pre><p>Establece tu clave API de Jina AI en una variable de entorno. Puedes generar una <a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><u>aquí</u></a>.</p><pre><code class=\"language-Python\">import os\nimport getpass\n\nos.environ[\"JINAAI_API_KEY\"] = getpass.getpass(prompt=\"Jina AI API Key: \")</code></pre><p>Haz lo mismo con tu Token de Hugging Face. Puedes encontrar cómo generar uno <a href=\"https://huggingface.co/docs/hub/en/security-tokens?ref=jina-ai-gmbh.ghost.io\"><u>aquí</u></a>. Asegúrate de que esté configurado como <code>READ</code> para acceder al <a href=\"https://huggingface.co/docs/hub/en/index?ref=jina-ai-gmbh.ghost.io\"><u>Hugging Face Hub</u></a>.</p><pre><code class=\"language-Python\">os.environ[\"HUGGINGFACEHUB_API_TOKEN\"] = getpass.getpass(prompt=\"Hugging Face Token: \")</code></pre><h3 id=\"create-the-milvus-collection\">Crear la Colección de Milvus</h3><p>Crea la Colección de Milvus para indexar los datos:</p><pre><code class=\"language-Python\">from pymilvus import MilvusClient, DataType\n\n# Especifique un nombre de archivo local como parámetro uri de MilvusClient para usar Milvus Lite\nclient = MilvusClient(\"milvus_jina.db\")\n\nschema = MilvusClient.create_schema(\n    auto_id=True,\n    enable_dynamic_field=True,\n)\n\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, description=\"The Primary Key\", is_primary=True)\nschema.add_field(field_name=\"embedding\", datatype=DataType.FLOAT_VECTOR, description=\"The Embedding Vector\", dim=768)\n\nindex_params = client.prepare_index_params()\nindex_params.add_index(field_name=\"embedding\", metric_type=\"COSINE\", index_type=\"AUTOINDEX\")\n\nclient.create_collection(collection_name=\"milvus_jina\", schema=schema, index_params=index_params)</code></pre><h3 id=\"prepare-the-data\">Preparar los Datos</h3><p>Analizar el historial de chat y extraer los metadatos:</p><pre><code class=\"language-Python\">import json\n\nwith open(\"chat_history.json\", \"r\", encoding=\"utf-8\") as file:\n    chat_data = json.load(file)\n\nmessages = []\nmetadatas = []\n\nfor channel in chat_data:\n  chat_history = channel[\"chat_history\"]\n  chat_topic = channel[\"topic\"]\n  chat_expert = channel[\"expert_user\"]\n  for message in chat_history:\n    text = f\"\"\"{message[\"user\"]}: {message[\"message\"]}\"\"\"\n    messages.append(text)\n    meta = {\n        \"time_stamp\": message[\"time_stamp\"],\n        \"file_name\": message[\"file_name\"],\n        \"parent_message_nr\": message[\"parent_message_nr\"],\n        \"channel\": chat_topic,\n        \"expert\": True if message[\"user\"] == chat_expert else False\n    }\n    metadatas.append(meta)\n</code></pre><h3 id=\"embed-the-chat-data\">Embeber los Datos del Chat</h3><p>Crear embeddings para cada mensaje usando Jina Embeddings v2 para recuperar información relevante del chat:</p><pre><code class=\"language-Python\">from pymilvus.model.dense import JinaEmbeddingFunction\n\njina_ef = JinaEmbeddingFunction(\"jina-embeddings-v2-base-en\")\n\nembeddings = jina_ef.encode_documents(messages)</code></pre><h3 id=\"index-the-chat-data\">Indexar los Datos del Chat</h3><p>Indexar los mensajes, sus embeddings y los metadatos relacionados:</p><pre><code class=\"language-Python\">collection_data = [{\n    \"message\": message,\n    \"embedding\": embedding,\n    \"metadata\": metadata\n} for message, embedding, metadata in zip(messages, embeddings, metadatas)]\n\ndata = client.insert(\n    collection_name=\"milvus_jina\",\n    data=collection_data\n)</code></pre><h3 id=\"query-the-chat-history\">Consultar el Historial del Chat</h3><p>Es momento de hacer una pregunta:</p><pre><code class=\"language-Python\">query = \"Who knows the most about encryption protocols in my team?\"</code></pre><p>Ahora embebemos la consulta y recuperamos los mensajes relevantes. Aquí recuperamos los cinco mensajes más relevantes y los reordenamos usando Jina Reranker v1:</p><pre><code class=\"language-Python\">from pymilvus.model.reranker import JinaRerankFunction\n\nquery_vectors = jina_ef.encode_queries([query])\n\nresults = client.search(\n    collection_name=\"milvus_jina\",\n    data=query_vectors,\n    limit=5,\n)\n\nresults = results[0]\n\nids = [results[i][\"id\"] for i in range(len(results))]\n\nresults = client.get(\n    collection_name=\"milvus_jina\",\n    ids=ids,\n    output_fields=[\"id\", \"message\", \"metadata\"]\n)\n\njina_rf = JinaRerankFunction(\"jina-reranker-v1-base-en\")\n\ndocuments = [results[i][\"message\"] for i in range(len(results))]\nreranked_documents = jina_rf(query, documents)\n\nreranked_messages = []\nfor reranked_document in reranked_documents:\n  idx = reranked_document.index\n  reranked_messages.append(results[idx])</code></pre><p>Por último, generamos una respuesta a la consulta usando Mixtral 7B Instruct y los mensajes reordenados como contexto:</p><pre><code class=\"language-Python\">from langchain.prompts import PromptTemplate\nfrom langchain_community.llms import HuggingFaceEndpoint\n\nllm = HuggingFaceEndpoint(repo_id=\"mistralai/Mixtral-8x7B-Instruct-v0.1\")\n\nprompt = \"\"\"&lt;s&gt;[INST] Context information is below.\\\\n\n        It includes the five most relevant messages to the query, sorted based on their relevance to the query.\\\\n\n        ---------------------\\\\n\n        {context_str}\\\\\\\\n\n        ---------------------\\\\n\n        Given the context information and not prior knowledge,\n        answer the query. Please be brief, concise, and complete.\\\\n\n        If the context information does not contain an answer to the query,\n        respond with \\\\\"No information\\\\\".\\\\n\n        Query: {query_str}[/INST] &lt;/s&gt;\"\"\"\n\nprompt = PromptTemplate(template=prompt, input_variables=[\"query_str\", \"context_str\"])\n\nllm_chain = prompt | llm\n\nanswer = llm_chain.invoke({\"query_str\":query, \"context_str\":reranked_messages})\n\nprint(f\"\\n\\nANSWER:\\n\\n{answer}\")</code></pre><p>La respuesta a nuestra pregunta es:</p><blockquote>\"Basado en la información del contexto, User5 parece ser el más conocedor sobre protocolos de encriptación en tu equipo. Han mencionado que los nuevos protocolos mejoran significativamente la seguridad de los datos, especialmente para implementaciones en la nube.\"</blockquote><p>Si lees los mensajes en <code>chat_history.json</code>, puedes verificar por ti mismo si User5 es el usuario más experto.</p><h2 id=\"summary\">Resumen</h2><p>Hemos visto cómo configurar Milvus Lite, embeber datos de chat usando Jina Embeddings v2, y refinar los resultados de búsqueda con Jina Reranker v1, todo dentro de un caso de uso práctico de búsqueda en un historial de chat de Slack. Milvus Lite simplifica el desarrollo de aplicaciones basadas en Python sin necesidad de configuraciones complejas de servidor. Su integración con Jina Embeddings y Reranker busca aumentar la productividad al facilitar el acceso a información valiosa de tu lugar de trabajo.</p><h2 id=\"use-jina-ai-models-and-milvus-now\"><strong>Usa los Modelos de Jina AI y Milvus Ahora</strong></h2><p><a href=\"https://milvus.io/docs/integrate_with_jina.md?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\"><u>Milvus Lite</u></a> con <a href=\"https://jina.ai/embeddings?ref=jina-ai-gmbh.ghost.io\"><u>Jina Embeddings</u></a> y <a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><u>Reranker</u></a> integrados te proporciona un pipeline de procesamiento completo, listo para usar con solo unas pocas líneas de código.</p><p>Nos encantaría conocer tus casos de uso y hablar sobre cómo la extensión Jina AI Milvus puede adaptarse a las necesidades de tu negocio. Contáctanos a través de <a href=\"https://jina.ai/contact-sales?ref=jina-ai-gmbh.ghost.io\"><u>nuestro sitio web</u></a> o <a href=\"https://discord.jina.ai/?ref=jina-ai-gmbh.ghost.io\"><u>nuestro canal de Discord</u></a> para compartir tus comentarios y mantenerte al día con nuestros últimos modelos. Para preguntas sobre la integración de Milvus y Jina AI, únete a la <a href=\"https://milvus.io/community?ref=jina-ai-gmbh.ghost.io\"><u>comunidad Milvus</u></a>.</p>",
  "comment_id": "665d76034b4b4c0001ba1bb3",
  "feature_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/06/Blog-images--39-.jpg",
  "featured": false,
  "visibility": "public",
  "created_at": "2024-06-03T09:51:31.000+02:00",
  "updated_at": "2024-07-08T21:08:43.000+02:00",
  "published_at": "2024-06-03T16:09:33.000+02:00",
  "custom_excerpt": "Enhance your search applications in Python with Jina Embeddings and Reranker and lightweight, easy-to-deploy Milvus Lite.\n",
  "codeinjection_head": null,
  "codeinjection_foot": null,
  "custom_template": null,
  "canonical_url": null,
  "authors": [
    {
      "id": "65e85e35b22368000152a4bf",
      "name": "Francesco Kruk",
      "slug": "francesco",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/03/Portrait-Picture_Low.jpg",
      "cover_image": null,
      "bio": null,
      "website": null,
      "location": null,
      "facebook": null,
      "twitter": null,
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/francesco/"
    },
    {
      "id": "641c23a2f4d50d003d590474",
      "name": "Saahil Ognawala",
      "slug": "saahil",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2023/03/profile-option-2.jpg",
      "cover_image": null,
      "bio": "Senior Product Manager at Jina AI",
      "website": "http://www.saahilognawala.com/",
      "location": "Munich, DE",
      "facebook": null,
      "twitter": "@saahil",
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/saahil/"
    }
  ],
  "tags": [
    {
      "id": "634a1a8ccebfc1003d8ab706",
      "name": "Tech Blog",
      "slug": "tech-blog",
      "description": null,
      "feature_image": null,
      "visibility": "public",
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "canonical_url": null,
      "accent_color": null,
      "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
    }
  ],
  "primary_author": {
    "id": "65e85e35b22368000152a4bf",
    "name": "Francesco Kruk",
    "slug": "francesco",
    "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/03/Portrait-Picture_Low.jpg",
    "cover_image": null,
    "bio": null,
    "website": null,
    "location": null,
    "facebook": null,
    "twitter": null,
    "meta_title": null,
    "meta_description": null,
    "url": "https://jina-ai-gmbh.ghost.io/author/francesco/"
  },
  "primary_tag": {
    "id": "634a1a8ccebfc1003d8ab706",
    "name": "Tech Blog",
    "slug": "tech-blog",
    "description": null,
    "feature_image": null,
    "visibility": "public",
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "canonical_url": null,
    "accent_color": null,
    "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
  },
  "url": "https://jina-ai-gmbh.ghost.io/podcast/implementing-a-chat-history-rag-with-jina-ai-and-milvus-lite/",
  "excerpt": "Mejora tus aplicaciones de búsqueda en Python con Jina Embeddings y Reranker y Milvus Lite, ligero y fácil de implementar.",
  "reading_time": 6,
  "access": true,
  "comments": false,
  "og_image": null,
  "og_title": null,
  "og_description": null,
  "twitter_image": null,
  "twitter_title": null,
  "twitter_description": null,
  "meta_title": null,
  "meta_description": null,
  "email_subject": null,
  "frontmatter": null,
  "feature_image_alt": "Black background with vivid geometric shapes on the sides and central logos \"Embeddings,\" \"Reranker,\" and \"Milvus.\"",
  "feature_image_caption": null
}