{
  "slug": "jina-classifier-for-high-performance-zero-shot-and-few-shot-classification",
  "id": "6711fbbd708dbe0001924974",
  "uuid": "65c883e0-556a-4079-b07a-66e9e9926717",
  "title": "Jina 分類器 API：高性能零樣本與少樣本分類",
  "html": "<p>分類是嵌入向量的常見下游任務。文本嵌入可以將文本分類成預定義的標籤,用於垃圾郵件檢測或情感分析。多模態嵌入向量,例如 <code>jina-clip-v1</code> 可用於基於內容的過濾或標籤註解。最近,分類也被用於根據複雜度和成本將查詢路由到合適的 LLM,例如簡單的算術查詢可能會被路由到小型語言模型。複雜的推理任務則可能被引導到更強大但成本更高的 LLM。</p><p>今天,我們要介紹 Jina AI 搜索基礎設施的全新 <strong>分類器 API</strong>。它支援 <strong>零樣本</strong> 和 <strong>少樣本</strong> 線上分類,基於我們最新的嵌入模型,如 <code>jina-embeddings-v3</code> 和 <code>jina-clip-v1</code>。分類器 API 基於<a href=\"https://jmlr.org/papers/v7/crammer06a.html?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\">線上被動-積極學習</a>,使其能夠即時適應新資料。使用者可以從零樣本分類器開始並立即使用。然後,他們可以通過提交新範例或在概念偏移發生時逐步更新分類器。這使得跨各種內容類型的高效、可擴展的分類成為可能,而<em>無需</em>大量初始標記資料。使用者也可以發布他們的分類器供公開使用。當我們發布新的嵌入模型時,例如即將推出的多語言 <code>jina-clip-v2</code>,使用者可以通過分類器 API 立即使用它們,確保分類功能保持最新。</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://jina.ai/classifier?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Classifier API</div><div class=\"kg-bookmark-description\">High performance classifier for image and text classification.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jina.ai/icons/favicon-128x128.png\" alt=\"\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jina.ai/banner-classifier.png\" alt=\"\" onerror=\"this.style.display = 'none'\"></div></a></figure><h2 id=\"zero-shot-classification\">零樣本分類</h2><p>分類器 API 提供強大的零樣本分類功能,無需預先訓練標記資料即可對文字或圖像進行分類。每個分類器都從零樣本能力開始,之後可以通過額外的訓練資料或更新來增強 - 我們將在下一節探討這個主題。</p><h3 id=\"example-1-route-llm-requests\">範例 1：路由 LLM 請求</h3><p>這是使用分類器 API 進行 LLM 查詢路由的示例：</p><pre><code class=\"language-bash\">curl https://api.jina.ai/v1/classify \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY_HERE\" \\\n  -d '{\n    \"model\": \"jina-embeddings-v3\",\n    \"labels\": [\n      \"Simple task\",\n      \"Complex reasoning\",\n      \"Creative writing\"\n    ],\n    \"input\": [\n      \"Calculate the compound interest on a principal of $10,000 invested for 5 years at an annual rate of 5%, compounded quarterly.\",\n      \"分析使用CRISPR基因编辑技术在人类胚胎中的伦理影响。考虑潜在的医疗益处和长期社会后果。\",\n      \"AIが自意識を持つディストピアの未来を舞台にした短編小説を書いてください。人間とAIの関係や意識の本質をテーマに探求してください。\",\n      \"Erklären Sie die Unterschiede zwischen Merge-Sort und Quicksort-Algorithmen in Bezug auf Zeitkomplexität, Platzkomplexität und Leistung in der Praxis.\",\n      \"Write a poem about the beauty of nature and its healing power on the human soul.\",\n      \"Translate the following sentence into French: The quick brown fox jumps over the lazy dog.\"\n    ]\n  }'</code></pre><p>這個示例展示了使用 <code>jina-embeddings-v3</code> 將多種語言(英語、中文、日語和德語)的使用者查詢路由到三個類別,這些類別對應於三種不同規模的 LLM。API 回應格式如下：</p><pre><code class=\"language-json\">{\n  \"usage\": {\"total_tokens\": 256, \"prompt_tokens\": 256},\n  \"data\": [\n    {\"object\": \"classification\", \"index\": 0, \"prediction\": \"Simple task\", \"score\": 0.35216382145881653},\n    {\"object\": \"classification\", \"index\": 1, \"prediction\": \"Complex reasoning\", \"score\": 0.34310275316238403},\n    {\"object\": \"classification\", \"index\": 2, \"prediction\": \"Creative writing\", \"score\": 0.3487184941768646},\n    {\"object\": \"classification\", \"index\": 3, \"prediction\": \"Complex reasoning\", \"score\": 0.35207709670066833},\n    {\"object\": \"classification\", \"index\": 4, \"prediction\": \"Creative writing\", \"score\": 0.3638903796672821},\n    {\"object\": \"classification\", \"index\": 5, \"prediction\": \"Simple task\", \"score\": 0.3561534285545349}\n  ]\n}</code></pre><p>回應包括：</p><ul><li><code>usage</code>：token 使用量的相關資訊。</li><li><code>data</code>：分類結果陣列,每個輸入對應一個結果。<ul><li>每個結果包含預測的標籤 (<code>prediction</code>) 和置信度分數 (<code>score</code>)。每個類別的 <code>score</code> 是通過 softmax 正規化計算的 - 對於零樣本,它基於輸入和標籤嵌入之間的餘弦相似度<a href=\"https://jina.ai/news/jina-embeddings-v3-a-frontier-multilingual-embedding-model?ref=jina-ai-gmbh.ghost.io#parameter-task\" rel=\"noreferrer\">在 <code>classification</code> task-LoRA 下</a>;而對於少樣本,它基於每個類別學習到的輸入嵌入的線性變換 - 產生的機率值在所有類別中總和為 1。</li><li><code>index</code> 對應於原始請求中輸入的位置。</li></ul></li></ul><h3 id=\"example-2-categorize-image-text\">範例 2：對圖像和文字進行分類</h3><p>讓我們探討一個使用 <code>jina-clip-v1</code> 的多模態示例。這個模型可以同時對文字和圖像進行分類,非常適合用於跨不同媒體類型的內容分類。考慮以下 API 呼叫：</p><pre><code class=\"language-bash\">curl https://api.jina.ai/v1/classify \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY_HERE\" \\\n  -d '{\n    \"model\": \"jina-clip-v1\",\n    \"labels\": [\n      \"Food and Dining\",\n      \"Technology and Gadgets\",\n      \"Nature and Outdoors\",\n      \"Urban and Architecture\"\n    ],\n    \"input\": [\n      {\"text\": \"A sleek smartphone with a high-resolution display and multiple camera lenses\"},\n      {\"text\": \"Fresh sushi rolls served on a wooden board with wasabi and ginger\"},\n      {\"image\": \"https://picsum.photos/id/11/367/267\"},\n      {\"image\": \"https://picsum.photos/id/22/367/267\"},\n      {\"text\": \"Vibrant autumn leaves in a dense forest with sunlight filtering through\"},\n      {\"image\": \"https://picsum.photos/id/8/367/267\"}\n    ]\n  }'</code></pre><p>注意我們如何在請求中上傳圖像,你也可以使用 <code>base64</code> 字串來表示圖像。API 返回以下分類結果：</p><pre><code class=\"language-json\">{\n  \"usage\": {\"total_tokens\": 12125, \"prompt_tokens\": 12125},\n  \"data\": [\n    {\"object\": \"classification\", \"index\": 0, \"prediction\": \"Technology and Gadgets\", \"score\": 0.30329811573028564},\n    {\"object\": \"classification\", \"index\": 1, \"prediction\": \"Food and Dining\", \"score\": 0.2765541970729828},\n    {\"object\": \"classification\", \"index\": 2, \"prediction\": \"Nature and Outdoors\", \"score\": 0.29503118991851807},\n    {\"object\": \"classification\", \"index\": 3, \"prediction\": \"Urban and Architecture\", \"score\": 0.2648046910762787},\n    {\"object\": \"classification\", \"index\": 4, \"prediction\": \"Nature and Outdoors\", \"score\": 0.3133063316345215},\n    {\"object\": \"classification\", \"index\": 5, \"prediction\": \"Technology and Gadgets\", \"score\": 0.27474141120910645}\n  ]\n}</code></pre><h3 id=\"example-3-detect-if-jina-reader-gets-genuine-content\">範例 3：檢測 Jina Reader 是否獲得真實內容</h3><p>零樣本分類的一個有趣應用是通過 <a href=\"https://jina.ai/reader?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\">Jina Reader</a> 判斷網站的可訪問性。雖然這看起來是個簡單的任務,但在實際操作中卻相當複雜。被阻擋的訊息因網站而異,使用不同語言並引述各種原因(付費牆、速率限制、伺服器中斷)。這種多樣性使得僅依靠正則表達式或固定規則來捕捉所有情況變得具有挑戰性。</p><pre><code class=\"language-python\">import requests\nimport json\n\nresponse1 = requests.get('https://r.jina.ai/https://jina.ai')\n\nurl = 'https://api.jina.ai/v1/classify'\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer $YOUR_API_KEY_HERE'\n}\ndata = {\n    'model': 'jina-embeddings-v3',\n    'labels': ['Blocked', 'Accessible'],\n    'input': [{'text': response1.text[:8000]}]\n}\nresponse2 = requests.post(url, headers=headers, data=json.dumps(data))\n\nprint(response2.text)</code></pre><p>這個腳本通過 <code>r.jina.ai</code> 獲取內容,並使用分類器 API 將其分類為 <code>\"Blocked\"</code> 或 <code>\"Accessible\"</code>。例如,<a href=\"https://r.jina.ai/https://www.crunchbase.com/organization/jina-ai?ref=jina-ai-gmbh.ghost.io\">https://r.jina.ai/https://www.crunchbase.com/organization/jina-ai</a> 可能會因訪問限制而被標記為 <code>\"Blocked\"</code>,而 <a href=\"https://r.jina.ai/https://jina.ai?ref=jina-ai-gmbh.ghost.io\">https://r.jina.ai/https://jina.ai</a> 應該是 \"Accessible\"。</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-json\">{\"usage\":{\"total_tokens\":185,\"prompt_tokens\":185},\"data\":[{\"object\":\"classification\",\"index\":0,\"prediction\":\"Blocked\",\"score\":0.5392698049545288}]}</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">分類器 API 可以有效區分 Jina Reader 的真實內容和被阻擋的結果。</span></p></figcaption></figure><p>這個示例利用 <code>jina-embeddings-v3</code>,為監控網站可訪問性提供了一種快速、自動化的方式,尤其適用於多語言環境下的內容聚合或網路爬蟲系統。</p><h3 id=\"example-4-filtering-statements-from-opinions-for-grounding\">範例 4：為基礎支撐過濾陳述與觀點</h3><p>零樣本分類的另一個有趣應用是在長篇文件中過濾出與意見相對的陳述性語句。請注意，分類器本身無法判斷某事是否是事實真相。相反地，它識別那些「寫作風格像是一個事實陳述」的文字，這些文字隨後可以透過事實核查 API 來驗證，而這通常成本很高。這個兩步驟流程是有效事實檢查的關鍵：首先過濾掉所有意見和感受，然後將剩餘的陳述送去核實。</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://jina.ai/news/fact-checking-with-new-grounding-api-in-jina-reader?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Fact-Checking with New Grounding API in Jina Reader</div><div class=\"kg-bookmark-description\">With the new g.jina.ai, you can easily ground statements to reduce LLM hallucinations or improve the integrity of human-written content.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jina.ai/icons/favicon-128x128.png\" alt=\"\"><span class=\"kg-bookmark-publisher\">Google Docs</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/10/grounding.png\" alt=\"\" onerror=\"this.style.display = 'none'\"></div></a></figure><p>考慮這段關於 1960 年代太空競賽的段落：</p><pre><code class=\"language-json\">The Space Race of the 1960s was a breathtaking testament to human ingenuity. When the Soviet Union launched Sputnik 1 on October 4, 1957, it sent shockwaves through American society, marking the undeniable start of a new era. The silvery beeping of that simple satellite struck fear into the hearts of millions, as if the very stars had betrayed Western dominance. NASA was founded in 1958 as America's response, and they poured an astounding $28 billion into the Apollo program between 1960 and 1973. While some cynics claimed this was a waste of resources, the technological breakthroughs were absolutely worth every penny spent. On July 20, 1969, Neil Armstrong and Buzz Aldrin achieved the most magnificent triumph in human history by walking on the moon, their footprints marking humanity's destiny among the stars. The Soviet space program, despite its early victories, ultimately couldn't match the superior American engineering and determination. The moon landing was not just a victory for America - it represented the most inspiring moment in human civilization, proving that our species was meant to reach beyond our earthly cradle.\n</code></pre><p>這段文字有意混合了不同類型的寫作 - 從陳述性語句（如「史普尼克 1 號於 1959 年 10 月 4 日發射」），到明顯的意見（「令人驚嘆的見證」）、情感語言（「引起了人心中的恐懼」），以及解釋性陳述（「標誌著一個新時代的無可爭議的開始」）。</p><p>零樣本分類器的工作<strong>純粹是語意層面的</strong> - 它識別一段文字是以陳述方式書寫還是以意見/解釋方式書寫。例如，<code>\"The Soviet Union launched Sputnik 1 on October 4, 1959\"</code> 是以陳述方式書寫的，而 <code>\"The Space Race was a breathtaking testament\"</code> 則明顯是以意見方式書寫的。</p><pre><code class=\"language-python\">headers = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {API_KEY}'\n}\n\n# Step 1: Split text and classify\nchunks = [chunk.strip() for chunk in text.split('.') if chunk.strip()]\nlabels = [\n    \"subjective, opinion, feeling, personal experience, creative writing, position\",\n    \"fact\"\n]\n\n# Classify chunks\nclassify_response = requests.post(\n    'https://api.jina.ai/v1/classify',\n    headers=headers,\n    json={\n        \"model\": \"jina-embeddings-v3\",\n        \"input\": [{\"text\": chunk} for chunk in chunks],\n        \"labels\": labels\n    }\n)\n\n# Sort chunks\nsubjective_chunks = []\nfactual_chunks = []\nfor chunk, classification in zip(chunks, classify_response.json()['data']):\n    if classification['prediction'] == labels[0]:\n        subjective_chunks.append(chunk)\n    else:\n        factual_chunks.append(chunk)\n\nprint(\"\\nSubjective statements:\", subjective_chunks)\nprint(\"\\nFactual statements:\", factual_chunks)</code></pre><p>你會得到：</p><pre><code class=\"language-json\">Subjective statements: ['The Space Race of the 1960s was a breathtaking testament to human ingenuity', 'The silvery beeping of that simple satellite struck fear into the hearts of millions, as if the very stars had betrayed Western dominance', 'While some cynics claimed this was a waste of resources, the technological breakthroughs were absolutely worth every penny spent', \"The Soviet space program, despite its early victories, ultimately couldn't match the superior American engineering and determination\"]\n\nFactual statements: ['When the Soviet Union launched Sputnik 1 on October 4, 1957, it sent shockwaves through American society, marking the undeniable start of a new era', \"NASA was founded in 1958 as America's response, and they poured an astounding $28 billion into the Apollo program between 1960 and 1973\", \"On July 20, 1969, Neil Armstrong and Buzz Aldrin achieved the most magnificent triumph in human history by walking on the moon, their footprints marking humanity's destiny among the stars\", 'The moon landing was not just a victory for America - it represented the most inspiring moment in human civilization, proving that our species was meant to reach beyond our earthly cradle']</code></pre><p>請記住，某事以陳述方式書寫並不意味著它就是真實的。這就是為什麼我們需要第二步 - 將這些類似陳述的語句輸入到事實核查 API 進行實際的事實驗證。例如，讓我們驗證這個陳述：<code>\"NASA was founded in 1958 as America's response, and they poured an astounding $28 billion into the Apollo program between 1960 and 1973\"</code>，使用以下代碼。</p><pre><code class=\"language-python\">ground_headers = {\n        'Accept': 'application/json',\n        'Authorization': f'Bearer {API_KEY}'\n    }\n\nground_response = requests.get(\n    f'https://g.jina.ai/{quote(factual_chunks[1])}',\n    headers=ground_headers\n)\n\nprint(ground_response.json())</code></pre><p>這會給你：</p><pre><code class=\"language-json\">{'code': 200, 'status': 20000, 'data': {'factuality': 1, 'result': True, 'reason': \"The statement is supported by multiple references confirming NASA's founding in 1958 and the significant financial investment in the Apollo program. The $28 billion figure aligns with the data provided in the references, which detail NASA's expenditures during the Apollo program from 1960 to 1973. Additionally, the context of NASA's budget peaking during this period further substantiates the claim. Therefore, the statement is factually correct based on the available evidence.\", 'references': [{'url': 'https://en.wikipedia.org/wiki/Budget_of_NASA', 'keyQuote': \"NASA's budget peaked in 1964–66 when it consumed roughly 4% of all federal spending. The agency was building up to the first Moon landing and the Apollo program was a top national priority, consuming more than half of NASA's budget.\", 'isSupportive': True}, {'url': 'https://en.wikipedia.org/wiki/NASA', 'keyQuote': 'Established in 1958, it succeeded the National Advisory Committee for Aeronautics (NACA)', 'isSupportive': True}, {'url': 'https://nssdc.gsfc.nasa.gov/planetary/lunar/apollo.html', 'keyQuote': 'More details on Apollo lunar landings', 'isSupportive': True}, {'url': 'https://usafacts.org/articles/50-years-after-apollo-11-moon-landing-heres-look-nasas-budget-throughout-its-history/', 'keyQuote': 'NASA has spent its money so far.', 'isSupportive': True}, {'url': 'https://www.nasa.gov/history/', 'keyQuote': 'Discover the history of our human spaceflight, science, technology, and aeronautics programs.', 'isSupportive': True}, {'url': 'https://www.nasa.gov/the-apollo-program/', 'keyQuote': 'Commander for Apollo 11, first to step on the lunar surface.', 'isSupportive': True}, {'url': 'https://www.planetary.org/space-policy/cost-of-apollo', 'keyQuote': 'A rich data set tracking the costs of Project Apollo, free for public use. Includes unprecedented program-by-program cost breakdowns.', 'isSupportive': True}, {'url': 'https://www.statista.com/statistics/1342862/nasa-budget-project-apollo-costs/', 'keyQuote': 'NASA&amp;#x27;s monetary obligations compared to Project Apollo&amp;#x27;s total costs from 1960 to 1973 (in million U.S. dollars)', 'isSupportive': True}], 'usage': {'tokens': 10640}}}</code></pre><p>事實性得分為 1，事實核查 API 確認這個陳述在歷史事實中有良好的根據。這種方法開啟了令人著迷的可能性，從分析歷史文件到即時核實新聞文章。通過結合零樣本分類和事實驗證，我們創建了一個強大的自動化信息分析管道 - 首先過濾掉意見，然後根據可信來源驗證剩餘的陳述。</p><h3 id=\"remarks-on-zero-shot-classification\">零樣本分類的注意事項</h3><h4 id=\"using-semantic-labels\">使用語意標籤</h4><p>在使用零樣本分類時，<strong>使用有語意意義的標籤而不是抽象符號或數字至關重要。</strong>例如，<code>\"Technology\"</code>、<code>\"Nature\"</code> 和 <code>\"Food\"</code> 比 <code>\"Class1\"</code>、<code>\"Class2\"</code>、<code>\"Class3\"</code> 或 <code>\"0\"</code>、<code>\"1\"</code>、<code>\"2\"</code> 更有效。<code>\"Positive sentiment\"</code> 比 <code>\"Positive\"</code> 和 <code>\"True\"</code> 更有效。嵌入模型理解語意關係，所以描述性標籤能讓模型利用其預訓練知識進行更準確的分類。我們之前的文章探討了如何創建有效的語意標籤以獲得更好的分類結果。</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://jina.ai/news/rephrased-labels-improve-zero-shot-text-classification-30?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Rephrased Labels Improve Zero-Shot Text Classification by 30%</div><div class=\"kg-bookmark-description\">When using embedding models for zero-shot classification, rephrasing the class label to \"This is seriously about 'LABEL'\" gives higher accuracy vs. using LABEL alone. But how, and why?</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jina.ai/icons/favicon-128x128.png\" alt=\"\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/07/Heading.jpg\" alt=\"\" onerror=\"this.style.display = 'none'\"></div></a></figure><h4 id=\"stateless-nature\">無狀態性質</h4><p>零樣本分類本質上是無狀態的，這與傳統機器學習方法不同。<strong>這意味著給定相同的輸入和模型，無論誰使用 API 或何時使用，結果都將保持一致。</strong>模型不會根據它執行的分類進行學習或更新；每個任務都是獨立的。這使得可以立即使用而無需設置或訓練，並且提供了在 API 調用之間改變類別的靈活性。</p><p>這種無狀態性質與少樣本和在線學習方法形成鮮明對比，我們將在接下來探討這些方法。在這些方法中，模型可以適應新的例子，可能會隨著時間或用戶的不同而產生不同的結果。</p><h2 id=\"few-shot-classification\">少樣本分類</h2><p>少樣本分類提供了一種使用最少標記數據來創建和更新分類器的簡單方法。這種方法提供兩個主要端點：<code>train</code> 和 <code>classify</code>。</p><p><code>train</code> 端點讓你可以用一小組示例創建或更新分類器。你第一次調用 <code>train</code> 將返回一個</p><code>classifier_id</code> 可用於當您有新資料、發現資料分布變化或需要新增類別時的後續訓練。這種靈活的方法使您的分類器能夠隨時間演進，適應新的模式和類別而無需從頭開始。</p><p>與零樣本分類類似，您將使用 <code>classify</code> 端點進行預測。主要區別在於您需要在請求中包含您的 <code>classifier_id</code>，但不需要提供候選標籤，因為它們已經是您訓練模型的一部分。</p><h3 id=\"example-train-a-support-ticket-assigner\">範例：訓練客服工單分配器</h3><p>讓我們通過一個為快速成長的科技新創公司分類客服工單並分配給不同團隊的範例來探索這些功能。</p><h4 id=\"initial-training\">初始訓練</h4><pre><code class=\"language-bash\">curl -X 'POST' \\\n  'https://api.jina.ai/v1/train' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer YOUR_API_KEY_HERE' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"model\": \"jina-embeddings-v3\",\n  \"access\": \"private\",\n  \"input\": [\n    {\n      \"text\": \"I cant log into my account after the latest app update.\",\n      \"label\": \"team1\"\n    },\n    {\n      \"text\": \"My subscription renewal failed due to an expired credit card.\",\n      \"label\": \"team2\"\n    },\n    {\n      \"text\": \"How do I export my data from the platform?\",\n      \"label\": \"team3\"\n    }\n  ],\n  \"num_iters\": 10\n}'</code></pre><p>請注意，在少樣本學習中，即使 <code>team1</code> <code>team2</code> 這樣的類別標籤沒有內在的語義含義，我們也可以自由使用它們。在回應中，您將獲得一個代表此新建分類器的 <code>classifier_id</code>。</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-json\">{\n  \"classifier_id\": \"918c0846-d6ae-4f34-810d-c0c7a59aee14\",\n  \"num_samples\": 3,\n}\n</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">記下這個 </span><code spellcheck=\"false\" style=\"white-space: pre-wrap;\"><span>classifier_id</span></code><span style=\"white-space: pre-wrap;\">，您稍後需要用它來引用這個分類器。</span></p></figcaption></figure><h4 id=\"updating-classifier-to-adapt-team-restructuring\">更新分類器以適應團隊重組</h4><p>隨著示例公司的成長，新類型的問題出現，團隊結構也發生變化。少樣本分類的優點在於能夠快速適應這些變化。我們可以輕鬆地通過提供 <code>classifier_id</code> 和新的範例來更新分類器，引入新的團隊類別（如 <code>team4</code>）或根據組織的發展重新分配現有問題類型給不同的團隊。</p><pre><code class=\"language-bash\">curl -X 'POST' \\\n  'https://api.jina.ai/v1/train' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer YOUR_API_KEY_HERE' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"classifier_id\": \"b36b7b23-a56c-4b52-a7ad-e89e8f5439b6\",\n  \"input\": [\n    {\n      \"text\": \"Im getting a 404 error when trying to access the new AI chatbot feature.\",\n      \"label\": \"team4\"\n    },\n    {\n      \"text\": \"The latest security patch is conflicting with my company firewall.\",\n      \"label\": \"team1\"\n    },\n    {\n      \"text\": \"I need help setting up SSO for my organization account.\",\n      \"label\": \"team5\"\n    }\n  ],\n  \"num_iters\": 10\n}'</code></pre><h4 id=\"using-a-trained-classifier\">使用已訓練的分類器</h4><p>在推論階段，您只需提供輸入文本和 <code>classifier_id</code>。API 會處理輸入和先前訓練的類別之間的映射，基於分類器的當前狀態返回最適合的標籤。</p><pre><code class=\"language-bash\">curl -X 'POST' \\\n  'https://api.jina.ai/v1/classify' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer YOUR_API_KEY_HERE' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"classifier_id\": \"b36b7b23-a56c-4b52-a7ad-e89e8f5439b6\",\n  \"input\": [\n    {\n      \"text\": \"The new feature is causing my dashboard to load slowly.\"\n    },\n    {\n      \"text\": \"I need to update my billing information for tax purposes.\"\n    }\n  ]\n}'</code></pre><p>少樣本模式有兩個獨特的參數。</p><h3 id=\"parameter-numiters\">參數 <code>num_iters</code></h3><p><code>num_iters</code> 參數調整分類器從訓練範例中學習的強度。雖然預設值 10 適用於大多數情況，但您可以根據<strong>對訓練資料的信心</strong>策略性地調整這個值。對於對分類至關重要的高品質範例，增加 <code>num_iters</code> 以強化其重要性。相反，對於較不可靠的範例，降低 <code>num_iters</code> 以最小化它們對分類器性能的影響。這個參數也可以用於實現時間感知學習，其中較新的範例獲得較高的迭代次數，以適應不斷變化的模式，同時保持歷史知識。</p><h3 id=\"parameter-access\">參數 <code>access</code></h3><p><code>access</code> 參數讓您控制誰可以使用您的分類器。預設情況下，分類器是私人的，只有您可以訪問。將 access 設置為 \"public\" 允許任何擁有您的 <code>classifier_id</code> 的人<strong>使用他們自己的 API key 和 token 配額來使用它</strong>。這使得分享分類器成為可能，同時保持隱私性 - 使用者無法看到您的訓練資料或配置，您也無法看到他們的分類請求。此參數僅與少樣本分類相關，因為零樣本分類器是無狀態的。無需分享零樣本分類器，因為無論誰發出請求，相同的請求總是會產生相同的回應。</p><h3 id=\"remarks-on-few-shot-learning\">關於少樣本學習的備註</h3><p>我們 API 中的少樣本分類具有一些值得注意的獨特特性。與傳統機器學習模型不同，我們的實現使用單次線上學習 - 訓練範例被處理以更新分類器的權重，但之後不會被存儲。這意味著您無法檢索歷史訓練資料，但它確保了更好的隱私性和資源效率。</p><p>雖然少樣本學習很強大，但它確實需要一個預熱期才能超越零樣本分類。我們的基準測試顯示，通常需要 200-400 個訓練範例才能看到更優的性能。但是，您不需要一開始就為所有類別提供範例 - 分類器可以隨時間擴展以適應新的類別。只需注意，新增的類別可能會經歷短暫的冷啟動期或類別不平衡，直到提供足夠的範例。</p><h2 id=\"benchmark\">基準測試</h2><p>在我們的基準分析中，我們評估了零樣本和少樣本方法在各種數據集上的表現，包括情緒檢測（6 個類別）和垃圾郵件檢測（2 個類別）等文本分類任務，以及像 CIFAR10（10 個類別）這樣的圖像分類任務。評估框架使用標準的訓練-測試分割，零樣本不需要訓練資料，而少樣本使用部分訓練集。我們追踪了關鍵指標，如訓練集大小和目標類別數量，允許進行受控比較。為確保穩健性，特別是對於少樣本學習，每個輸入都經過多次訓練迭代。我們將這些現代方法與傳統基準（如線性 SVM 和 RBF SVM）進行比較，以提供其性能的背景參考。</p><figure class=\"kg-card kg-gallery-card kg-width-wide kg-card-hascaption\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/10/Multi-class-classification.svg\" width=\"445\" height=\"460\" loading=\"lazy\" alt=\"\"></div><div class=\"kg-gallery-image\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/10/Image-classification.svg\" width=\"445\" height=\"460\" loading=\"lazy\" alt=\"\"></div><div class=\"kg-gallery-image\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/10/Text-classification--1-.svg\" width=\"445\" height=\"460\" loading=\"lazy\" alt=\"\"></div></div></div><figcaption><p><span style=\"white-space: pre-wrap;\">圖中繪製了 F1 分數。有關完整的基準設置，請查看</span><a href=\"https://docs.google.com/spreadsheets/d/15vK6VPlcAM4e7lSJw6IeVtTtyariXEVQurDTFKXwwtY/edit?gid=249584681&ref=jina-ai-gmbh.ghost.io#gid=249584681\"><span style=\"white-space: pre-wrap;\">這個 Google 試算表</span></a><span style=\"white-space: pre-wrap;\">。</span></p></figcaption></figure><p>F1 圖表揭示了三個任務的有趣模式。毫不意外地，零樣本分類從一開始就表現穩定，不受訓練數據量的影響。相比之下，小樣本學習呈現出快速的學習曲線，雖然初始表現較低，但隨著訓練數據增加，很快就超過了零樣本的表現。兩種方法最終在<strong>大約 400 個樣本時達到相近的準確率</strong>，其中小樣本保持些微優勢。這種模式在多分類和圖像分類場景中都成立，表明當有一些訓練數據時，小樣本學習特別有優勢，而零樣本即使在沒有任何訓練樣本的情況下也能提供可靠的表現。下表從 API 使用者的角度總結了零樣本和小樣本分類的差異。</p>\n<!--kg-card-begin: html-->\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>零樣本</th>\n<th>小樣本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>主要使用場景</td>\n<td>一般分類的預設解決方案</td>\n<td>用於 v3/clip-v1 領域外或時效性數據</td>\n</tr>\n<tr>\n<td>需要訓練數據</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td>/train 中需要標籤</td>\n<td>不適用</td>\n<td>是</td>\n</tr>\n<tr>\n<td>/classify 中需要標籤</td>\n<td>是</td>\n<td>否</td>\n</tr>\n<tr>\n<td>需要分類器 ID</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td>需要語義標籤</td>\n<td>是</td>\n<td>否</td>\n</tr>\n<tr>\n<td>狀態管理</td>\n<td>無狀態</td>\n<td>有狀態</td>\n</tr>\n<tr>\n<td>持續模型更新</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td>存取控制</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td>最大類別數</td>\n<td>256</td>\n<td>16</td>\n</tr>\n<tr>\n<td>最大分類器數</td>\n<td>不適用</td>\n<td>16</td>\n</tr>\n<tr>\n<td>每個請求的最大輸入數</td>\n<td>1,024</td>\n<td>1,024</td>\n</tr>\n<tr>\n<td>每個輸入的最大 Token 長度</td>\n<td>8,192 tokens</td>\n<td>8,192 tokens</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: html-->\n<h2 id=\"summary\">總結</h2><p>Classifier API 為文本和圖像內容提供強大的零樣本和小樣本分類功能，由先進的嵌入模型如 <code>jina-embeddings-v3</code> 和 <code>jina-clip-v1</code> 驅動。我們的基準測試顯示，零樣本分類無需訓練數據即可提供可靠的表現，支援多達 256 個類別，這使其成為大多數任務的絕佳起點。雖然小樣本學習通過訓練數據可以達到稍微更好的準確率，我們建議從零樣本分類開始，因為它能立即產生結果且具有靈活性。</p><p>API 的多功能性支援各種應用，從 LLM 查詢路由到網站無障礙檢測和多語言內容分類。無論您是從零樣本開始，還是為特定案例轉向小樣本學習，API 都維持一致的介面，可以無縫整合到您的流程中。我們特別期待看到開發者如何在他們的應用中運用這個 API，未來我們還將推出對 <code>jina-clip-v2</code> 等新嵌入模型的支援。</p>",
  "comment_id": "6711fbbd708dbe0001924974",
  "feature_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/10/classifier-header-1.png",
  "featured": true,
  "visibility": "public",
  "created_at": "2024-10-18T08:10:05.000+02:00",
  "updated_at": "2024-10-24T11:04:33.000+02:00",
  "published_at": "2024-10-22T10:57:15.000+02:00",
  "custom_excerpt": "New Classifier API offers zero-shot and few-shot classification for text and images. Start classifying content instantly or train it with your own examples.",
  "codeinjection_head": null,
  "codeinjection_foot": null,
  "custom_template": null,
  "canonical_url": null,
  "authors": [
    {
      "id": "62e3d0ef9cd5ce003d5e49e2",
      "name": "Jina AI",
      "slug": "company",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/08/Jjqb-JeY_400x400.jpg",
      "cover_image": null,
      "bio": "Creator of neural search, contributor to open source.",
      "website": "https://www.jina.ai",
      "location": "Berlin",
      "facebook": null,
      "twitter": "@JinaAI_",
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/company/"
    }
  ],
  "tags": [
    {
      "id": "655b2782bb728c000101bed7",
      "name": "Press",
      "slug": "press",
      "description": null,
      "feature_image": null,
      "visibility": "public",
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "canonical_url": null,
      "accent_color": null,
      "url": "https://jina-ai-gmbh.ghost.io/tag/press/"
    }
  ],
  "primary_author": {
    "id": "62e3d0ef9cd5ce003d5e49e2",
    "name": "Jina AI",
    "slug": "company",
    "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/08/Jjqb-JeY_400x400.jpg",
    "cover_image": null,
    "bio": "Creator of neural search, contributor to open source.",
    "website": "https://www.jina.ai",
    "location": "Berlin",
    "facebook": null,
    "twitter": "@JinaAI_",
    "meta_title": null,
    "meta_description": null,
    "url": "https://jina-ai-gmbh.ghost.io/author/company/"
  },
  "primary_tag": {
    "id": "655b2782bb728c000101bed7",
    "name": "Press",
    "slug": "press",
    "description": null,
    "feature_image": null,
    "visibility": "public",
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "canonical_url": null,
    "accent_color": null,
    "url": "https://jina-ai-gmbh.ghost.io/tag/press/"
  },
  "url": "https://jina-ai-gmbh.ghost.io/podcast/jina-classifier-for-high-performance-zero-shot-and-few-shot-classification/",
  "excerpt": "全新的 Classifier API 為文字和圖片提供零樣本（zero-shot）和少樣本（few-shot）分類功能。立即開始對內容進行分類，或使用您自己的範例進行訓練。",
  "reading_time": 16,
  "access": true,
  "comments": false,
  "og_image": null,
  "og_title": null,
  "og_description": null,
  "twitter_image": null,
  "twitter_title": null,
  "twitter_description": null,
  "meta_title": null,
  "meta_description": null,
  "email_subject": null,
  "frontmatter": null,
  "feature_image_alt": "Abstract artistic portrait using a montage of colorful squares and scattered text.",
  "feature_image_caption": null
}