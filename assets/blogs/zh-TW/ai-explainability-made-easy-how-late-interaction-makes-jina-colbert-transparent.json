{
  "slug": "ai-explainability-made-easy-how-late-interaction-makes-jina-colbert-transparent",
  "id": "6672af263ce1950001eed6a7",
  "uuid": "44371108-082d-4fb0-a28d-4f86fc02ac14",
  "title": "AI 可解釋性變得簡單：Late Interaction 如何使 Jina-ColBERT 具備透明度",
  "html": "<p>AI 模型長期以來的問題之一是神經網路無法解釋它們如何產生輸出結果。這是否真的是人工智能的一個實質問題並不總是很清楚。當我們要求人類解釋他們的推理過程時，他們通常會進行合理化解釋，而且通常完全不知道自己在這麼做，給出最合理的解釋，但卻沒有任何跡象顯示他們腦中真正發生了什麼。</p><p>我們已經知道如何讓 AI 模型做出合理的回答。也許人工智能在這方面比我們願意承認的更像人類。</p><p>五十年前，美國哲學家 Thomas Nagel 寫了一篇影響深遠的論文《What Is It Like To Be A Bat?》。他認為作為一隻蝙蝠必定有其獨特的體驗：以蝙蝠的方式看世界，以蝙蝠的方式感知存在。然而，根據 Nagel 的觀點，即使我們知道關於蝙蝠大腦、蝙蝠感官和蝙蝠身體如何運作的所有可知事實，我們仍然不會知道作為一隻蝙蝠是什麼感覺。</p><p>AI 可解釋性也是同樣的問題。我們知道關於給定 AI 模型的所有事實。它只是一系列矩陣中排列的有限精度數字。我們可以輕易地驗證每個模型輸出都是正確算術的結果，但這些信息作為解釋是毫無用處的。</p><p>對於這個問題，無論是對 AI 還是對人類都沒有通用的解決方案。然而，ColBERT 架構，特別是當它作為重排序器使用\"延遲交互\"時，使您能夠從模型中獲得有意義的洞察，了解為什麼它在特定情況下會給出特定結果。</p><p>本文將向您展示延遲交互如何實現可解釋性，使用的是 Jina-ColBERT 模型 <a href=\"https://huggingface.co/jinaai/jina-colbert-v1-en?ref=jina-ai-gmbh.ghost.io\"><code>jina-colbert-v1-en</code></a> 和 <a href=\"https://matplotlib.org/?ref=jina-ai-gmbh.ghost.io\">Matplotlib Python 庫</a>。</p><h2 id=\"a-brief-overview-of-colbert\">ColBERT 簡介</h2><p>ColBERT 是在 <a href=\"https://doi.org/10.1145/3397271.3401075?ref=jina-ai-gmbh.ghost.io\">Khattab & Zaharia (2020)</a> 中提出的，作為對 Google 在 2018 年首次提出的 <a href=\"https://doi.org/10.18653/v1/N19-1423?ref=jina-ai-gmbh.ghost.io\">BERT 模型</a>的擴展。<a href=\"https://jina.ai/news/what-is-colbert-and-late-interaction-and-why-they-matter-in-search/?ref=jina-ai-gmbh.ghost.io\">Jina AI 的 Jina-ColBERT</a> 模型借鑒了這項工作和後來在 <a href=\"https://arxiv.org/abs/2112.01488?ref=jina-ai-gmbh.ghost.io\">Santhanam, et al. (2021)</a> 中提出的 ColBERT v2 架構。ColBERT 風格的模型可以用來創建嵌入，但當用作重排序模型時它們有一些額外的特性。主要優勢是\"延遲交互\"，這是一種與標準嵌入模型不同的語義文本相似性問題構建方式。</p><h3 id=\"embedding-models\">嵌入模型</h3><p>在傳統的嵌入模型中，我們通過為兩個文本生成代表性向量（稱為\"嵌入\"）來比較它們，然後通過餘弦或漢明距離等距離度量來比較這些嵌入。量化兩個文本的語義相似性通常遵循一個共同的程序。</p><p>首先，我們為兩個文本分別創建嵌入。對於任何一個文本：</p><ol><li>分詞器將文本分解成大約詞大小的塊。</li><li>每個標記映射到一個向量。</li><li>標記向量通過注意力系統和卷積層相互作用，將上下文信息添加到每個標記的表示中。</li><li>池化層將這些修改後的標記向量轉換為單個嵌入向量。</li></ol><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/Embeddings_pooling_dark_small-1.png\" class=\"kg-image\" alt=\"Diagram of text classification model with convolutional, attention, pooling layers, and text tokens on a black background.\" loading=\"lazy\" width=\"550\" height=\"900\"><figcaption><span style=\"white-space: pre-wrap;\">為文本創建單一嵌入的示意化嵌入模型。</span></figcaption></figure><p>然後，當每個文本都有了嵌入，我們就使用餘弦度量或漢明距離來比較它們。</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/Embeddings2_simpler_dark_small.png\" class=\"kg-image\" alt=\"Flowchart describing a text similarity calculation process with tokenization, embedding models, and scoring.\" loading=\"lazy\" width=\"775\" height=\"825\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/Embeddings2_simpler_dark_small.png 600w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/Embeddings2_simpler_dark_small.png 775w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">在傳統嵌入模型中，通過直接比較文檔的嵌入來進行比較。</span></figcaption></figure><p>評分通過比較兩個完整的嵌入來進行，而不包含任何關於標記的具體信息。所有標記之間的交互都是\"早期的\"，因為它發生在兩個文本相互比較之前。</p><h3 id=\"reranking-models\">重排序模型</h3><p>重排序模型的工作方式不同。</p><p>首先，它不是為任何文本創建嵌入，而是取一個稱為\"查詢\"的文本，和一組我們稱為\"目標文檔\"的其他文本，然後根據查詢文本對每個目標文檔進行評分。這些數字不是標準化的，也不像比較嵌入，但它們是可排序的。根據模型，相對於查詢得分最高的目標文檔是與查詢在語義上最相關的文本。</p><p>讓我們使用 Jina Reranker API 和 Python 來具體看看這是如何用 <code>jina-colbert-v1-en</code> 重排序模型工作的。</p><p>以下代碼也在一個筆記本中，你可以<a href=\"https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/heatmaps/colbert_heatmaps.ipynb?ref=jina-ai-gmbh.ghost.io\">下載</a>或<a href=\"https://colab.research.google.com/github/jina-ai/workshops/blob/main/notebooks/heatmaps/colbert_heatmaps.ipynb?ref=jina-ai-gmbh.ghost.io\">在 Google Colab 中運行</a>。</p><p>你應該首先在你的 Python 環境中安裝最新版本的 <code>requests</code> 庫。你可以使用以下命令：</p><pre><code class=\"language-bash\">pip install requests -U\n</code></pre><p>接下來，訪問 <a href=\"https://jina.ai/reranker/?ref=jina-ai-gmbh.ghost.io#apiform\">Jina Reranker API 頁面</a>並獲取一個免費的 API 令牌，可用於處理多達一百萬個標記的文本。從頁面底部複製 API 令牌密鑰，如下所示：</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/jina_reranker_api.png\" class=\"kg-image\" alt=\"Screenshot of Reranker API's interface with explanatory text and red-highlighted code segment for search optimization.\" loading=\"lazy\" width=\"1650\" height=\"1800\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/jina_reranker_api.png 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2024/06/jina_reranker_api.png 1000w, https://jina-ai-gmbh.ghost.io/content/images/size/w1600/2024/06/jina_reranker_api.png 1600w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/jina_reranker_api.png 1650w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">如何從 Jina Reranker API 頁面獲取個人 API 密鑰。</span></figcaption></figure><p>我們將使用以下查詢文本：</p><ul><li>\"Elephants eat 150 kg of food per day.\"</li></ul><p>並將此查詢與三個文本進行比較：</p><ul><li>\"Elephants eat 150 kg of food per day.\"</li><li>\"Every day, the average elephant consumes roughly 150 kg of plants.\"</li><li>\"The rain in Spain falls mainly on the plain.\"</li></ul><p>第一個文檔與查詢完全相同，第二個是第一個的改寫，最後一個文本則完全無關。</p><p>使用以下 Python 代碼獲取分數，將您的 Jina Reranker API 令牌分配給變量 <code>jina_api_key</code>：</p><pre><code class=\"language-Python\">import requests\n\nurl = \"&lt;https://api.jina.ai/v1/rerank&gt;\"\njina_api_key = \"&lt;YOUR JINA RERANKER API TOKEN HERE&gt;\"\n\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": f\"Bearer {jina_api_key}\"\n}\ndata = {\n    \"model\": \"jina-colbert-v1-en\",\n    \"query\": \"Elephants eat 150 kg of food per day.\",\n    \"documents\": [\n        \"Elephants eat 150 kg of food per day.\",\n        \"Every day, the average elephant consumes roughly 150 kg of food.\",\n        \"The rain in Spain falls mainly on the plain.\",\n    ],\n    \"top_n\": 3\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nfor item in response.json()['results']:\n    print(f\"{item['relevance_score']} : {item['document']['text']}\")\n</code></pre><p>在 Python 文件或筆記本中運行此代碼應該產生以下結果：</p><pre><code class=\"language-Text\">11.15625 : Elephants eat 150 kg of food per day.\n9.6328125 : Every day, the average elephant consumes roughly 150 kg of food.\n1.568359375 : The rain in Spain falls mainly on the plain.\n</code></pre><p>正如我們所預期的，完全匹配的文本得分最高，改寫的文本得分第二高，而完全無關的文本得分則低得多。</p><h3 id=\"scoring-using-colbert\">使用 ColBERT 進行評分</h3><p>ColBERT 重排序與基於嵌入的評分不同的地方在於，兩個文本的標記在評分過程中會相互比較。兩個文本永遠不會有它們自己的嵌入。</p><p>首先，我們使用與嵌入模型相同的架構為每個標記創建包含文本上下文信息的新表示。然後，我們將查詢中的每個標記與文檔中的每個標記進行比較。</p><p>對於查詢中的每個標記，我們識別文檔中與之有最強交互的標記，並對這些交互分數進行求和來計算最終的數值。</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/ColBERT_dual_dark_small.png\" class=\"kg-image\" alt=\"Detailed diagram showing computational model with tokens, scored and categorized into &quot;Early&quot; and &quot;Late&quot; interactions.\" loading=\"lazy\" width=\"1325\" height=\"1200\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/ColBERT_dual_dark_small.png 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2024/06/ColBERT_dual_dark_small.png 1000w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/ColBERT_dual_dark_small.png 1325w\" sizes=\"(min-width: 1200px) 1200px\"></figure><p>這種互動是「後期的」：當我們比較兩段文字時，文字之間的 token 會相互作用。但請記住，「後期」互動並不排除「早期」互動。被比較的 token 向量對已經包含了它們特定上下文的資訊。</p><p>這種後期互動架構保留了 token 層級的資訊，即使這些資訊是與上下文相關的。這使我們能夠部分看到 ColBERT 模型如何計算其分數，因為我們可以識別哪些上下文化 token 對對最終分數有所貢獻。</p><h2 id=\"explaining-rankings-with-heat-maps\">使用熱力圖解釋排名</h2><p>熱力圖是一種視覺化技術，有助於觀察 Jina-ColBERT 在建立分數時的運作情況。在這一節中，我們將使用 <a href=\"https://seaborn.pydata.org/?ref=jina-ai-gmbh.ghost.io\"><code>seaborn</code></a> 和 <a href=\"https://matplotlib.org/?ref=jina-ai-gmbh.ghost.io\"><code>matplotlib</code></a> 函式庫來建立來自 <a href=\"https://huggingface.co/jinaai/jina-colbert-v1-en?ref=jina-ai-gmbh.ghost.io\"><code>jina-colbert-v1-en</code></a> 後期互動層的熱力圖，展示查詢 token 如何與目標文本 token 互動。</p><h3 id=\"set-up\">設定</h3><p>我們已經建立了一個 Python 函式庫檔案，其中包含訪問 <code>jina-colbert-v1-en</code> 模型並使用 <code>seaborn</code>、<code>matplotlib</code> 和 <code>Pillow</code> 來建立熱力圖的程式碼。你可以<a href=\"https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/heatmaps/jina_colbert_heatmaps.py?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\">直接從 GitHub 下載這個函式庫</a>，或者在你自己的系統上<a href=\"https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/heatmaps/colbert_heatmaps.ipynb?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\">使用提供的 notebook</a>，或在 <a href=\"https://colab.research.google.com/github/jina-ai/workshops/blob/main/notebooks/heatmaps/colbert_heatmaps.ipynb?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\">Google Colab</a> 上使用。</p><p>首先，安裝所需套件。你需要在你的 Python 環境中安裝最新版本的 <code>requests</code> 函式庫。如果你還沒有安裝，請執行：</p><pre><code class=\"language-bash\">pip install requests -U \n</code></pre><p>然後，安裝核心函式庫：</p><pre><code class=\"language-bash\">pip install matplotlib seaborn torch Pillow\n</code></pre><p>接下來，從 GitHub 下載 <code>jina_colbert_heatmaps.py</code>。你可以<a href=\"https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/heatmaps/jina_colbert_heatmaps.py?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\">通過瀏覽器</a>下載，或者如果安裝了 <code>wget</code>，可以在命令行中執行：</p><pre><code class=\"language-bash\">wget https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/heatmaps/jina_colbert_heatmaps.py\n</code></pre><p>在函式庫準備就緒後，我們只需要為本文的其餘部分聲明一個函數：</p><pre><code class=\"language-Python\">from jina_colbert_heatmaps import JinaColbertHeatmapMaker\n\ndef create_heatmap(query, document, figsize=None):\n    heat_map_maker = JinaColbertHeatmapMaker(jina_api_key=jina_api_key)\n    # get token embeddings for the query\n    query_emb = heat_map_maker.embed(query, is_query=True)\n    # get token embeddings for the target document\n    document_emb = heat_map_maker.embed(document, is_query=False)\n    return heat_map_maker.compute_heatmap(document_emb[0], query_emb[0], figsize)\n</code></pre><h3 id=\"results\">結果</h3><p>現在我們可以建立熱力圖了，讓我們建立幾個並看看它們告訴我們什麼。</p><p>在 Python 中執行以下命令：</p><pre><code class=\"language-Python\">create_heatmap(\"Elephants eat 150 kg of food per day.\", \"Elephants eat 150 kg of food per day.\")</code></pre><p>結果將是一個如下所示的熱力圖：</p><figure class=\"kg-card kg-image-card\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/Untitled--68-.png\" class=\"kg-image\" alt=\"Heatmap visualizing relationships between phrases like &quot;elephants eat 150 kg of food per day&quot; with color gradients indicating\" loading=\"lazy\" width=\"640\" height=\"480\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/Untitled--68-.png 600w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/Untitled--68-.png 640w\"></figure><p>這是當我們比較兩個相同文本時的 token 對之間的激活水平熱力圖。每個方格顯示了來自每個文本的兩個 token 之間的互動。額外的 token <code>[CLS]</code> 和 <code>[SEP]</code> 分別表示文本的開始和結束，<code>q</code> 和 <code>d</code> 分別在查詢和目標文檔的 <code>[CLS]</code> token 之後插入。這允許模型考慮 token 與文本開始和結束之間的互動，同時也使 token 表示能夠對它們是在查詢中還是在目標中敏感。</p><p>方格越亮，兩個 token 之間的互動就越多，這表示它們在語義上相關。每個 token 對的互動分數範圍是 -1.0 到 1.0。紅框突出顯示的方格是計入最終分數的方格：對於查詢中的每個 token，其與任何文檔 token 的最高互動水平就是計算的值。</p><p>最佳匹配 — 最亮的點 — 和紅框標記的最大值幾乎都恰好在對角線上，並且它們有非常強的互動。唯一的例外是「技術性」token <code>[CLS]</code>、<code>q</code> 和 <code>d</code>，以及英語中攜帶很少獨立資訊的高頻「停用詞」\"of\"。</p><p>讓我們看一個結構相似的句子 —「Cats eat 50 g of food per day.」— 看看其中的 token 如何互動：</p><pre><code class=\"language-Python\">create_heatmap(\"Elephants eat 150 kg of food per day.\", \"Cats eat 50 g of food per day.\")</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/download.png\" class=\"kg-image\" alt=\"Heatmap visualizing the relevance of keywords like &quot;elephants&quot;, &quot;food&quot;, and &quot;kg&quot; with varying intensity colors, indicating da\" loading=\"lazy\" width=\"640\" height=\"480\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/download.png 600w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/download.png 640w\"></figure><p>再次，最佳匹配主要在對角線上，因為單詞經常相同，且句子結構幾乎相同。即使是「cats」和「elephants」也因為它們的共同上下文而匹配，儘管匹配程度不是很高。</p><p>上下文越不相似，匹配就越差。考慮文本「Employees eat at the company canteen.」</p><pre><code class=\"language-Python\">create_heatmap(\"Elephants eat 150 kg of food per day.\", \"Employees eat at the company canteen.\")</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/Untitled--69-.png\" class=\"kg-image\" alt=\"Heatmap visualization showing word correlations from news articles, including topics like food, elephants, and work environme\" loading=\"lazy\" width=\"640\" height=\"480\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/Untitled--69-.png 600w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/Untitled--69-.png 640w\"></figure><p>雖然結構相似，但這裡唯一強匹配是兩個「eat」之間。就主題而言，這些是很不同的句子，即使它們的結構高度平行。</p><p>通過查看紅框方格中顏色的深淺，我們可以看出模型如何將它們排序為「Elephants eat 150 kg of food per day」的匹配，<code>jina-colbert-v1-en</code> 確認了這種直覺：</p>\n<!--kg-card-begin: html-->\n<table>\n<thead>\n<tr>\n<th>Score</th>\n<th>Text</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>11.15625</td>\n<td>Elephants eat 150 kg of food per day.</td>\n</tr>\n<tr>\n<td>8.3671875</td>\n<td>Cats eat 50 g of food per day.</td>\n</tr>\n<tr>\n<td>3.734375</td>\n<td>Employees eat at the company canteen.</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: html-->\n<p>現在，讓我們將「Elephants eat 150 kg of food per day.」與一個本質上意思相同但表達不同的句子進行比較：「Every day, the average elephant consumes roughly 150 kg of food.」</p><pre><code class=\"language-Python\">create_heatmap(\"Elephants eat 150 kg of food per day.\", \"Every day, the average elephant consumes roughly 150 kg of food.\")</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/Untitled--70-.png\" class=\"kg-image\" alt=\"Colorful heatmap visualizing the relationship between elephant consumption metrics and other variables.\" loading=\"lazy\" width=\"640\" height=\"480\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/Untitled--70-.png 600w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/Untitled--70-.png 640w\"></figure><p>請注意，第一句中的 \"eat\" 和第二句中的 \"consume\" 之間存在強烈的關聯。儘管詞彙不同，但 Jina-ColBERT 仍能識別出它們的共同含義。</p><p>此外，\"every day\" 與 \"per day\" 高度匹配，儘管它們在句子中的位置完全不同。只有低價值詞 \"of\" 顯示異常的不匹配。</p><p>現在，讓我們將同樣的查詢與一個完全無關的文本進行比較：\"The rain in Spain falls mainly on the plain.\"</p><pre><code class=\"language-Python\">create_heatmap(\"Elephants eat 150 kg of food per day.\", \"The rain in Spain falls mainly on the plain.\")</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/download-1.png\" class=\"kg-image\" alt=\"Seaborn heatmap visualizing frequencies of topic discussions over months, shaded from red to dark blue.\" loading=\"lazy\" width=\"640\" height=\"480\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/download-1.png 600w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/download-1.png 640w\"></figure><p>你可以看到，這對文本的\"最佳匹配\"互動得分要低得多，且兩段文本中的任何詞之間幾乎沒有互動。從直覺上來說，與\"Every day, the average elephant consumes roughly 150 kg of food\"相比，這個分數應該較低，<code>jina-colbert-v1-en</code>的結果也印證了這一點：</p>\n<!--kg-card-begin: html-->\n<table>\n<thead>\n<tr>\n<th>Score</th>\n<th>Text</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>9.6328125</td>\n<td>Every day, the average elephant consumes roughly 150 kg of food.</td>\n</tr>\n<tr>\n<td>1.568359375</td>\n<td>The rain in Spain falls mainly on the plain.</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: html-->\n<h3 id=\"long-texts\">長文本</h3><p>這些是用於展示 ColBERT 式重排序模型工作原理的示例。在信息檢索場景中，例如檢索增強生成，查詢通常是短文本，而匹配的候選文檔往往較長，經常與模型的輸入上下文窗口一樣長。</p><p>Jina-ColBERT 模型都支持 8192 個 token 的輸入上下文，相當於大約 16 頁標準的單倍行距文本。</p><p>我們也可以為這些非對稱情況生成熱力圖。例如，讓我們看看<a href=\"https://en.wikipedia.org/wiki/Indian_elephant?ref=jina-ai-gmbh.ghost.io\">印度象維基百科頁面</a>的第一部分：</p><figure class=\"kg-card kg-image-card\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/Screenshot-2024-06-13-at-14.12.36--1-.png\" class=\"kg-image\" alt=\"Screenshot of Wikipedia page on Indian elephants, featuring articles, three elephant images, and conservation status.\" loading=\"lazy\" width=\"2000\" height=\"1870\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/Screenshot-2024-06-13-at-14.12.36--1-.png 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2024/06/Screenshot-2024-06-13-at-14.12.36--1-.png 1000w, https://jina-ai-gmbh.ghost.io/content/images/size/w1600/2024/06/Screenshot-2024-06-13-at-14.12.36--1-.png 1600w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/Screenshot-2024-06-13-at-14.12.36--1-.png 2188w\" sizes=\"(min-width: 720px) 720px\"></figure><p>要查看傳遞給 <code>jina-colbert-v1-en</code> 的純文本版本，請點擊<a href=\"https://raw.githubusercontent.com/jina-ai/workshops/docs-heatmaps/notebooks/heatmaps/wikipedia_indian_elephant.txt?ref=jina-ai-gmbh.ghost.io\">此連結</a>。</p><p>這段文本有 364 個詞，所以我們的熱力圖不會呈現正方形：</p><pre><code class=\"language-Python\">create_heatmap(\"Elephants eat 150 kg of food per day.\", wikipedia_elephants, figsize=(50,7))</code></pre><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/Untitled--71--2.png\" class=\"kg-image\" alt=\"Graphical heatmap displaying genetic data, with red and orange dots indicating varying expression levels across base pairs an\" loading=\"lazy\" width=\"2000\" height=\"378\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/Untitled--71--2.png 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2024/06/Untitled--71--2.png 1000w, https://jina-ai-gmbh.ghost.io/content/images/size/w1600/2024/06/Untitled--71--2.png 1600w, https://jina-ai-gmbh.ghost.io/content/images/size/w2400/2024/06/Untitled--71--2.png 2400w\" sizes=\"(min-width: 1200px) 1200px\"></figure><p>我們看到 \"elephants\" 在文本中多處匹配。在一篇關於大象的文本中，這並不令人驚訝。但我們也可以看到一個互動更強的區域：</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/Untitled--72--1.png\" class=\"kg-image\" alt=\"Genomic heatmap with red and black patterns, axis labeled 'XNTY', and highlighted regions indicating data points.\" loading=\"lazy\" width=\"2000\" height=\"443\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/Untitled--72--1.png 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2024/06/Untitled--72--1.png 1000w, https://jina-ai-gmbh.ghost.io/content/images/size/w1600/2024/06/Untitled--72--1.png 1600w, https://jina-ai-gmbh.ghost.io/content/images/size/w2400/2024/06/Untitled--72--1.png 2400w\" sizes=\"(min-width: 1200px) 1200px\"></figure><p>這裡發生了什麼？使用 Jina-ColBERT，我們可以找到長文本中對應的部分。這是第二段的第四句話：</p><blockquote>這個物種被歸類為巨型草食動物，每天可消耗高達 150 公斤（330 磅）的植物。</blockquote><p>這重述了查詢文本中的相同信息。如果我們只看這句話的熱力圖，就能看到強匹配：</p><figure class=\"kg-card kg-image-card\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/Untitled--74-.png\" class=\"kg-image\" alt=\"Heatmap displaying word co-occurrence with a focus on &quot;elephants,&quot; &quot;food,&quot; and &quot;day,&quot; with color intensity indicating the str\" loading=\"lazy\" width=\"640\" height=\"480\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/Untitled--74-.png 600w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/Untitled--74-.png 640w\"></figure><p>Jina-ColBERT 讓你能夠準確看到長文本中哪些區域導致它與查詢匹配。這不僅有助於更好的調試，還能提供更好的可解釋性。看到匹配是如何形成的並不需要太複雜的理解。</p><h2 id=\"explaining-ai-outcomes-with-jina-colbert\">使用 Jina-ColBERT 解釋 AI 結果</h2><p>嵌入是現代 AI 的核心技術。我們幾乎所有的工作都基於這樣的理念：輸入數據中的複雜、可學習關係可以在高維空間的幾何中表達。然而，對於普通人來說，要理解數千到數百萬維度的空間關係是非常困難的。</p><p>ColBERT 是對這種抽象層次的一個回歸。它不是解釋 AI 模型行為問題的完整答案，但它直接指出了哪些數據部分導致了我們的結果。</p><p>有時候，AI 必須是一個黑盒子。執行所有重要運算的巨大矩陣太大，任何人都無法完全理解。但 ColBERT 架構為這個黑盒子投入一些光明，展示了更多的可能性。</p><p>Jina-ColBERT 模型目前只提供英文版（<code>jina-colbert-v1-en</code>），但更多語言和使用場景正在開發中。這系列模型不僅能執行最先進的信息檢索，還能告訴你為什麼它們會匹配某些內容，這展示了 Jina AI 致力於使 AI 技術既易於使用又實用的承諾。</p>",
  "comment_id": "6672af263ce1950001eed6a7",
  "feature_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/06/Search-acc--3-.png",
  "featured": false,
  "visibility": "public",
  "created_at": "2024-06-19T12:12:54.000+02:00",
  "updated_at": "2024-07-08T21:08:21.000+02:00",
  "published_at": "2024-06-19T16:01:36.000+02:00",
  "custom_excerpt": "AI explainability and transparency are hot topics. How can we trust AI if we can't see how it works? Jina-ColBERT shows you how, with the right model architecture, you can easily make your AI spill its secrets.",
  "codeinjection_head": null,
  "codeinjection_foot": null,
  "custom_template": null,
  "canonical_url": null,
  "authors": [
    {
      "id": "6360e8495e0f6e004d70bd9e",
      "name": "Maximilian Werk",
      "slug": "maximilian",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/11/Profile-Picture.jpg",
      "cover_image": null,
      "bio": "I love bringing business value with ML powered solutions as well as broad strategic and deep technical discussions. I also care a lot about our company culture and enjoy pair programming.",
      "website": null,
      "location": null,
      "facebook": null,
      "twitter": null,
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/maximilian/"
    },
    {
      "id": "632ae7353e4e55003d52598e",
      "name": "Scott Martens",
      "slug": "scott",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/11/photo-of-me-cropped.jpg",
      "cover_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/11/shanshui-ernie-crop.png",
      "bio": "A rogue AI created by Canada's Weapon X program.\n\nContent Creator @ Jina AI",
      "website": "https://jina.ai",
      "location": "Berlin",
      "facebook": null,
      "twitter": null,
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/scott/"
    }
  ],
  "tags": [
    {
      "id": "634a1a8ccebfc1003d8ab706",
      "name": "Tech Blog",
      "slug": "tech-blog",
      "description": null,
      "feature_image": null,
      "visibility": "public",
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "canonical_url": null,
      "accent_color": null,
      "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
    }
  ],
  "primary_author": {
    "id": "6360e8495e0f6e004d70bd9e",
    "name": "Maximilian Werk",
    "slug": "maximilian",
    "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/11/Profile-Picture.jpg",
    "cover_image": null,
    "bio": "I love bringing business value with ML powered solutions as well as broad strategic and deep technical discussions. I also care a lot about our company culture and enjoy pair programming.",
    "website": null,
    "location": null,
    "facebook": null,
    "twitter": null,
    "meta_title": null,
    "meta_description": null,
    "url": "https://jina-ai-gmbh.ghost.io/author/maximilian/"
  },
  "primary_tag": {
    "id": "634a1a8ccebfc1003d8ab706",
    "name": "Tech Blog",
    "slug": "tech-blog",
    "description": null,
    "feature_image": null,
    "visibility": "public",
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "canonical_url": null,
    "accent_color": null,
    "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
  },
  "url": "https://jina-ai-gmbh.ghost.io/podcast/ai-explainability-made-easy-how-late-interaction-makes-jina-colbert-transparent/",
  "excerpt": "AI 的可解釋性和透明度是熱門議題。如果我們看不到 AI 是如何運作的，又怎麼能信任它呢？Jina-ColBERT 向您展示，只要有正確的模型架構，就能輕鬆讓 AI 透露其運作秘密。",
  "reading_time": 11,
  "access": true,
  "comments": false,
  "og_image": null,
  "og_title": null,
  "og_description": null,
  "twitter_image": null,
  "twitter_title": null,
  "twitter_description": null,
  "meta_title": null,
  "meta_description": null,
  "email_subject": null,
  "frontmatter": null,
  "feature_image_alt": "Digital representation of a golden building seen through a blue and yellow mesh pattern, evoking a technological vibe.",
  "feature_image_caption": null
}