{
  "slug": "implementing-a-chat-history-rag-with-jina-ai-and-milvus-lite",
  "id": "665d76034b4b4c0001ba1bb3",
  "uuid": "851bc948-281c-4fab-bc11-941c900b086b",
  "title": "使用 Jina AI 和 Milvus Lite 實作聊天歷史 RAG",
  "html": "<p>開發人員和運維工程師非常重視能夠輕鬆設置、快速啟動，以及後續可以在生產環境中高效部署且無額外麻煩的基礎設施。因此，我們合作夥伴 <a href=\"https://milvus.io/?ref=jina-ai-gmbh.ghost.io\"><u>Milvus</u></a> 最新推出的輕量級向量數據庫 <a href=\"https://milvus.io/docs/milvus_lite.md?ref=jina-ai-gmbh.ghost.io\"><u>Milvus Lite</u></a>，對 Python 開發者來說是一個重要工具，特別是當它與高品質且易用的搜索基礎模型一起使用時，能快速開發搜索應用。</p><p>在本文中，我們將通過一個基於虛構公司內部公共頻道聊天記錄構建的 <a href=\"https://jina.ai/news/albus-by-springworks-empowering-employees-with-enterprise-search?ref=jina-ai-gmbh.ghost.io\"><u>檢索增強生成 (RAG)</u></a> 應用示例，來描述 Milvus Lite 如何整合 <a href=\"https://jina.ai/embeddings/?ref=jina-ai-gmbh.ghost.io\"><u>Jina Embeddings v2</u></a> 和 <a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><u>Jina Reranker v1</u></a>，以讓員工能夠準確且有幫助地獲得與組織相關問題的答案。</p><h2 id=\"overview-of-milvus-lite-jina-embeddings-and-jina-reranker\">Milvus Lite、Jina Embeddings 和 Jina Reranker 概述</h2><p>Milvus Lite 是領先的向量數據庫 Milvus 的新輕量級版本，現在也作為 Python 庫提供。Milvus Lite 與部署在 Docker 或 Kubernetes 上的 Milvus 共享相同的 API，但可以通過一行 pip 命令輕鬆安裝，無需設置服務器。</p><p>通過在 Milvus 的 Python SDK <a href=\"https://github.com/milvus-io/pymilvus?ref=jina-ai-gmbh.ghost.io\"><u>pymilvus</u></a> 中整合 Jina Embeddings v2 和 Jina Reranker v1，你現在可以使用相同的 Python 客戶端直接在任何 Milvus 部署模式（包括 Milvus Lite）中嵌入文檔。你可以在 pymilvus 的<a href=\"https://milvus.io/docs/integrate_with_jina.md?ref=jina-ai-gmbh.ghost.io\"> <u>文檔頁面</u></a>上找到 Jina Embeddings 和 Reranker 整合的詳細信息。</p><p>Jina Embeddings v2 具有 8k 字符的上下文窗口和多語言功能，能夠編碼文本的廣泛語義並確保準確檢索。通過在管道中添加 Jina Reranker v1，你可以通過直接將檢索到的結果與查詢進行交叉編碼來進一步優化結果，實現更深入的上下文理解。</p><h2 id=\"milvus-and-jina-ai-models-in-action\">Milvus 和 Jina AI 模型實戰</h2><p>本教程將重點關注一個實際用例：查詢公司的 Slack 聊天歷史記錄，以根據過去的對話回答各種問題。</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/E-R-slack--2-.jpg\" class=\"kg-image\" alt=\"Flowchart detailing the Rust community's model training process, featuring steps from the &quot;Next training step?&quot; query through\" loading=\"lazy\" width=\"1600\" height=\"900\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/E-R-slack--2-.jpg 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2024/06/E-R-slack--2-.jpg 1000w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/E-R-slack--2-.jpg 1600w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">使用示例查詢查詢 Slack 數據的流程</span></figcaption></figure><p>例如，在上面的流程圖中，員工可以詢問 AI 訓練過程中的下一步是什麼。通過使用 Jina Embeddings、Jina Reranker 和 Milvus，我們可以準確地識別記錄在 Slack 消息中的相關信息。這個應用程序可以通過便於訪問過去通信中的寶貴信息來提高工作場所的生產力。</p><p>為了生成答案，我們將通過 <a href=\"https://python.langchain.com/v0.1/docs/integrations/llms/huggingface_endpoint/?ref=jina-ai-gmbh.ghost.io\"><u>Langchain 中的 HuggingFace 整合</u></a>使用 <a href=\"https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1?ref=jina-ai-gmbh.ghost.io\"><u>Mixtral 7B Instruct</u></a>。要使用該模型，你需要一個 HuggingFace 訪問令牌，你可以按照<a href=\"https://huggingface.co/docs/hub/en/security-tokens?ref=jina-ai-gmbh.ghost.io\"><u>這裡</u></a>的說明生成。</p><p>你可以在 <a href=\"https://colab.research.google.com/github/jina-ai/workshops/blob/main/notebooks/embeddings/milvus/milvus_lite_jina_integration.ipynb?ref=jina-ai-gmbh.ghost.io\"><u>Colab</u></a> 上跟著做，或者<a href=\"https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/milvus/milvus_lite_jina_integration.ipynb?ref=jina-ai-gmbh.ghost.io\"><u>下載 notebook</u></a>。</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://colab.research.google.com/github/jina-ai/workshops/blob/main/notebooks/embeddings/milvus/milvus_lite_jina_integration.ipynb?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Google Colab</div><div class=\"kg-bookmark-description\"></div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://ssl.gstatic.com/colaboratory-static/common/0d8af74d4089ab8b6d127bd74854be98/img/favicon.ico\" alt=\"\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://colab.research.google.com/img/colab_favicon_256px.png\" alt=\"\"></div></a></figure><h3 id=\"about-the-dataset\">關於數據集</h3><p>本教程使用的數據集是用 GPT-4 生成的，旨在複制 Blueprint AI 的 Slack 頻道聊天記錄。Blueprint 是一家虛構的 AI 初創公司，正在開發自己的基礎模型。你可以在<a href=\"https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/milvus/chat_history.json?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\"><u>這裡</u></a>下載數據集。</p><p>數據按<em>頻道</em>組織，每個頻道代表一組相關的 Slack 對話串。每個頻道都有一個主題標籤，有十個主題選項：<em>模型分發</em>、<em>模型訓練</em>、<em>模型微調</em>、<em>倫理和偏見消除</em>、<em>用戶反饋</em>、<em>銷售</em>、<em>市場營銷</em>、<em>模型入職</em>、<em>創意設計</em>和<em>產品管理</em>。其中一個參與者被稱為\"專家用戶\"。你可以使用這個欄位來驗證查詢主題最專業用戶的結果，我們將在下面展示如何做到這一點。</p><p>每個頻道還包含聊天歷史記錄，每個頻道最多可包含 100 條消息的對話串。數據集中的每條消息都包含以下信息：</p><ul><li><strong>用戶</strong>：發送消息的人</li><li><strong>消息文本</strong>：用戶發送的消息</li><li><strong>時間戳</strong>：消息發送的時間</li><li><strong>文件名</strong>：用戶可能附加到消息的文件名</li><li><strong>消息 ID</strong></li><li><strong>父消息 ID</strong>：如果消息是在另一條消息產生的對話串中，則顯示該 ID</li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/image-1.png\" class=\"kg-image\" alt=\"Diagram showing the structure of a messaging system, detailing the relationship between 'Channel' and 'Message' entities, wit\" loading=\"lazy\" width=\"780\" height=\"450\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/image-1.png 600w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/image-1.png 780w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">聊天數據結構的 UML 圖。</span></figcaption></figure><h3 id=\"set-up-the-environment\">設置環境</h3><p>首先，安裝所有必要的組件：</p><pre><code class=\"language-Python\">pip install -U pymilvus\npip install -U \"pymilvus[model]\"\npip install langchain\npip install langchain-community\n</code></pre><p>下載數據集：</p><pre><code class=\"language-Python\">import os\n\nif not os.path.exists(\"chat_history.json\"):\n    !wget https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/milvus/chat_history.json</code></pre><p>在環境變量中設置你的 Jina AI API Key。你可以在<a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><u>這裡</u></a>生成一個。</p><pre><code class=\"language-Python\">import os\nimport getpass\n\nos.environ[\"JINAAI_API_KEY\"] = getpass.getpass(prompt=\"Jina AI API Key: \")</code></pre><p>對你的 Hugging Face Token 也做同樣的操作。你可以在<a href=\"https://huggingface.co/docs/hub/en/security-tokens?ref=jina-ai-gmbh.ghost.io\"><u>這裡</u></a>找到如何生成。確保將其設置為 <code>READ</code> 以訪問 <a href=\"https://huggingface.co/docs/hub/en/index?ref=jina-ai-gmbh.ghost.io\"><u>Hugging Face Hub</u></a>。</p><pre><code class=\"language-Python\">os.environ[\"HUGGINGFACEHUB_API_TOKEN\"] = getpass.getpass(prompt=\"Hugging Face Token: \")</code></pre><h3 id=\"create-the-milvus-collection\">創建 Milvus Collection</h3><p>創建 Milvus Collection 來索引數據：</p><pre><code class=\"language-Python\">from pymilvus import MilvusClient, DataType\n\n# Specify a local file name as uri parameter of MilvusClient to use Milvus Lite\nclient = MilvusClient(\"milvus_jina.db\")\n\nschema = MilvusClient.create_schema(\n    auto_id=True,\n    enable_dynamic_field=True,\n)\n\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, description=\"The Primary Key\", is_primary=True)\nschema.add_field(field_name=\"embedding\", datatype=DataType.FLOAT_VECTOR, description=\"The Embedding Vector\", dim=768)\n\nindex_params = client.prepare_index_params()\nindex_params.add_index(field_name=\"embedding\", metric_type=\"COSINE\", index_type=\"AUTOINDEX\")\n\nclient.create_collection(collection_name=\"milvus_jina\", schema=schema, index_params=index_params)</code></pre><h3 id=\"prepare-the-data\">準備資料</h3><p>解析聊天歷史並提取元數據：</p><pre><code class=\"language-Python\">import json\n\nwith open(\"chat_history.json\", \"r\", encoding=\"utf-8\") as file:\n    chat_data = json.load(file)\n\nmessages = []\nmetadatas = []\n\nfor channel in chat_data:\n  chat_history = channel[\"chat_history\"]\n  chat_topic = channel[\"topic\"]\n  chat_expert = channel[\"expert_user\"]\n  for message in chat_history:\n    text = f\"\"\"{message[\"user\"]}: {message[\"message\"]}\"\"\"\n    messages.append(text)\n    meta = {\n        \"time_stamp\": message[\"time_stamp\"],\n        \"file_name\": message[\"file_name\"],\n        \"parent_message_nr\": message[\"parent_message_nr\"],\n        \"channel\": chat_topic,\n        \"expert\": True if message[\"user\"] == chat_expert else False\n    }\n    metadatas.append(meta)\n</code></pre><h3 id=\"embed-the-chat-data\">嵌入聊天資料</h3><p>使用 Jina Embeddings v2 為每條訊息建立嵌入向量，以便檢索相關聊天資訊：</p><pre><code class=\"language-Python\">from pymilvus.model.dense import JinaEmbeddingFunction\n\njina_ef = JinaEmbeddingFunction(\"jina-embeddings-v2-base-en\")\n\nembeddings = jina_ef.encode_documents(messages)</code></pre><h3 id=\"index-the-chat-data\">索引聊天資料</h3><p>索引訊息、它們的嵌入向量和相關元數據：</p><pre><code class=\"language-Python\">collection_data = [{\n    \"message\": message,\n    \"embedding\": embedding,\n    \"metadata\": metadata\n} for message, embedding, metadata in zip(messages, embeddings, metadatas)]\n\ndata = client.insert(\n    collection_name=\"milvus_jina\",\n    data=collection_data\n)</code></pre><h3 id=\"query-the-chat-history\">查詢聊天歷史</h3><p>現在提出一個問題：</p><pre><code class=\"language-Python\">query = \"Who knows the most about encryption protocols in my team?\"</code></pre><p>現在嵌入查詢並檢索相關訊息。在這裡我們檢索五條最相關的訊息，並使用 Jina Reranker v1 進行重新排序：</p><pre><code class=\"language-Python\">from pymilvus.model.reranker import JinaRerankFunction\n\nquery_vectors = jina_ef.encode_queries([query])\n\nresults = client.search(\n    collection_name=\"milvus_jina\",\n    data=query_vectors,\n    limit=5,\n)\n\nresults = results[0]\n\nids = [results[i][\"id\"] for i in range(len(results))]\n\nresults = client.get(\n    collection_name=\"milvus_jina\",\n    ids=ids,\n    output_fields=[\"id\", \"message\", \"metadata\"]\n)\n\njina_rf = JinaRerankFunction(\"jina-reranker-v1-base-en\")\n\ndocuments = [results[i][\"message\"] for i in range(len(results))]\nreranked_documents = jina_rf(query, documents)\n\nreranked_messages = []\nfor reranked_document in reranked_documents:\n  idx = reranked_document.index\n  reranked_messages.append(results[idx])</code></pre><p>最後，使用 Mixtral 7B Instruct 和重新排序的訊息作為上下文來生成對查詢的回答：</p><pre><code class=\"language-Python\">from langchain.prompts import PromptTemplate\nfrom langchain_community.llms import HuggingFaceEndpoint\n\nllm = HuggingFaceEndpoint(repo_id=\"mistralai/Mixtral-8x7B-Instruct-v0.1\")\n\nprompt = \"\"\"&lt;s&gt;[INST] Context information is below.\\\\n\n        It includes the five most relevant messages to the query, sorted based on their relevance to the query.\\\\n\n        ---------------------\\\\n\n        {context_str}\\\\\\\\n\n        ---------------------\\\\n\n        Given the context information and not prior knowledge,\n        answer the query. Please be brief, concise, and complete.\\\\n\n        If the context information does not contain an answer to the query,\n        respond with \\\\\"No information\\\\\".\\\\n\n        Query: {query_str}[/INST] &lt;/s&gt;\"\"\"\n\nprompt = PromptTemplate(template=prompt, input_variables=[\"query_str\", \"context_str\"])\n\nllm_chain = prompt | llm\n\nanswer = llm_chain.invoke({\"query_str\":query, \"context_str\":reranked_messages})\n\nprint(f\"\\n\\nANSWER:\\n\\n{answer}\")</code></pre><p>我們問題的答案是：</p><blockquote>「根據上下文資訊，User5 似乎是你團隊中最了解加密協議的人。他們提到新協議顯著提高了資料安全性，特別是在雲端部署方面。」</blockquote><p>如果你閱讀 <code>chat_history.json</code> 中的訊息，你可以自行驗證 User5 是否確實是最專業的用戶。</p><h2 id=\"summary\">總結</h2><p>我們已經看到如何設置 Milvus Lite、使用 Jina Embeddings v2 嵌入聊天資料，以及使用 Jina Reranker v1 優化搜尋結果，這些都應用在搜尋 Slack 聊天歷史的實際案例中。Milvus Lite 簡化了 Python 應用程式開發，無需複雜的服務器設置。它與 Jina Embeddings 和 Reranker 的整合，旨在讓您更輕鬆地獲取工作場所中的重要資訊，從而提高生產力。</p><h2 id=\"use-jina-ai-models-and-milvus-now\"><strong>立即使用 Jina AI 模型和 Milvus</strong></h2><p>集成了 <a href=\"https://jina.ai/embeddings?ref=jina-ai-gmbh.ghost.io\"><u>Jina Embeddings</u></a> 和 <a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><u>Reranker</u></a> 的 <a href=\"https://milvus.io/docs/integrate_with_jina.md?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\"><u>Milvus Lite</u></a> 為您提供完整的處理流程，只需幾行程式碼即可使用。</p><p>我們很想聽聽您的使用案例，並討論 Jina AI Milvus 擴展如何滿足您的業務需求。通過<a href=\"https://jina.ai/contact-sales?ref=jina-ai-gmbh.ghost.io\"><u>我們的網站</u></a>或<a href=\"https://discord.jina.ai/?ref=jina-ai-gmbh.ghost.io\"><u>我們的 Discord 頻道</u></a>與我們聯繫，分享您的回饋並了解我們最新的模型。如果您對 Milvus 和 Jina AI 的整合有任何疑問，歡迎加入 <a href=\"https://milvus.io/community?ref=jina-ai-gmbh.ghost.io\"><u>Milvus 社群</u></a>。</p>",
  "comment_id": "665d76034b4b4c0001ba1bb3",
  "feature_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/06/Blog-images--39-.jpg",
  "featured": false,
  "visibility": "public",
  "created_at": "2024-06-03T09:51:31.000+02:00",
  "updated_at": "2024-07-08T21:08:43.000+02:00",
  "published_at": "2024-06-03T16:09:33.000+02:00",
  "custom_excerpt": "Enhance your search applications in Python with Jina Embeddings and Reranker and lightweight, easy-to-deploy Milvus Lite.\n",
  "codeinjection_head": null,
  "codeinjection_foot": null,
  "custom_template": null,
  "canonical_url": null,
  "authors": [
    {
      "id": "65e85e35b22368000152a4bf",
      "name": "Francesco Kruk",
      "slug": "francesco",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/03/Portrait-Picture_Low.jpg",
      "cover_image": null,
      "bio": null,
      "website": null,
      "location": null,
      "facebook": null,
      "twitter": null,
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/francesco/"
    },
    {
      "id": "641c23a2f4d50d003d590474",
      "name": "Saahil Ognawala",
      "slug": "saahil",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2023/03/profile-option-2.jpg",
      "cover_image": null,
      "bio": "Senior Product Manager at Jina AI",
      "website": "http://www.saahilognawala.com/",
      "location": "Munich, DE",
      "facebook": null,
      "twitter": "@saahil",
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/saahil/"
    }
  ],
  "tags": [
    {
      "id": "634a1a8ccebfc1003d8ab706",
      "name": "Tech Blog",
      "slug": "tech-blog",
      "description": null,
      "feature_image": null,
      "visibility": "public",
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "canonical_url": null,
      "accent_color": null,
      "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
    }
  ],
  "primary_author": {
    "id": "65e85e35b22368000152a4bf",
    "name": "Francesco Kruk",
    "slug": "francesco",
    "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/03/Portrait-Picture_Low.jpg",
    "cover_image": null,
    "bio": null,
    "website": null,
    "location": null,
    "facebook": null,
    "twitter": null,
    "meta_title": null,
    "meta_description": null,
    "url": "https://jina-ai-gmbh.ghost.io/author/francesco/"
  },
  "primary_tag": {
    "id": "634a1a8ccebfc1003d8ab706",
    "name": "Tech Blog",
    "slug": "tech-blog",
    "description": null,
    "feature_image": null,
    "visibility": "public",
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "canonical_url": null,
    "accent_color": null,
    "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
  },
  "url": "https://jina-ai-gmbh.ghost.io/podcast/implementing-a-chat-history-rag-with-jina-ai-and-milvus-lite/",
  "excerpt": "使用 Jina Embeddings、Reranker 以及輕量化且易於部署的 Milvus Lite，在 Python 中強化你的搜尋應用程式。",
  "reading_time": 6,
  "access": true,
  "comments": false,
  "og_image": null,
  "og_title": null,
  "og_description": null,
  "twitter_image": null,
  "twitter_title": null,
  "twitter_description": null,
  "meta_title": null,
  "meta_description": null,
  "email_subject": null,
  "frontmatter": null,
  "feature_image_alt": "Black background with vivid geometric shapes on the sides and central logos \"Embeddings,\" \"Reranker,\" and \"Milvus.\"",
  "feature_image_caption": null
}