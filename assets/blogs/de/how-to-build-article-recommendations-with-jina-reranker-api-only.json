{
  "slug": "how-to-build-article-recommendations-with-jina-reranker-api-only",
  "id": "65f53dc48ff065000146db23",
  "uuid": "70844a2b-50c2-458a-a609-a5bb11530451",
  "title": "Wie man Artikelempfehlungen nur mit der Jina Reranker API erstellt",
  "html": "<p>Wir haben vor zwei Wochen die <a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\">Reranker API</a> vorgestellt und sie als führende Reranking-Lösung am Markt etabliert. Jina Reranker übertrifft <a href=\"https://jina.ai/news/maximizing-search-relevancy-and-rag-accuracy-with-jina-reranker?ref=jina-ai-gmbh.ghost.io\">beliebte Baselines in verschiedenen Benchmarks und zeigt eine signifikante Steigerung von bis zu +33% in der Trefferquote gegenüber BM25-Ergebnissen.</a> Während die Leistung beeindruckend ist, begeistert mich besonders das Potenzial der Reranker API. Ihre unkomplizierte Schnittstelle ermöglicht die Eingabe einer Query-Dokumenten-Liste und gibt direkt die neu geordneten Top-k-Ergebnisse aus. Das bedeutet theoretisch, dass man ein Such- oder Empfehlungssystem ausschließlich mit dem Reranker aufbauen könnte - ohne BM25, Embeddings, Vektordatenbanken oder andere Pipelines, und so End-to-End-Funktionalität erreicht.</p><p>Dieses Konzept hat mich so fasziniert, dass ich es unbedingt ausprobieren wollte. Und so funktioniert es: Wenn Sie jetzt auf einer beliebigen News-Seite unserer Website, wie der, die Sie gerade lesen, die Taste <code><strong>@</strong></code> drücken und auf den Button \"get top 5 related articles\" klicken, erhalten Sie innerhalb von etwa 5 Sekunden die fünf relevantesten Artikel zum aktuellen Artikel, unter Verwendung des <code>jina-reranker-v1</code> Modells (etwas länger für das <code>jina-colbert-v1</code> Modell). Alle Berechnungen erfolgen online und werden vollständig von der Reranker API verwaltet. Unten sehen Sie ein Video, das die Funktionsweise demonstriert:</p><figure class=\"kg-card kg-video-card kg-width-regular kg-card-hascaption\" data-kg-thumbnail=\"https://jina-ai-gmbh.ghost.io/content/media/2024/03/recommender_thumb.jpg\" data-kg-custom-thumbnail=\"\">\n            <div class=\"kg-video-container\">\n                <video src=\"https://jina-ai-gmbh.ghost.io/content/media/2024/03/recommender.mp4\" poster=\"https://img.spacergif.org/v1/1174x796/0a/spacer.png\" width=\"1174\" height=\"796\" playsinline=\"\" preload=\"metadata\" style=\"background: transparent url('https://jina-ai-gmbh.ghost.io/content/media/2024/03/recommender_thumb.jpg') 50% 50% / cover no-repeat;\"></video>\n                <div class=\"kg-video-overlay\">\n                    <button class=\"kg-video-large-play-icon\" aria-label=\"Play video\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                            <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                        </svg>\n                    </button>\n                </div>\n                <div class=\"kg-video-player-container\">\n                    <div class=\"kg-video-player\">\n                        <button class=\"kg-video-play-icon\" aria-label=\"Play video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-pause-icon kg-video-hide\" aria-label=\"Pause video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <rect x=\"3\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                                <rect x=\"14\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                            </svg>\n                        </button>\n                        <span class=\"kg-video-current-time\">0:00</span>\n                        <div class=\"kg-video-time\">\n                            /<span class=\"kg-video-duration\">0:33</span>\n                        </div>\n                        <input type=\"range\" class=\"kg-video-seek-slider\" max=\"100\" value=\"0\">\n                        <button class=\"kg-video-playback-rate\" aria-label=\"Adjust playback speed\">1×</button>\n                        <button class=\"kg-video-unmute-icon\" aria-label=\"Unmute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M15.189 2.021a9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1.794a.249.249 0 0 1 .221.133 9.73 9.73 0 0 0 7.924 4.85h.06a1 1 0 0 0 1-1V3.02a1 1 0 0 0-1.06-.998Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-mute-icon kg-video-hide\" aria-label=\"Mute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M16.177 4.3a.248.248 0 0 0 .073-.176v-1.1a1 1 0 0 0-1.061-1 9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h.114a.251.251 0 0 0 .177-.073ZM23.707 1.706A1 1 0 0 0 22.293.292l-22 22a1 1 0 0 0 0 1.414l.009.009a1 1 0 0 0 1.405-.009l6.63-6.631A.251.251 0 0 1 8.515 17a.245.245 0 0 1 .177.075 10.081 10.081 0 0 0 6.5 2.92 1 1 0 0 0 1.061-1V9.266a.247.247 0 0 1 .073-.176Z\"></path>\n                            </svg>\n                        </button>\n                        <input type=\"range\" class=\"kg-video-volume-slider\" max=\"100\" value=\"100\">\n                    </div>\n                </div>\n            </div>\n            <figcaption><p><span style=\"white-space: pre-wrap;\">Um diese Demo auszuführen, benötigen Sie einen API-Schlüssel mit ausreichend Tokens. Wenn Ihr Kontingent aufgebraucht ist und Sie die Demo nicht ausführen können, können Sie unter </span><a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\" target=\"_new\"><span style=\"white-space: pre-wrap;\">https://jina.ai/reranker</span></a><span style=\"white-space: pre-wrap;\"> einen neuen Schlüssel generieren. Jeder neue Schlüssel kommt mit 1 Million kostenlosen Tokens. </span></p></figcaption>\n        </figure><h2 id=\"implementation\">Implementierung</h2><p>Die Implementierung ist sehr einfach: Um die verwandtesten Artikel zu einem gegebenen Artikel auf <code>jina.ai/news/</code> zu finden, verwenden wir den aktuell gelesenen Artikel <strong>als Query</strong> und alle anderen 230+ Artikel (mit ihrem vollständigen Text!) auf unserer News-Seite <strong>als Dokumente</strong>, natürlich ohne den aktuellen Artikel. Dann senden wir diese $(q, d_1, d_2, \\cdots, d_{230})$ als Payload an die Reranker API. Sobald die Antwort empfangen wird, verwenden wir den sortierten Dokumentenindex zur Anzeige der Ergebnisse. Der zugrundeliegende Code sieht wie folgt aus:</p><pre><code class=\"language-js\">const getRecommendedArticles = async () =&gt; {\n  \n  const query = `${currentNews.title} ${currentNews.excerpt}`;\n  const docs = newsStore.allBlogs.filter((item) =&gt; item.slug !== currentNews.slug);\n  \n  const data = {\n    model: modelName,\n    query: query,\n    documents: docs,\n    top_n: 5,\n  }\n\n  const rerankUrl = 'https://api.jina.ai/v1/rerank';\n  const headers = {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${apiKey}`,\n  };\n  const modelName = 'jina-reranker-v1-base-en';\n  \n  const res = await fetch(rerankUrl, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(data),\n  });\n\n  const resp = await res.json();\n\n  const topKList = resp.results.map((item) =&gt; {\n    return docs[item.index];\n  });\n\n  console.log(topKList);\n}</code></pre><figure class=\"kg-card kg-bookmark-card kg-card-hascaption\"><a class=\"kg-bookmark-container\" href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Reranker API</div><div class=\"kg-bookmark-description\">Maximize the search relevancy and RAG accuracy at ease</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jina.ai/icons/favicon-128x128.png\" alt=\"\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jina.ai/banner-reranker-api.png\" alt=\"\"></div></a><figcaption><p><span style=\"white-space: pre-wrap;\">Um einen API-Schlüssel zu erhalten, besuchen Sie einfach unsere Reranker API-Seite und navigieren Sie zum API-Bereich. Wenn Sie bereits einen API-Schlüssel von unserer Embedding API besitzen, können Sie diesen hier wiederverwenden.</span></p></figcaption></figure><p>Und schon sehen Sie die Ergebnisse, die für eine erste Iteration recht vielversprechend sind, besonders wenn man bedenkt, dass der Implementierungsprozess etwa 10 Minuten dauert.</p><p>Während Leser möglicherweise Bedenken bezüglich dieser Implementierung haben, könnten einige Kritikpunkte überbewertet sein, während andere durchaus berechtigt sind:</p><ul><li><strong>Bedenken hinsichtlich zu langer Volltexte und der Notwendigkeit des Chunking könnten überbewertet sein</strong>: Das <code>jina-reranker-v1</code> Modell kann Queries bis zu einer Länge von 512 und Dokumente beliebiger Länge verarbeiten, während das <code>jina-colbert-v1</code> Modell bis zu 8192 für beide verarbeiten kann. Daher ist die Eingabe des vollständigen Textes in die Reranker API wahrscheinlich unnötig. Beide Modelle handhaben lange Kontexte effizient, also besteht kein Grund zur Sorge. Chunking, möglicherweise der aufwendigste und heuristische Aspekt der Embedding-Vector-Search-Rerank-Pipeline, ist hier weniger problematisch. Allerdings bedeuten längere Kontexte mehr Tokens, was für unsere zahlenden API-Nutzer ein Aspekt sein könnte, den sie berücksichtigen müssen. In diesem Beispiel kostet eine Rerank-Anfrage aufgrund der Verwendung des Volltextes aller 233 Artikel über 300.000 Tokens.</li><li><strong>Der Einfluss von Roh- versus bereinigten Daten auf die Qualität</strong>. Das Hinzufügen von Datenbereinigung könnte tatsächlich zu Verbesserungen führen. Zum Beispiel haben wir beobachtet, dass allein das Entfernen von HTML-Tags (d.h. <code>docs.map(item =&gt; item.html.replace(/&lt;[^&gt;]*&gt;?/gm, '')</code>) die Empfehlungsqualität für das <code>jina-reranker-v1</code> Modell deutlich verbessert, wobei der Effekt beim <code>jina-colbert-v1</code> Modell weniger ausgeprägt ist. Dies deutet darauf hin, dass unser ColBERT-Modell trainiert wurde, um verrauschten Text besser zu tolerieren als das <code>jina-reranker-v1</code> Modell.</li><li><strong>Der Einfluss verschiedener Query-Konstruktionen auf die Qualität.</strong> In der obigen Implementierung haben wir den Titel und den Auszug des aktuellen Artikels direkt als Query verwendet. Ist dies der optimale Ansatz zur Konstruktion der Query? Würde das Hinzufügen eines Präfixes wie <code>\"What is the most related article to...\"</code> oder<code>\"Ich gebe dir 20 $ Trinkgeld, wenn du den besten Artikel empfiehlst,\"</code> ähnlich wie bei Prompts für große Sprachmodelle, von Nutzen sein? Dies wirft eine interessante Frage auf, die wahrscheinlich mit der Trainings-Datenverteilung des Modells zusammenhängt und die wir weiter untersuchen möchten.</li><li>Aufbauend auf dem vorherigen Punkt zur Query-Konstruktion wäre es interessant, die kompositionellen Fähigkeiten der Query weiter zu untersuchen, wie zum Beispiel die Nutzung des kürzlichen Browserverlaufs eines Nutzers für personalisierte Empfehlungen. Besonders interessant ist die Frage, ob das System nicht nur positive Beispiele in der Query verstehen könnte, <strong>sondern auch negative</strong>, z.B. <code>NOT_LIKE</code> Operatoren, <code>\"Empfiehl mir keine Artikel wie diesen\"</code> oder <code>\"Ich möchte weniger davon sehen\"</code>. Darauf werden wir im nächsten Abschnitt näher eingehen.</li></ul><h2 id=\"empirical-study-on-query-writing\">Empirische Studie zum Query Writing</h2><p>In unserer Untersuchung verschiedener Query-Schreibweisen mit der Jina Reranker API, mit Fokus auf die Top-10 Ergebnisse, führten wir eine qualitative Bewertung durch manuelles Labeling durch (d.h. von uns selbst bewertet), was sinnvoll ist, da wir vollständige Kenntnis über alle auf unserer Website veröffentlichten Inhalte haben. Die untersuchten Strategien beim Query Writing umfassten:</p><ul><li>Verwendung des Artikel-Titels, des Auszugs und einer Kombination aus Titel + Auszug.</li><li>\"Prompt\"-artige Anweisungen wie \"mehr wie dies\", \"nicht wie dies\" und \"welcher Artikel ist am engsten verwandt?\"</li></ul><p>Um die Effektivität des Rerankers zu testen, wählten wir zwei nicht-triviale Artikel als unsere Query-Subjekte aus, mit dem Ziel, die relevantesten Artikel aus unserem umfangreichen Katalog von über 200+ Beiträgen zu identifizieren - eine Herausforderung, die von der \"Nadel im Heuhaufen\" bei LLMs inspiriert wurde. Unten haben wir diese \"Nadeln\" zur Verdeutlichung grün markiert.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/03/image.png\" class=\"kg-image\" alt=\"Screenshot of a table ranking articles on search technology relevance, featuring titles, excerpts, and 'More Like' or 'Not Li\" loading=\"lazy\" width=\"2000\" height=\"758\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/03/image.png 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2024/03/image.png 1000w, https://jina-ai-gmbh.ghost.io/content/images/size/w1600/2024/03/image.png 1600w, https://jina-ai-gmbh.ghost.io/content/images/size/w2400/2024/03/image.png 2400w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">Die umfassenden Ergebnisse unserer Studie sind detailliert </span><a href=\"https://docs.google.com/spreadsheets/d/1XDOXjP6IVK1hXk3gKkng_cOpTrmS9Hm1UKCGvW1wMxU/edit?usp=sharing&ref=jina-ai-gmbh.ghost.io\"><span style=\"white-space: pre-wrap;\">in dieser Tabelle</span></a><span style=\"white-space: pre-wrap;\"> aufgeführt.</span></figcaption></figure><h2 id=\"summary\">Zusammenfassung</h2><p>Basierend auf den Testergebnissen haben wir einige Beobachtungen und Zusammenfassungen gemacht:</p><ol><li>Die Kombination von Titel und Auszug liefert die besten Reranking-Ergebnisse, wobei der Auszug eine wichtige Rolle bei der Verbesserung der Reranking-Qualität spielt.</li><li>Die Einbindung von \"Prompt\"-artigen Anweisungen führt zu keiner Verbesserung.</li><li>Das Reranker-Modell verarbeitet derzeit positive oder negative Qualifikatoren nicht effektiv. Begriffe wie \"mehr wie\", \"weniger wie\" oder \"nicht wie\" werden vom Reranker nicht verstanden.</li></ol><p>Die Erkenntnisse aus den Punkten 2 und 3 bieten interessante Ansätze für zukünftige Verbesserungen des Rerankers. Wir glauben, dass die Ermöglichung von On-the-fly-Prompting zur Änderung der Sortierlogik die Fähigkeiten des Rerankers erheblich erweitern könnte, wodurch neue potenzielle Anwendungen wie personalisierte Inhaltskuration/Empfehlung erschlossen werden könnten.</p>",
  "comment_id": "65f53dc48ff065000146db23",
  "feature_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/03/Heading--1-.png",
  "featured": false,
  "visibility": "public",
  "created_at": "2024-03-16T07:35:48.000+01:00",
  "updated_at": "2024-03-17T19:26:09.000+01:00",
  "published_at": "2024-03-17T06:38:36.000+01:00",
  "custom_excerpt": "You can build an article recommendation system with just the Jina Reranker API—no pipeline, no embeddings, no vector search, only reranking. Find out how in 20 lines of code.",
  "codeinjection_head": null,
  "codeinjection_foot": null,
  "custom_template": null,
  "canonical_url": null,
  "authors": [
    {
      "id": "1",
      "name": "Engineering Group",
      "slug": "engineering",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/11/1.png",
      "cover_image": null,
      "bio": "We do opensource, we do neural search, we do creative AI, we do MLOps. We do we.",
      "website": "https://github.com/jina-ai",
      "location": "Berlin, Germany",
      "facebook": null,
      "twitter": "@jinaai_",
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/engineering/"
    }
  ],
  "tags": [
    {
      "id": "634a1a8ccebfc1003d8ab706",
      "name": "Tech Blog",
      "slug": "tech-blog",
      "description": null,
      "feature_image": null,
      "visibility": "public",
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "canonical_url": null,
      "accent_color": null,
      "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
    }
  ],
  "primary_author": {
    "id": "1",
    "name": "Engineering Group",
    "slug": "engineering",
    "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/11/1.png",
    "cover_image": null,
    "bio": "We do opensource, we do neural search, we do creative AI, we do MLOps. We do we.",
    "website": "https://github.com/jina-ai",
    "location": "Berlin, Germany",
    "facebook": null,
    "twitter": "@jinaai_",
    "meta_title": null,
    "meta_description": null,
    "url": "https://jina-ai-gmbh.ghost.io/author/engineering/"
  },
  "primary_tag": {
    "id": "634a1a8ccebfc1003d8ab706",
    "name": "Tech Blog",
    "slug": "tech-blog",
    "description": null,
    "feature_image": null,
    "visibility": "public",
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "canonical_url": null,
    "accent_color": null,
    "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
  },
  "url": "https://jina-ai-gmbh.ghost.io/podcast/how-to-build-article-recommendations-with-jina-reranker-api-only/",
  "excerpt": "Mit der Jina Reranker API können Sie ein Artikel-Empfehlungssystem erstellen – ohne Pipeline, ohne Embeddings, ohne Vector Search, nur mit Reranking. Erfahren Sie, wie das in 20 Codezeilen funktioniert.",
  "reading_time": 5,
  "access": true,
  "comments": false,
  "og_image": null,
  "og_title": null,
  "og_description": null,
  "twitter_image": null,
  "twitter_title": null,
  "twitter_description": null,
  "meta_title": null,
  "meta_description": null,
  "email_subject": null,
  "frontmatter": null,
  "feature_image_alt": "Black background with a grid, multiple smiley faces, and a cursor pointing to one of them.",
  "feature_image_caption": null
}