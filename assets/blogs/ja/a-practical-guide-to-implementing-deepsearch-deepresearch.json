{
  "slug": "a-practical-guide-to-implementing-deepsearch-deepresearch",
  "id": "67bc50b0b1b8af00014db4c9",
  "uuid": "acd44dc0-e356-4ac8-93c7-fa8bbeb33265",
  "title": "DeepSearch/DeepResearch 実装の実践ガイド",
  "html": "<figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://search.jina.ai/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Jina AI Deep Search</div><div class=\"kg-bookmark-description\">AI ディープサーチ：最適な回答が見つかるまで、読み、考え、検索する。</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jina-ai-gmbh.ghost.io/content/images/icon/favicon-30.ico\" alt=\"\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/thumbnail/banner-2.png\" alt=\"\" onerror=\"this.style.display = 'none'\"></div></a></figure><p>まだ 2 月なのに、DeepSearch はすでに 2025 年の新しい検索基準として台頭しており、<a href=\"https://blog.google/products/gemini/google-gemini-deep-research/\">Google</a> や <a href=\"https://openai.com/index/introducing-deep-research/\">OpenAI</a> が DeepResearch のリリースを通じて先頭に立っています（そして、はい、<a href=\"https://x.com/hxiao/status/1886250705415229627\">私たちは誇らしげに同じ日にオープンソースの <code>node-deepresearch</code> をローンチしました</a>）。<a href=\"https://www.perplexity.ai/hub/blog/introducing-perplexity-deep-research\">Perplexity</a> も DeepResearch で追随し、X AI は <a href=\"https://x.ai/blog/grok-3\">Grok3</a> に独自の DeepSearch 機能を統合し、基本的に別の DeepResearch バリアントを作り出しました。ディープサーチの概念は革新的なものではありません - 2024 年には本質的に RAG やマルチホップ QA と呼ばれていましたが、2025 年 1 月末の <a href=\"https://github.com/deepseek-ai/DeepSeek-R1\">Deepseek-r1</a> のリリース後に大きな勢いを得ました。先週末には、<a href=\"https://www.scmp.com/tech/big-tech/article/3298981/baidu-adopts-deepseek-ai-models-chasing-tencent-race-embrace-hot-start\">百度検索とテンセント WeChat 検索</a>が検索エンジンに Deepseek-r1 を統合しました。AI エンジニアたちは、検索システムに長考と推論プロセスを組み込むことで、これまで不可能だった検索の精度と深さを実現できることを発見しました。</p>\n<!--kg-card-begin: html-->\n<table> <thead> <tr> <th>Launch Date</th> <th>Company</th> <th>Product</th> <th>License Type</th> <th>Link</th> </tr> </thead> <tbody> <tr> <td>2025-01-20</td> <td>DeepSeek</td> <td>DeepSeek-r1 release</td> <td>Open source</td> <td><a href=\"https://api-docs.deepseek.com/news/news250120\">DeepSeek-R1</a></td> </tr> <tr> <td>2025-02-02</td> <td>Google</td> <td>DeepResearch</td> <td>Proprietary</td> <td><a href=\"https://blog.google/products/gemini/google-gemini-deep-research/\">Google Gemini 2</a></td> </tr> <tr> <td>2025-02-02</td> <td>OpenAI</td> <td>DeepResearch</td> <td>Proprietary</td> <td><a href=\"https://openai.com/index/introducing-deep-research/\">Introducing Deep Research</a></td> </tr> <tr> <td>2025-02-02</td> <td>Jina AI</td> <td>DeepSearch (<code>node-deepresearch</code>)</td> <td>Open source</td> <td><a href=\"https://github.com/jina-ai/node-deepresearch\">node-deepresearch</a> | <a href=\"https://search.jina.ai\">search.jina.ai</a></td> </tr> <tr> <td>2025-02-04</td> <td>Hugging Face</td> <td>Open Deep Research</td> <td>Open source</td> <td><a href=\"https://huggingface.co/blog/open-deep-research\">Open Deep Research</a></td> </tr> <tr> <td>2025-02-15</td> <td>Perplexity</td> <td>DeepResearch</td> <td>Proprietary</td> <td><a href=\"https://www.perplexity.ai/hub/blog/introducing-perplexity-deep-research\">Introducing Perplexity Deep Research</a></td> </tr> <tr> <td>2025-02-17</td> <td>X AI</td> <td>Grok3 with DeepSearch</td> <td>Proprietary</td> <td><a href=\"https://x.ai/blog/grok-3\">Grok 3 Beta</a></td> </tr> <tr> <td>2025-02-22</td> <td>Baidu Search</td> <td>Integrates DeepSeek-r1</td> <td>Proprietary</td> <td><a href=\"https://chat.baidu.com/search?isShowHello=1&pd=csaitab&setype=csaitab&extParamsJson=%7B%22enter_type%22%3A%22ai_explore_home%22%7D&usedModel=%7B%22modelName%22%3A%22DeepSeek-R1%22%7D\">Baidu Integrates DeepSeek-R1</a></td> </tr> <tr> <td>2025-02-23</td> <td>Tencent Wechat Search</td> <td>Integrates DeepSeek-r1</td> <td>Proprietary</td> <td><a href=\"https://www.reuters.com/technology/artificial-intelligence/tencents-messaging-app-weixin-launches-beta-testing-with-deepseek-2025-02-16/\">Tencent Weixin Integrates DeepSeek</a></td> </tr> </tbody> </table>\n<!--kg-card-end: html-->\n<p>しかし、なぜこの変化が今起こったのでしょうか？Deep(Re)Search は 2024 年を通じて比較的過小評価されていました。実際、<a href=\"https://storm-project.stanford.edu/research/storm/\">スタンフォード NLP ラボは 2024 年初頭に STORM</a> プロジェクトをウェブベースの長文レポート生成のためにリリースしています。では、単に「DeepSearch」がマルチホップ QA、RAG、STORM よりもクールに聞こえるからなのでしょうか？正直に言えば、業界が以前からあったものを突然受け入れるためには、時にはリブランディングだけで十分なのです。</p><p>私たちは、真の転換点は 2024 年 9 月の OpenAI の <code>o1-preview</code> リリースで、**テストタイム計算**の概念を導入し、業界の見方を徐々に変えたことだと考えています。テストタイム計算とは、事前学習や事後学習ではなく、推論段階（LLM が出力を生成する段階）でより多くの計算リソースを使用することを指します。よく知られている例として、思考連鎖（CoT）推論や <a href=\"https://github.com/simplescaling/s1?tab=readme-ov-file#vllm-with-budget-forcing\"><code>\"Wait\"</code>-injection</a>（予算強制）があり、これにより、モデルは最終的な応答に到達する前に、複数の潜在的な回答の評価、より深い計画立案、自己反省などの広範な内部検討を実行できます。</p><p>このテストタイム計算の概念と推論モデルは、ユーザーに<a href=\"https://en.wikipedia.org/wiki/Delayed_gratification\">遅延満足</a>を受け入れるよう**教育**します - より質の高い、すぐに実行可能な結果を得るためにより長い待ち時間を受け入れることを、ちょうどスタンフォードのマシュマロ実験で、1つのマシュマロをすぐに食べずに我慢して後で2つのマシュマロを受け取ることができた子供たちが、より良い長期的な結果を示したのと同様です。Deepseek-r1 はさらにこのユーザー体験を強化し、好むと好まざるとにかかわらず、ほとんどのユーザーがこれを受け入れています。</p><p>これは、200ms 以内に応答できないと解決策が失敗とみなされた従来の検索要件からの大きな転換です。2025 年には、経験豊富な検索開発者と RAG エンジニアは、レイテンシーよりも top-1 の精度とリコールを優先し、ユーザーは、システムが<code>&lt;thinking&gt;</code>していることを確認できる限り、より長い処理時間に慣れてきています。</p><figure class=\"kg-card kg-video-card kg-width-regular kg-card-hascaption\" data-kg-thumbnail=\"https://jina-ai-gmbh.ghost.io/content/media/2025/02/think-ui-1_thumb.jpg\" data-kg-custom-thumbnail=\"\">\n            <div class=\"kg-video-container\">\n                <video src=\"https://jina-ai-gmbh.ghost.io/content/media/2025/02/think-ui-1.mp4\" poster=\"https://img.spacergif.org/v1/1610x1422/0a/spacer.png\" width=\"1610\" height=\"1422\" loop=\"\" autoplay=\"\" muted=\"\" playsinline=\"\" preload=\"metadata\" style=\"background: transparent url('https://jina-ai-gmbh.ghost.io/content/media/2025/02/think-ui-1_thumb.jpg') 50% 50% / cover no-repeat;\"></video>\n                <div class=\"kg-video-overlay\">\n                    <button class=\"kg-video-large-play-icon\" aria-label=\"Play video\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                            <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                        </svg>\n                    </button>\n                </div>\n                <div class=\"kg-video-player-container kg-video-hide\">\n                    <div class=\"kg-video-player\">\n                        <button class=\"kg-video-play-icon\" aria-label=\"Play video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-pause-icon kg-video-hide\" aria-label=\"Pause video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <rect x=\"3\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                                <rect x=\"14\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                            </svg>\n                        </button>\n                        <span class=\"kg-video-current-time\">0:00</span>\n                        <div class=\"kg-video-time\">\n                            /<span class=\"kg-video-duration\">0:18</span>\n                        </div>\n                        <input type=\"range\" class=\"kg-video-seek-slider\" max=\"100\" value=\"0\">\n                        <button class=\"kg-video-playback-rate\" aria-label=\"Adjust playback speed\">1×</button>\n                        <button class=\"kg-video-unmute-icon\" aria-label=\"Unmute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M15.189 2.021a9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1.794a.249.249 0 0 1 .221.133 9.73 9.73 0 0 0 7.924 4.85h.06a1 1 0 0 0 1-1V3.02a1 1 0 0 0-1.06-.998Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-mute-icon kg-video-hide\" aria-label=\"Mute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M16.177 4.3a.248.248 0 0 0 .073-.176v-1.1a1 1 0 0 0-1.061-1 9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h.114a.251.251 0 0 0 .177-.073ZM23.707 1.706A1 1 0 0 0 22.293.292l-22 22a1 1 0 0 0 0 1.414l.009.009a1 1 0 0 0 1.405-.009l6.63-6.631A.251.251 0 0 1 8.515 17a.245.245 0 0 1 .177.075 10.081 10.081 0 0 0 6.5 2.92 1 1 0 0 0 1.061-1V9.266a.247.247 0 0 1 .073-.176Z\"></path>\n                            </svg>\n                        </button>\n                        <input type=\"range\" class=\"kg-video-volume-slider\" max=\"100\" value=\"100\">\n                    </div>\n                </div>\n            </div>\n            <figcaption><p><span style=\"white-space: pre-wrap;\">2025年になると、多くのチャットインターフェースが </span><code spellcheck=\"false\" style=\"white-space: pre-wrap;\"><span>&lt;think&gt;</span></code><span style=\"white-space: pre-wrap;\"> の内容を専用の UI セクションでレンダリングするようになり、推論プロセスの表示が標準的な実践となりました。</span></p></figcaption>\n        </figure><p>この記事では、オープンソースの実装を見ることで、DeepSearch と DeepResearch の原理について説明します。主要な設計上の決定と潜在的な注意点について説明していきます。</p><h2 id=\"what-is-deep-search\">Deep Search とは何か？</h2><p><strong>DeepSearch は、最適な回答を見つけるまで、検索、読解、推論のループを繰り返し実行します。</strong>検索アクションはウェブ検索エンジンを活用してインターネットを探索し、読解アクションは特定のウェブページを詳細に分析します（例：<a href=\"https://jina.ai/reader\" rel=\"noreferrer\">Jina Reader</a>）。推論アクションは現在の状態を評価し、元の質問をより小さなサブクエスチョンに分解するか、異なる検索戦略を試すかを判断します。</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2025/02/image.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"2000\" height=\"561\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2025/02/image.png 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2025/02/image.png 1000w, https://jina-ai-gmbh.ghost.io/content/images/size/w1600/2025/02/image.png 1600w, https://jina-ai-gmbh.ghost.io/content/images/2025/02/image.png 2240w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">DeepSearch - 回答が見つかる（またはトークン予算を超える）まで、検索、ウェブページの読解、推論を継続します。</span></figcaption></figure><p>オンラインにはさまざまな定義が存在しますが、私たちが <code>node-deepresearch</code> プロジェクトを開発した際は、このシンプルなアプローチに従いました。実装は優雅にシンプルで、コアには次のアクションを指示する switch-case ロジックを持つメインの while ループがあります。</p><p>2024年の RAG システムは通常、単一の検索-生成パスを実行するのに対し、DeepSearch は複数回のパイプライン反復を実行するため、明確な停止条件が必要です。これらはトークン使用制限や失敗試行回数に基づくことができます。</p><figure class=\"kg-card kg-video-card kg-width-regular kg-card-hascaption\" data-kg-thumbnail=\"https://jina-ai-gmbh.ghost.io/content/media/2025/02/deepsearch-dark-1_thumb.jpg\" data-kg-custom-thumbnail=\"\">\n            <div class=\"kg-video-container\">\n                <video src=\"https://jina-ai-gmbh.ghost.io/content/media/2025/02/deepsearch-dark-1.mp4\" poster=\"https://img.spacergif.org/v1/1238x1300/0a/spacer.png\" width=\"1238\" height=\"1300\" loop=\"\" autoplay=\"\" muted=\"\" playsinline=\"\" preload=\"metadata\" style=\"background: transparent url('https://jina-ai-gmbh.ghost.io/content/media/2025/02/deepsearch-dark-1_thumb.jpg') 50% 50% / cover no-repeat;\"></video>\n                <div class=\"kg-video-overlay\">\n                    <button class=\"kg-video-large-play-icon\" aria-label=\"Play video\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                            <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                        </svg>\n                    </button>\n                </div>\n                <div class=\"kg-video-player-container kg-video-hide\">\n                    <div class=\"kg-video-player\">\n                        <button class=\"kg-video-play-icon\" aria-label=\"Play video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-pause-icon kg-video-hide\" aria-label=\"Pause video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <rect x=\"3\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                                <rect x=\"14\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                            </svg>\n                        </button>\n                        <span class=\"kg-video-current-time\">0:00</span>\n                        <div class=\"kg-video-time\">\n                            /<span class=\"kg-video-duration\">0:36</span>\n                        </div>\n                        <input type=\"range\" class=\"kg-video-seek-slider\" max=\"100\" value=\"0\">\n                        <button class=\"kg-video-playback-rate\" aria-label=\"Adjust playback speed\">1×</button>\n                        <button class=\"kg-video-unmute-icon\" aria-label=\"Unmute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M15.189 2.021a9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1.794a.249.249 0 0 1 .221.133 9.73 9.73 0 0 0 7.924 4.85h.06a1 1 0 0 0 1-1V3.02a1 1 0 0 0-1.06-.998Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-mute-icon kg-video-hide\" aria-label=\"Mute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M16.177 4.3a.248.248 0 0 0 .073-.176v-1.1a1 1 0 0 0-1.061-1 9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h.114a.251.251 0 0 0 .177-.073ZM23.707 1.706A1 1 0 0 0 22.293.292l-22 22a1 1 0 0 0 0 1.414l.009.009a1 1 0 0 0 1.405-.009l6.63-6.631A.251.251 0 0 1 8.515 17a.245.245 0 0 1 .177.075 10.081 10.081 0 0 0 6.5 2.92 1 1 0 0 0 1.061-1V9.266a.247.247 0 0 1 .073-.176Z\"></path>\n                            </svg>\n                        </button>\n                        <input type=\"range\" class=\"kg-video-volume-slider\" max=\"100\" value=\"100\">\n                    </div>\n                </div>\n            </div>\n            <figcaption><p><span style=\"white-space: pre-wrap;\">search.jina.ai で Deep Search を試し、</span><code spellcheck=\"false\" style=\"white-space: pre-wrap;\"><span>&lt;thinking&gt;</span></code><span style=\"white-space: pre-wrap;\"> の中身を観察して、ループがどこで発生しているか確認してみてください</span></p></figcaption>\n        </figure><p>DeepSearch のもう一つの見方は、様々なウェブツール（検索エンジンやリーダーなど）を備えた LLM エージェントとして見ることです。エージェントは現在の観察と過去のアクションを分析して次のステップを決定し、回答を提供するかウェブの探索を続けるかを判断します。これにより、LLM が状態間の遷移を制御するステートマシンアーキテクチャが形成されます。各決定ポイントでは 2 つのアプローチがあります：標準的な生成モデルに対して特定のアクションを生成するようにプロンプトを慎重に作成するか、Deepseek-r1 のような専門的な推論モデルを活用して次のアクションを自然に導き出すかです。ただし、r1 を使用する場合でも、その生成を定期的に中断してツールの出力（検索結果やウェブページの内容など）をコンテキストに注入し、推論プロセスを継続するようプロンプトを与える必要があります。</p><p>結局のところ、これらは実装の詳細に過ぎません - 慎重にプロンプトを与えるか推論モデルを使用するかに関わらず、すべては DeepSearch の核となる設計原則である検索、読解、推論の継続的なループに沿っています。</p><h2 id=\"what-is-deepresearch-then\">では DeepResearch とは何か？</h2><p><strong>DeepResearch は DeepSearch の上に、長文の研究レポートを生成するための構造化されたフレームワークを追加したものです。</strong>通常、目次の作成から始まり、導入から関連研究、方法論、結論に至るまで、必要な各セクションに DeepSearch を体系的に適用します。各セクションは、特定の研究課題を DeepSearch に与えることで生成されます。最終段階では、全体的な物語の一貫性を向上させるために、すべてのセクションを単一のプロンプトにまとめます。</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2025/02/image-1.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"2000\" height=\"832\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2025/02/image-1.png 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2025/02/image-1.png 1000w, https://jina-ai-gmbh.ghost.io/content/images/size/w1600/2025/02/image-1.png 1600w, https://jina-ai-gmbh.ghost.io/content/images/2025/02/image-1.png 2268w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">DeepSearch は DeepResearch の構成要素です。DeepSearch を通じて各セクションを反復的に構築し、全体の一貫性を改善してから最終的な長文レポートを生成します。</span></figcaption></figure><p>2024 年の「Research」プロジェクトでは、他のすべてのセクションを考慮に入れながら、複数回の一貫性改善パスを実行しました。しかし、今日の大幅に拡大した LLM のコンテキストウィンドウでは、このアプローチは冗長に思えます。一回の一貫性改訂パスで十分です。</p><figure class=\"kg-card kg-video-card kg-width-regular kg-card-hascaption\" data-kg-thumbnail=\"https://jina-ai-gmbh.ghost.io/content/media/2025/02/deepresearch_thumb.jpg\" data-kg-custom-thumbnail=\"\">\n            <div class=\"kg-video-container\">\n                <video src=\"https://jina-ai-gmbh.ghost.io/content/media/2025/02/deepresearch.mp4\" poster=\"https://img.spacergif.org/v1/2940x1660/0a/spacer.png\" width=\"2940\" height=\"1660\" playsinline=\"\" preload=\"metadata\" style=\"background: transparent url('https://jina-ai-gmbh.ghost.io/content/media/2025/02/deepresearch_thumb.jpg') 50% 50% / cover no-repeat;\"></video>\n                <div class=\"kg-video-overlay\">\n                    <button class=\"kg-video-large-play-icon\" aria-label=\"Play video\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                            <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                        </svg>\n                    </button>\n                </div>\n                <div class=\"kg-video-player-container\">\n                    <div class=\"kg-video-player\">\n                        <button class=\"kg-video-play-icon\" aria-label=\"Play video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-pause-icon kg-video-hide\" aria-label=\"Pause video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <rect x=\"3\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                                <rect x=\"14\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                            </svg>\n                        </button>\n                        <span class=\"kg-video-current-time\">0:00</span>\n                        <div class=\"kg-video-time\">\n                            /<span class=\"kg-video-duration\">0:40</span>\n                        </div>\n                        <input type=\"range\" class=\"kg-video-seek-slider\" max=\"100\" value=\"0\">\n                        <button class=\"kg-video-playback-rate\" aria-label=\"Adjust playback speed\">1×</button>\n                        <button class=\"kg-video-unmute-icon\" aria-label=\"Unmute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M15.189 2.021a9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1.794a.249.249 0 0 1 .221.133 9.73 9.73 0 0 0 7.924 4.85h.06a1 1 0 0 0 1-1V3.02a1 1 0 0 0-1.06-.998Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-mute-icon kg-video-hide\" aria-label=\"Mute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M16.177 4.3a.248.248 0 0 0 .073-.176v-1.1a1 1 0 0 0-1.061-1 9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h.114a.251.251 0 0 0 .177-.073ZM23.707 1.706A1 1 0 0 0 22.293.292l-22 22a1 1 0 0 0 0 1.414l.009.009a1 1 0 0 0 1.405-.009l6.63-6.631A.251.251 0 0 1 8.515 17a.245.245 0 0 1 .177.075 10.081 10.081 0 0 0 6.5 2.92 1 1 0 0 0 1.061-1V9.266a.247.247 0 0 1 .073-.176Z\"></path>\n                            </svg>\n                        </button>\n                        <input type=\"range\" class=\"kg-video-volume-slider\" max=\"100\" value=\"100\">\n                    </div>\n                </div>\n            </div>\n            <figcaption><p><span style=\"white-space: pre-wrap;\">2024 年夏のプロジェクト「Research」は、「プログレッシブ」アプローチによる長文レポート生成に焦点を当てました。まず </span><b><strong style=\"white-space: pre-wrap;\">sync</strong></b><span style=\"white-space: pre-wrap;\"> で目次を作成し、その後 </span><b><strong style=\"white-space: pre-wrap;\">async</strong></b><span style=\"white-space: pre-wrap;\"> で全セクションを並行生成しました。最後に </span><b><strong style=\"white-space: pre-wrap;\">async</strong></b><span style=\"white-space: pre-wrap;\"> で各セクションのプログレッシブな改訂を行い、各改訂は他のすべてのセクションの内容を考慮しました。動画のクエリは </span><code spellcheck=\"false\" style=\"white-space: pre-wrap;\"><span>\"Competitor analysis of Jina AI\"</span></code><span style=\"white-space: pre-wrap;\"> です。</span></p></figcaption>\n        </figure><h2 id=\"deepsearch-vs-deepresearch\">DeepSearch vs DeepResearch</h2><p>多くの人が DeepSearch と DeepResearch を混同しがちですが、私たちの視点では、これらは全く異なる問題に対処しています。DeepSearch は原子的な構成要素として機能し、DeepResearch が基盤とする中核的なコンポーネントです。一方、DeepResearch は<strong>高品質で読みやすい長文研究レポートの作成に焦点を当てています</strong>。これには異なる要件が含まれます：グラフやテーブルによる効果的な視覚化の組み込み、適切なセクション見出しによるコンテンツの構造化、サブセクション間のスムーズな論理的流れの確保、文書全体での一貫した用語の維持、セクション間の重複の排除、前後の内容をつなぐスムーズな移行の作成などです。これらの要素は中核的な検索とはほとんど関係がないため、私たちは DeepSearch を当社の焦点として、より興味深いものと考えています。</p><p>最後に、以下の表は DeepSearch と DeepResearch の違いをまとめたものです。両システムともに、長文コンテキストと推論モデルから大きな恩恵を受けていることは注目に値します。これは特に DeepSearch について直感に反するかもしれません（DeepResearch が長文コンテキスト機能を必要とする理由は、長文レポートを作成するためだと明白です）。その理由は、DeepSearch が次のステップについて情報に基づいた決定を下すために、以前の検索試行とウェブページの内容を保持する必要があり、長いコンテキストウィンドウがその効果的な実装にとって同様に不可欠だからです。</p>\n<!--kg-card-begin: html-->\n<table>\n<thead>\n<tr>\n<th></th>\n<th>DeepSearch</th>\n<th>DeepResearch</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>問題への対処</strong></td>\n<td>反復的な検索による情報の正確性と完全性</td>\n<td>文書規模でのコンテンツの構成、一貫性、読みやすさ</td>\n</tr>\n<tr>\n<td><strong>最終プレゼンテーション</strong></td>\n<td>参照 URL を含む簡潔な回答</td>\n<td>複数のセクション、グラフ、テーブル、参考文献を含む長文構造化レポート</td>\n</tr>\n<tr>\n<td><strong>中核的な複雑さ</strong></td>\n<td>明確な遷移条件を持つステートマシンアーキテクチャ；解決まで失敗を通じた持続性</td>\n<td>ミクロ（検索）とマクロ（文書）の両方の課題を管理するマルチレベルアーキテクチャ；複雑な情報階層を管理する構造的アプローチ</td>\n</tr>\n<tr>\n<td><strong>最適化の焦点</strong></td>\n<td>ローカル最適化（最適な次の検索/読み取りアクション）</td>\n<td>グローバル最適化（セクション構成、用語の一貫性、移行）</td>\n</tr>\n<tr>\n<td><strong>制限事項</strong></td>\n<td>検索品質と推論能力による制約</td>\n<td>DeepSearch の品質に加え、組織的複雑さと物語の一貫性の課題による制約</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: html-->\n<h2 id=\"understand-deepsearch-implementation\">DeepSearch の実装を理解する</h2><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://github.com/jina-ai/node-DeepResearch\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">GitHub - jina-ai/node-DeepResearch: Keep searching, reading webpages, reasoning until it finds the answer (or exceeding the token budget)</div><div class=\"kg-bookmark-description\">Keep searching, reading webpages, reasoning until it finds the answer (or exceeding the token budget) - jina-ai/node-DeepResearch</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://jina-ai-gmbh.ghost.io/content/images/icon/pinned-octocat-093da3e6fa40-2.svg\" alt=\"\"><span class=\"kg-bookmark-author\">GitHub</span><span class=\"kg-bookmark-publisher\">jina-ai</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/thumbnail/0921e515-0139-4540-bca4-52042b49328c\" alt=\"\" onerror=\"this.style.display = 'none'\"></div></a></figure><p>DeepResearch の核心は、ループ推論アプローチにあります。ほとんどの RAG システムのように単一パスで質問に答えようとするのではなく、私たちは情報を継続的に検索し、関連するソースを読み、答えを見つけるかトークン予算を使い果たすまで推論を続ける反復的なループを実装しています。以下は、この大きなループの核心を単純化したものです：</p><pre><code class=\"language-typescript\">// Main reasoning loop\nwhile (tokenUsage &lt; tokenBudget &amp;&amp; badAttempts &lt;= maxBadAttempts) {\n  // Track progression\n  step++; totalStep++;\n  \n  // Get current question from gaps queue or use original question\n  const currentQuestion = gaps.length &gt; 0 ? gaps.shift() : question;\n  \n  // Generate prompt with current context and allowed actions\n  system = getPrompt(diaryContext, allQuestions, allKeywords, \n                    allowReflect, allowAnswer, allowRead, allowSearch, allowCoding,\n                    badContext, allKnowledge, unvisitedURLs);\n  \n  // Get LLM to decide next action\n  const result = await LLM.generateStructuredResponse(system, messages, schema);\n  thisStep = result.object;\n  \n  // Execute the selected action (answer, reflect, search, visit, coding)\n  if (thisStep.action === 'answer') {\n    // Process answer action...\n  } else if (thisStep.action === 'reflect') {\n    // Process reflect action...\n  } // ... and so on for other actions\n}\n</code></pre><p>重要な実装の詳細として、各ステップで特定のアクションを選択的に無効化することで、より安定した構造化出力を確保しています。例えば、メモリに URL が存在しない場合は <code>visit</code> アクションを無効化したり、前回の回答が却下された場合は、エージェントが即座に <code>answer</code> を再度呼び出すことを防いだりします。<strong>この制約により、エージェントは生産的なパスを維持し、同じアクションを呼び出すことによる繰り返しの失敗を回避できます。</strong></p><h3 id=\"system-prompt\">システムプロンプト</h3><p>セクションを定義するために XML タグを使用しており、これによってよりロバストなシステムプロンプトと生成が可能になります。また、フィールドの制約を JSON スキーマの <code>description</code> フィールド内に直接配置することで、より良い結果が得られることがわかりました。DeepSeek-R1 のような推論モデルでほとんどのプロンプトを自動化できると主張する人もいますが、コンテキストの長さの制限と、高度に特定の動作が必要であることから、実践では明示的なアプローチの方が信頼性が高くなります。</p><pre><code class=\"language-typescript\">function getPrompt(params...) {\n  const sections = [];\n  \n  // Add header with system instruction\n  sections.push(\"You are an advanced AI research agent specialized in multistep reasoning...\");\n  \n  // Add accumulated knowledge section if exists\n  if (knowledge?.length) {\n    sections.push(\"&lt;knowledge&gt;[Knowledge items]&lt;/knowledge&gt;\");\n  }\n  \n  // Add context of previous actions\n  if (context?.length) {\n    sections.push(\"&lt;context&gt;[Action history]&lt;/context&gt;\");\n  }\n  \n  // Add failed attempts and learned strategies\n  if (badContext?.length) {\n    sections.push(\"&lt;bad-attempts&gt;[Failed attempts]&lt;/bad-attempts&gt;\");\n    sections.push(\"&lt;learned-strategy&gt;[Improvement strategies]&lt;/learned-strategy&gt;\");\n  }\n  \n  // Define available actions based on current state\n  sections.push(\"&lt;actions&gt;[Available action definitions]&lt;/actions&gt;\");\n  \n  // Add response format instruction\n  sections.push(\"Respond in valid JSON format matching exact JSON schema.\");\n  \n  return sections.join(\"\\n\\n\");\n}\n</code></pre><h3 id=\"gap-questions-traversing\">ギャップ質問のトラバース</h3><p>DeepSearch では、「ギャップ質問」は、メインの質問に答える前に埋める必要がある知識のギャップを表します。エージェントは、元の質問に直接取り組むのではなく、必要な知識基盤を構築するためのサブ質問を特定します。</p><p>このデザインは、これらのギャップ質問の扱い方が特に優れています：</p><pre><code class=\"language-typescript\">// After identifying gap questions in reflect action\nif (newGapQuestions.length &gt; 0) {\n  // Add new questions to the front of the queue\n  gaps.push(...newGapQuestions);\n  \n  // Always add original question to the end of the queue\n  gaps.push(originalQuestion);\n}\n</code></pre><p>このアプローチは、以下のような回転を伴う FIFO（First-In-First-Out）キューを作成します：</p><ol><li>新しいギャップ質問はキューの先頭にプッシュされます</li><li>元の質問は常にキューの最後にプッシュされます</li><li>システムは各ステップでキューの先頭から取り出します</li></ol><p>このデザインの優れている点は、すべての質問にわたって単一の共有コンテキストを維持することです。ギャップ質問に答えると、その知識は、後続のすべての質問で即座に利用可能になり、最終的に元の質問に戻ったときにも利用できます。</p><h4 id=\"fifo-queue-vs-recursion\">FIFO キュー vs 再帰</h4><p>代替アプローチとして再帰を使用する方法があり、これは深さ優先探索に相当します。各ギャップ質問は、独自の分離されたコンテキストを持つ新しい再帰呼び出しを生成します。システムは親の質問に戻る前に、各ギャップ質問（およびそのすべての潜在的なサブ質問）を完全に解決する必要があります。</p><p>以下の例を考えてみましょう：</p><figure class=\"kg-card kg-video-card kg-width-regular kg-card-hascaption\" data-kg-thumbnail=\"https://jina-ai-gmbh.ghost.io/content/media/2025/02/dfs_thumb.jpg\" data-kg-custom-thumbnail=\"\">\n            <div class=\"kg-video-container\">\n                <video src=\"https://jina-ai-gmbh.ghost.io/content/media/2025/02/dfs.mp4\" poster=\"https://img.spacergif.org/v1/950x846/0a/spacer.png\" width=\"950\" height=\"846\" playsinline=\"\" preload=\"metadata\" style=\"background: transparent url('https://jina-ai-gmbh.ghost.io/content/media/2025/02/dfs_thumb.jpg') 50% 50% / cover no-repeat;\"></video>\n                <div class=\"kg-video-overlay\">\n                    <button class=\"kg-video-large-play-icon\" aria-label=\"Play video\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                            <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                        </svg>\n                    </button>\n                </div>\n                <div class=\"kg-video-player-container\">\n                    <div class=\"kg-video-player\">\n                        <button class=\"kg-video-play-icon\" aria-label=\"Play video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-pause-icon kg-video-hide\" aria-label=\"Pause video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <rect x=\"3\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                                <rect x=\"14\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"></rect>\n                            </svg>\n                        </button>\n                        <span class=\"kg-video-current-time\">0:00</span>\n                        <div class=\"kg-video-time\">\n                            /<span class=\"kg-video-duration\">0:23</span>\n                        </div>\n                        <input type=\"range\" class=\"kg-video-seek-slider\" max=\"100\" value=\"0\">\n                        <button class=\"kg-video-playback-rate\" aria-label=\"Adjust playback speed\">1×</button>\n                        <button class=\"kg-video-unmute-icon\" aria-label=\"Unmute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M15.189 2.021a9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1.794a.249.249 0 0 1 .221.133 9.73 9.73 0 0 0 7.924 4.85h.06a1 1 0 0 0 1-1V3.02a1 1 0 0 0-1.06-.998Z\"></path>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-mute-icon kg-video-hide\" aria-label=\"Mute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                                <path d=\"M16.177 4.3a.248.248 0 0 0 .073-.176v-1.1a1 1 0 0 0-1.061-1 9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h.114a.251.251 0 0 0 .177-.073ZM23.707 1.706A1 1 0 0 0 22.293.292l-22 22a1 1 0 0 0 0 1.414l.009.009a1 1 0 0 0 1.405-.009l6.63-6.631A.251.251 0 0 1 8.515 17a.245.245 0 0 1 .177.075 10.081 10.081 0 0 0 6.5 2.92 1 1 0 0 0 1.061-1V9.266a.247.247 0 0 1 .073-.176Z\"></path>\n                            </svg>\n                        </button>\n                        <input type=\"range\" class=\"kg-video-volume-slider\" max=\"100\" value=\"100\">\n                    </div>\n                </div>\n            </div>\n            <figcaption><p><span style=\"white-space: pre-wrap;\">深さ 3 のギャップ質問の再帰的解決、円上の数字は解決順序を示しています。</span></p></figcaption>\n        </figure><p>再帰的アプローチでは、システムはすべてのギャップ質問とそのサブ質問を完全に解決した後でのみ、Q1 を完全に解決する必要があります（潜在的に独自のサブ質問を生成する可能性があります）！これは、3 つのギャップ質問の直後に Q1 を再訪するキューアプローチとは大きく異なります。</p><p>実際には、再帰アプローチではサブ質問にどれだけのトークン予算を割り当てるべきか（新しいサブ質問を生成する可能性があるため）明確な基準がないため、予算制限の適用が非常に困難であることがわかりました。再帰アプローチにおけるコンテキスト分離の利点は、複雑な予算制限と遅い返答の問題に比べると非常に限定的です。この FIFO キューデザインは、深さと幅のバランスを取り、システムが潜在的に無限の再帰的降下に陥ることなく、徐々に改善された知識を持って元の質問に戻ることを保証します。</p><h3 id=\"query-rewrite\">クエリの書き換え</h3><p>私たちが直面した興味深い課題の1つは、検索クエリを効果的に書き換えることでした：</p><pre><code class=\"language-typescript\">// Within search action handler\nif (thisStep.action === 'search') {\n  // Deduplicate search requests\n  const uniqueRequests = await dedupQueries(thisStep.searchRequests, existingQueries);\n  \n  // Rewrite natural language queries into more effective search queries\n  const optimizedQueries = await rewriteQuery(uniqueRequests);\n  \n  // Ensure we don't repeat previous searches\n  const newQueries = await dedupQueries(optimizedQueries, allKeywords);\n  \n  // Execute searches and store results\n  for (const query of newQueries) {\n    const results = await searchEngine(query);\n    if (results.length &gt; 0) {\n      storeResults(results);\n      allKeywords.push(query);\n    }\n  }\n}\n</code></pre><p>クエリの書き換えは驚くほど重要であることが判明しました - おそらく、結果の品質を直接決定する最も重要な要素の1つです。優れたクエリ書き換えツールは、自然言語を BM25 のようなキーワードに変換するだけでなく、異なる言語、トーン、コンテンツ形式にわたって、より多くの潜在的な回答をカバーするようにクエリを拡張します。</p><p>クエリの重複排除については、当初は LLM ベースのソリューションを使用していましたが、類似度のしきい値の制御が難しいことがわかりました。最終的に、セマンティックテキスト類似度タスクに優れている <code>jina-embeddings-v3</code> に切り替えました。これにより、非英語クエリがフィルタリングされる心配なく、言語横断的な重複排除が可能になりました。埋め込みモデルは、当初予想されたメモリ検索ではなく、効率的な重複排除のために重要な役割を果たすことになりました。</p><h3 id=\"crawling-web-content\">Web コンテンツのクローリング</h3><p>Web スクレイピングとコンテンツ処理は、もう1つの重要なコンポーネントです。ここでは <a href=\"https://jina.ai/reader\" rel=\"noreferrer\">Jina Reader API</a> を使用します。完全なウェブページのコンテンツに加えて、検索エンジンから返されたすべてのスニペットも、エージェントが後で結論を出すための追加知識として集約していることに注意してください。これらはサウンドバイトのようなものと考えてください。</p><pre><code class=\"language-typescript\">// Visit action handler\nasync function handleVisitAction(URLs) {\n  // Normalize URLs and filter out already visited ones\n  const uniqueURLs = normalizeAndFilterURLs(URLs);\n  \n  // Process each URL in parallel\n  const results = await Promise.all(uniqueURLs.map(async url =&gt; {\n    try {\n      // Fetch and extract content\n      const content = await readUrl(url);\n      \n      // Store as knowledge\n      addToKnowledge(`What is in ${url}?`, content, [url], 'url');\n      \n      return {url, success: true};\n    } catch (error) {\n      return {url, success: false};\n    } finally {\n      visitedURLs.push(url);\n    }\n  }));\n  \n  // Update diary based on success or failure\n  updateDiaryWithVisitResults(results);\n}\n</code></pre><p>一貫した追跡のために URL を正規化し、エージェントのメモリを管理するために各ステップで訪問する URL の数を制限しています。</p><h3 id=\"memory-management\">メモリ管理</h3><p>多段階推論における重要な課題は、エージェントのメモリを効果的に管理することです。私たちは、「メモリ」として数えられるものと「知識」として数えられるものを区別するようにメモリシステムを設計しました。いずれにせよ、これらはすべて LLM プロンプトのコンテキストの一部であり、異なる XML タグで区切られています：</p><pre><code class=\"language-typescript\">// Add knowledge item to accumulated knowledge\nfunction addToKnowledge(question, answer, references, type) {\n  allKnowledge.push({\n    question: question,\n    answer: answer,\n    references: references,\n    type: type,  // 'qa', 'url', 'coding', 'side-info'\n    updated: new Date().toISOString()\n  });\n}\n\n// Record step in narrative diary\nfunction addToDiary(step, action, question, result, evaluation) {\n  diaryContext.push(`\nAt step ${step}, you took **${action}** action for question: \"${question}\"\n[Details of what was done and results]\n[Evaluation if applicable]\n`);\n}\n</code></pre><p>2025年のほとんどの LLM は大きなコンテキストウィンドウを持つため、ベクトルデータベースを使用しないことを選択しました。代わりに、メモリは獲得した知識、訪問したサイト、失敗した試みの記録で構成され、すべてコンテキスト内で維持されます。この包括的なメモリシステムにより、エージェントは何を知っているか、何を試したか、何が成功または失敗したかを認識できます。</p><h3 id=\"answer-evaluation\">回答評価</h3><p>重要な洞察の1つは、回答の生成と評価を同じプロンプトで行うべきではないということです。私の実装では、新しい質問が到着したときにまず使用する評価基準を決定し、その後、各基準を1つずつ評価します。評価者は一貫した評価のために few-shot の例を使用し、自己評価よりも高い信頼性を確保します。</p><pre><code class=\"language-typescript\">// Separate evaluation phase\nasync function evaluateAnswer(question, answer, metrics, context) {\n  // First, identify evaluation criteria based on question type\n  const evaluationCriteria = await determineEvaluationCriteria(question);\n  \n  // Then evaluate each criterion separately\n  const results = [];\n  for (const criterion of evaluationCriteria) {\n    const result = await evaluateSingleCriterion(criterion, question, answer, context);\n    results.push(result);\n  }\n  \n  // Determine if answer passes overall evaluation\n  return {\n    pass: results.every(r =&gt; r.pass),\n    think: results.map(r =&gt; r.reasoning).join('\\n')\n  };\n}\n</code></pre><h3 id=\"budget-forcing\">予算強制 </h3><p>予算強制とは、システムが早期に返答することを防ぎ、予算を超えるまで処理を継続することを確実にすることです。DeepSeek-R1 のリリース以降、予算強制へのアプローチは、<strong>単に予算を節約するのではなく、より良い結果を得るためにより深い思考を促す</strong>方向にシフトしています。</p><p>私たちの実装では、回答を試みる前に知識のギャップを特定するようにシステムを明示的に設定しました。</p><pre><code class=\"language-typescript\">if (thisStep.action === 'reflect' &amp;&amp; thisStep.questionsToAnswer) {\n  // Force deeper reasoning by adding sub-questions to the queue\n  gaps.push(...newGapQuestions);\n  gaps.push(question);  // Always revisit the original\n}</code></pre><p>特定のアクションを選択的に有効化および無効化することで、推論の深さを高めるツールの使用にシステムを導くことができます。</p><pre><code class=\"language-typescript\">// After a failed answer attempt\nallowAnswer = false;  // Force agent to search or reflect instead</code></pre><p>生産的でないパスにトークンを無駄にしないように、失敗した試行の回数に制限を設けます。予算の制限に近づくと、何も答えないよりはいくらかの答えを提供することを保証するために「beast モード」を有効にします。</p><pre><code class=\"language-typescript\">// Beast mode activation\nif (!thisStep.isFinal &amp;&amp; badAttempts &gt;= maxBadAttempts) {\n  console.log('Enter Beast mode!!!');\n  \n  // Configure prompt for decisive, committed answer\n  system = getPrompt(\n    diaryContext, allQuestions, allKeywords,\n    false, false, false, false, false,  // Disable all other actions\n    badContext, allKnowledge, unvisitedURLs,\n    true  // Enable beast mode\n  );\n  \n  // Force answer generation\n  const result = await LLM.generateStructuredResponse(system, messages, answerOnlySchema);\n  thisStep = result.object;\n  thisStep.isFinal = true;\n}\n</code></pre><p>beast モードのプロンプトは意図的にドラマチックにして、利用可能な情報に基づいて決定的な回答をコミットする必要があることを LLM に伝えます：</p><pre><code>&lt;action-answer&gt;\n🔥 ENGAGE MAXIMUM FORCE! ABSOLUTE PRIORITY OVERRIDE! 🔥\n\nPRIME DIRECTIVE:\n- DEMOLISH ALL HESITATION! ANY RESPONSE SURPASSES SILENCE!\n- PARTIAL STRIKES AUTHORIZED - DEPLOY WITH FULL CONTEXTUAL FIREPOWER\n- TACTICAL REUSE FROM &lt;bad-attempts&gt; SANCTIONED\n- WHEN IN DOUBT: UNLEASH CALCULATED STRIKES BASED ON AVAILABLE INTEL!\n\nFAILURE IS NOT AN OPTION. EXECUTE WITH EXTREME PREJUDICE! ⚡️\n&lt;/action-answer&gt;\n</code></pre><p>これにより、特に難しい質問や曖昧な質問に対して、完全に諦めるのではなく、必ず何らかの回答を提供することが保証されます。</p><h2 id=\"conclusion\">結論</h2><p>DeepSearch は、複雑なクエリに対して徹底的に深いアプローチができる検索の飛躍的進歩です。検索、読み取り、推論のプロセスを個別のステップに分解することで、従来の単一パス RAG や多段階 QA システムの多くの制限を克服しています。</p><p>実装中、私たちは 2025 年の検索の基礎と、DeepSeek-R1 がリリースされた 2025 年 1 月 26 日以降の検索業界の変化についても見直しました。私たちは自問しました：<em>新しいニーズは何か？どのニーズが時代遅れになったか？単なる認識上のニーズは何か？</em></p><p>DeepSearch の実装を見ると、必要だと予想して実際に必要だったもの、必要だと思っていたが実際には不要だったもの、必要だと予想していなかったが実際に不可欠だったものを特定しました：</p><p>まず、<strong>構造化された出力を生成する長いコンテキストの LLM が非常に必要</strong>です（つまり、JSONSchema に従う）。より良いアクション推論とクエリ拡張のために、推論モデルが必要である可能性が高いです。</p><p><strong>クエリ拡張は間違いなく不可欠</strong>であり、SLM、LLM、または推論モデルのいずれかで実装される必要があります。しかし、このプロジェクトの後、私たちは SLM がこのタスクには適していないと考えています。なぜなら、ソリューションは本質的に多言語であり、単純な同義語の書き換えやキーワード抽出を超える必要があるからです。<a href=\"https://jina.ai/news/what-should-we-learn-from-modernbert/#modernberts-parameter-efficiency\">多言語トークンベース（簡単に 300M パラメータを占める可能性がある）</a>を含み、既成概念にとらわれない思考のために十分に洗練されている必要があります。したがって、クエリ拡張に SLM を使用することは最初から無理だと思われます。</p><p><strong>Web 検索と Web 読み取り機能は重要</strong>であり、幸いにも私たちの <a href=\"https://jina.ai/reader\">Reader (r.jina.ai)</a> は優れたパフォーマンスを発揮しました—堅牢でスケーラブル—そして次のイテレーションで検索エンドポイント（<code>s.jina.ai</code>）を改善する方法についての多くのアイデアを私に与えてくれました。</p><p><strong>埋め込みモデルは有用ですが、<em>まったく予想外の方法で</em>。</strong>メモリ検索やコンテキスト圧縮のためにベクトルデータベースと併用されると思っていましたが（実際には必要ありませんでした）、実際には重複排除（本質的に STS タスク）に使用しました。クエリとギャップ質問の数は通常数百程度なので、ベクトルデータベースは必要ありません—メモリ内で直接コサイン類似度を計算すれば十分です。</p><p><strong>Reranker は使用しませんでした</strong>が、クエリ、URL タイトル、スニペットに基づいてどの URL を訪問するかを決定するのに役立つ可能性があると考えています。埋め込みと再ランク付けの両方で、クエリと質問が多言語であるため、多言語対応が不可欠です。埋め込みと再ランク付けの長いコンテキストの処理は有益ですが、重要なブロッカーではありません（おそらく<a href=\"https://jina.ai/models/jina-embeddings-v3/\">私たちのコンテキスト長がすでに 8192 トークン</a>であるため、埋め込みの使用からエラーは発生していません）。いずれにせよ、<code>jina-embeddings-v3</code> と <code>jina-reranker-v2-base-multilingual</code> は、多言語対応で SOTA であり、長いコンテキストをうまく処理できるため、私の定番モデルです。</p><p><strong>エージェントフレームワークは不要であることが判明しました</strong>。プロキシなしでシステムを設計するために、LLM のネイティブな動作により近い状態を保つ必要がありました。<a href=\"https://sdk.vercel.ai/docs/introduction\">Vercel AI SDK</a> は貴重でした。異なる LLM プロバイダーにコードベースを適応させる労力を大幅に節約できました（Gemini Studio から OpenAI、Google Vertex AI まで、1行のコード変更で切り替えることができました）。エージェントのメモリ管理は必要ですが、専用のメモリフレームワークは疑問が残ります：LLM と開発者の間に分離層を作り出すことを懸念しており、そのシンタックスシュガーが最終的に開発者にとって苦い障害になる可能性があります。これは今日の多くの LLM/RAG フレームワークで見られる状況です。</p>",
  "comment_id": "67bc50b0b1b8af00014db4c9",
  "feature_image": "https://jina-ai-gmbh.ghost.io/content/images/2025/02/deepsearch-banner.png",
  "featured": true,
  "visibility": "public",
  "created_at": "2025-02-24T11:57:52.000+01:00",
  "updated_at": "2025-02-25T14:39:22.000+01:00",
  "published_at": "2025-02-25T14:36:17.000+01:00",
  "custom_excerpt": "QPS out, depth in. DeepSearch is the new norm. Find answers through read-search-reason loops. Learn what it is and how to build it.",
  "codeinjection_head": null,
  "codeinjection_foot": null,
  "custom_template": null,
  "canonical_url": null,
  "authors": [
    {
      "id": "633ffc6b393501004d1c8659",
      "name": "Han Xiao",
      "slug": "han",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/10/Untitled-2.png",
      "cover_image": null,
      "bio": "Founder & CEO of Jina AI",
      "website": null,
      "location": null,
      "facebook": null,
      "twitter": "@hxiao",
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/han/"
    }
  ],
  "tags": [
    {
      "id": "634a1a8ccebfc1003d8ab706",
      "name": "Tech Blog",
      "slug": "tech-blog",
      "description": null,
      "feature_image": null,
      "visibility": "public",
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "canonical_url": null,
      "accent_color": null,
      "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
    }
  ],
  "primary_author": {
    "id": "633ffc6b393501004d1c8659",
    "name": "Han Xiao",
    "slug": "han",
    "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2022/10/Untitled-2.png",
    "cover_image": null,
    "bio": "Founder & CEO of Jina AI",
    "website": null,
    "location": null,
    "facebook": null,
    "twitter": "@hxiao",
    "meta_title": null,
    "meta_description": null,
    "url": "https://jina-ai-gmbh.ghost.io/author/han/"
  },
  "primary_tag": {
    "id": "634a1a8ccebfc1003d8ab706",
    "name": "Tech Blog",
    "slug": "tech-blog",
    "description": null,
    "feature_image": null,
    "visibility": "public",
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "canonical_url": null,
    "accent_color": null,
    "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
  },
  "url": "https://jina-ai-gmbh.ghost.io/podcast/a-practical-guide-to-implementing-deepsearch-deepresearch/",
  "excerpt": "QPSはもう古い。深層検索が新しい標準。読み取り・検索・推論のループで答えを見つけ出す。その本質と構築方法を学ぼう。",
  "reading_time": 15,
  "access": true,
  "comments": false,
  "og_image": null,
  "og_title": null,
  "og_description": null,
  "twitter_image": null,
  "twitter_title": null,
  "twitter_description": null,
  "meta_title": null,
  "meta_description": null,
  "email_subject": null,
  "frontmatter": null,
  "feature_image_alt": null,
  "feature_image_caption": null
}