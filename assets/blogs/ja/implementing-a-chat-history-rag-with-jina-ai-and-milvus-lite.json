{
  "slug": "implementing-a-chat-history-rag-with-jina-ai-and-milvus-lite",
  "id": "665d76034b4b4c0001ba1bb3",
  "uuid": "851bc948-281c-4fab-bc11-941c900b086b",
  "title": "Jina AI と Milvus Lite を使用したチャット履歴 RAG の実装",
  "html": "<p>開発者やオペレーションエンジニアは、簡単にセットアップでき、迅速に起動でき、後で追加の手間なく効率的にスケールした本番環境にデプロイできるインフラストラクチャを重視しています。そのため、パートナーである <a href=\"https://milvus.io/?ref=jina-ai-gmbh.ghost.io\"><u>Milvus</u></a> が提供する最新の軽量ベクトルデータベース <a href=\"https://milvus.io/docs/milvus_lite.md?ref=jina-ai-gmbh.ghost.io\"><u>Milvus Lite</u></a> は、特に高品質で使いやすい検索基盤モデルと組み合わせた場合に、Python 開発者が検索アプリケーションを迅速に開発するための重要なツールとなっています。</p><p>本記事では、架空の企業の社内公開チャンネルのチャットを基に構築した <a href=\"https://jina.ai/news/albus-by-springworks-empowering-employees-with-enterprise-search?ref=jina-ai-gmbh.ghost.io\"><u>Retrieval Augmented Generation (RAG)</u></a> アプリケーションの例を用いて、Milvus Lite が <a href=\"https://jina.ai/embeddings/?ref=jina-ai-gmbh.ghost.io\"><u>Jina Embeddings v2</u></a> と <a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><u>Jina Reranker v1</u></a> をどのように統合し、従業員が組織に関する質問に正確で有用な回答を得られるようにするかを説明します。</p><h2 id=\"overview-of-milvus-lite-jina-embeddings-and-jina-reranker\">Milvus Lite、Jina Embeddings、Jina Reranker の概要</h2><p>Milvus Lite は、主要なベクトルデータベースである Milvus の新しい軽量バージョンで、Python ライブラリとしても提供されています。Milvus Lite は、Docker や Kubernetes にデプロイされた Milvus と同じ API を共有していますが、サーバーをセットアップすることなく、1 行の pip コマンドで簡単にインストールできます。</p><p>Milvus の Python SDK である <a href=\"https://github.com/milvus-io/pymilvus?ref=jina-ai-gmbh.ghost.io\"><u>pymilvus</u></a> に Jina Embeddings v2 と Jina Reranker v1 を統合することで、Milvus Lite を含む Milvus のあらゆるデプロイメントモードで、同じ Python クライアントを使用してドキュメントを直接埋め込むことができるようになりました。Jina Embeddings と Reranker の統合の詳細については、pymilvus の<a href=\"https://milvus.io/docs/integrate_with_jina.md?ref=jina-ai-gmbh.ghost.io\"> <u>ドキュメントページ</u></a>をご覧ください。</p><p>8k トークンのコンテキストウィンドウと多言語対応機能を備えた Jina Embeddings v2 は、テキストの幅広い意味を符号化し、正確な検索を保証します。パイプラインに Jina Reranker v1 を追加することで、より深いコンテキスト理解のために検索結果をクエリと直接クロスエンコードして、結果をさらに精緻化することができます。</p><h2 id=\"milvus-and-jina-ai-models-in-action\">Milvus と Jina AI モデルの実践</h2><p>このチュートリアルでは、実践的なユースケースに焦点を当てます：過去の会話に基づいて、企業の Slack チャット履歴から幅広い質問に答えることです。</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/E-R-slack--2-.jpg\" class=\"kg-image\" alt=\"Flowchart detailing the Rust community's model training process, featuring steps from the &quot;Next training step?&quot; query through\" loading=\"lazy\" width=\"1600\" height=\"900\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/E-R-slack--2-.jpg 600w, https://jina-ai-gmbh.ghost.io/content/images/size/w1000/2024/06/E-R-slack--2-.jpg 1000w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/E-R-slack--2-.jpg 1600w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">サンプルクエリを使用した Slack データの検索プロセスフロー</span></figcaption></figure><p>例えば、上記のプロセス図のように、従業員が AI トレーニングプロセスの次のステップについて質問することができます。Jina Embeddings、Jina Reranker、Milvus を使用することで、記録された Slack メッセージから関連情報を正確に特定できます。このアプリケーションは、過去のコミュニケーションから価値ある情報へのアクセスを容易にすることで、職場の生産性を向上させることができます。</p><p>回答を生成するために、<a href=\"https://python.langchain.com/v0.1/docs/integrations/llms/huggingface_endpoint/?ref=jina-ai-gmbh.ghost.io\"><u>Langchain の HuggingFace 統合</u></a>を通じて <a href=\"https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1?ref=jina-ai-gmbh.ghost.io\"><u>Mixtral 7B Instruct</u></a> を使用します。モデルを使用するには、<a href=\"https://huggingface.co/docs/hub/en/security-tokens?ref=jina-ai-gmbh.ghost.io\"><u>こちら</u></a>の説明に従って生成できる HuggingFace アクセストークンが必要です。</p><p><a href=\"https://colab.research.google.com/github/jina-ai/workshops/blob/main/notebooks/embeddings/milvus/milvus_lite_jina_integration.ipynb?ref=jina-ai-gmbh.ghost.io\"><u>Colab</u></a> で、または<a href=\"https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/milvus/milvus_lite_jina_integration.ipynb?ref=jina-ai-gmbh.ghost.io\"><u>ノートブックをダウンロード</u></a>して実践できます。</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://colab.research.google.com/github/jina-ai/workshops/blob/main/notebooks/embeddings/milvus/milvus_lite_jina_integration.ipynb?ref=jina-ai-gmbh.ghost.io\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Google Colab</div><div class=\"kg-bookmark-description\"></div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://ssl.gstatic.com/colaboratory-static/common/0d8af74d4089ab8b6d127bd74854be98/img/favicon.ico\" alt=\"\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://colab.research.google.com/img/colab_favicon_256px.png\" alt=\"\"></div></a></figure><h3 id=\"about-the-dataset\">データセットについて</h3><p>このチュートリアルで使用されるデータセットは GPT-4 を使用して生成され、Blueprint AI の Slack チャンネルのチャット履歴を再現することを目的としています。Blueprint は独自の基盤モデルを開発している架空の AI スタートアップです。データセットは<a href=\"https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/milvus/chat_history.json?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\"><u>こちら</u></a>からダウンロードできます。</p><p>データは関連する Slack スレッドのコレクションを表す「チャンネル」で整理されています。各チャンネルには、10 のトピックオプションのいずれかのトピックラベルがあります：「model distribution」、「model training」、「model fine-tuning」、「ethics and bias mitigation」、「user feedback」、「sales」、「marketing」、「model onboarding」、「creative design」、「product management」。あるユーザーは「expert user」として知られています。この情報を使用して、以下で説明するようにトピックの最も専門的なユーザーを検索した結果を検証できます。</p><p>各チャンネルには、チャンネルごとに最大 100 メッセージの会話スレッドを含むチャット履歴もあります。データセットの各メッセージには以下の情報が含まれています：</p><ul><li>メッセージを送信した<strong>ユーザー</strong></li><li>ユーザーが送信した<strong>メッセージテキスト</strong></li><li>メッセージの<strong>タイムスタンプ</strong></li><li>ユーザーがメッセージに添付した可能性のある<strong>ファイル名</strong></li><li><strong>メッセージ ID</strong></li><li>メッセージが別のメッセージから始まったスレッド内にある場合の<strong>親メッセージ ID</strong></li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://jina-ai-gmbh.ghost.io/content/images/2024/06/image-1.png\" class=\"kg-image\" alt=\"Diagram showing the structure of a messaging system, detailing the relationship between 'Channel' and 'Message' entities, wit\" loading=\"lazy\" width=\"780\" height=\"450\" srcset=\"https://jina-ai-gmbh.ghost.io/content/images/size/w600/2024/06/image-1.png 600w, https://jina-ai-gmbh.ghost.io/content/images/2024/06/image-1.png 780w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">チャットデータの構造を示す UML 図。</span></figcaption></figure><h3 id=\"set-up-the-environment\">環境のセットアップ</h3><p>まず、必要なコンポーネントをすべてインストールします：</p><pre><code class=\"language-Python\">pip install -U pymilvus\npip install -U \"pymilvus[model]\"\npip install langchain\npip install langchain-community\n</code></pre><p>データセットをダウンロードします：</p><pre><code class=\"language-Python\">import os\n\nif not os.path.exists(\"chat_history.json\"):\n    !wget https://raw.githubusercontent.com/jina-ai/workshops/main/notebooks/embeddings/milvus/chat_history.json</code></pre><p>環境変数に Jina AI API キーを設定します。<a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><u>こちら</u></a>で生成できます。</p><pre><code class=\"language-Python\">import os\nimport getpass\n\nos.environ[\"JINAAI_API_KEY\"] = getpass.getpass(prompt=\"Jina AI API Key: \")</code></pre><p>同様に Hugging Face トークンも設定します。生成方法は<a href=\"https://huggingface.co/docs/hub/en/security-tokens?ref=jina-ai-gmbh.ghost.io\"><u>こちら</u></a>でご確認いただけます。<a href=\"https://huggingface.co/docs/hub/en/index?ref=jina-ai-gmbh.ghost.io\"><u>Hugging Face Hub</u></a> にアクセスするために <code>READ</code> に設定されていることを確認してください。</p><pre><code class=\"language-Python\">os.environ[\"HUGGINGFACEHUB_API_TOKEN\"] = getpass.getpass(prompt=\"Hugging Face Token: \")</code></pre><h3 id=\"create-the-milvus-collection\">Milvus コレクションの作成</h3><p>データをインデックスするために Milvus コレクションを作成します：</p><pre><code class=\"language-Python\">from pymilvus import MilvusClient, DataType\n\n# Specify a local file name as uri parameter of MilvusClient to use Milvus Lite\nclient = MilvusClient(\"milvus_jina.db\")\n\nschema = MilvusClient.create_schema(\n    auto_id=True,\n    enable_dynamic_field=True,\n)\n\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, description=\"The Primary Key\", is_primary=True)\nschema.add_field(field_name=\"embedding\", datatype=DataType.FLOAT_VECTOR, description=\"The Embedding Vector\", dim=768)\n\nindex_params = client.prepare_index_params()\nindex_params.add_index(field_name=\"embedding\", metric_type=\"COSINE\", index_type=\"AUTOINDEX\")\n\nclient.create_collection(collection_name=\"milvus_jina\", schema=schema, index_params=index_params)</code></pre>\n\n<h3 id=\"prepare-the-data\">データの準備</h3>\n\n<p>チャット履歴を解析してメタデータを抽出します：</p>\n\n<pre><code class=\"language-Python\">import json\n\nwith open(\"chat_history.json\", \"r\", encoding=\"utf-8\") as file:\n    chat_data = json.load(file)\n\nmessages = []\nmetadatas = []\n\nfor channel in chat_data:\n  chat_history = channel[\"chat_history\"]\n  chat_topic = channel[\"topic\"]\n  chat_expert = channel[\"expert_user\"]\n  for message in chat_history:\n    text = f\"\"\"{message[\"user\"]}: {message[\"message\"]}\"\"\"\n    messages.append(text)\n    meta = {\n        \"time_stamp\": message[\"time_stamp\"],\n        \"file_name\": message[\"file_name\"],\n        \"parent_message_nr\": message[\"parent_message_nr\"],\n        \"channel\": chat_topic,\n        \"expert\": True if message[\"user\"] == chat_expert else False\n    }\n    metadatas.append(meta)\n</code></pre>\n\n<h3 id=\"embed-the-chat-data\">チャットデータの埋め込み</h3>\n\n<p>関連するチャット情報を取得するために、Jina Embeddings v2 を使用して各メッセージの埋め込みを作成します：</p>\n\n<pre><code class=\"language-Python\">from pymilvus.model.dense import JinaEmbeddingFunction\n\njina_ef = JinaEmbeddingFunction(\"jina-embeddings-v2-base-en\")\n\nembeddings = jina_ef.encode_documents(messages)</code></pre>\n\n<h3 id=\"index-the-chat-data\">チャットデータのインデックス作成</h3>\n\n<p>メッセージ、その埋め込み、および関連するメタデータのインデックスを作成します：</p>\n\n<pre><code class=\"language-Python\">collection_data = [{\n    \"message\": message,\n    \"embedding\": embedding,\n    \"metadata\": metadata\n} for message, embedding, metadata in zip(messages, embeddings, metadatas)]\n\ndata = client.insert(\n    collection_name=\"milvus_jina\",\n    data=collection_data\n)</code></pre>\n\n<h3 id=\"query-the-chat-history\">チャット履歴の検索</h3>\n\n<p>質問をしてみましょう：</p>\n\n<pre><code class=\"language-Python\">query = \"Who knows the most about encryption protocols in my team?\"</code></pre>\n\n<p>クエリを埋め込み、関連するメッセージを取得します。ここでは、最も関連性の高い 5 つのメッセージを取得し、Jina Reranker v1 を使用してそれらを再ランク付けします：</p>\n\n<pre><code class=\"language-Python\">from pymilvus.model.reranker import JinaRerankFunction\n\nquery_vectors = jina_ef.encode_queries([query])\n\nresults = client.search(\n    collection_name=\"milvus_jina\",\n    data=query_vectors,\n    limit=5,\n)\n\nresults = results[0]\n\nids = [results[i][\"id\"] for i in range(len(results))]\n\nresults = client.get(\n    collection_name=\"milvus_jina\",\n    ids=ids,\n    output_fields=[\"id\", \"message\", \"metadata\"]\n)\n\njina_rf = JinaRerankFunction(\"jina-reranker-v1-base-en\")\n\ndocuments = [results[i][\"message\"] for i in range(len(results))]\nreranked_documents = jina_rf(query, documents)\n\nreranked_messages = []\nfor reranked_document in reranked_documents:\n  idx = reranked_document.index\n  reranked_messages.append(results[idx])</code></pre>\n\n<p>最後に、Mixtral 7B Instruct と再ランク付けされたメッセージをコンテキストとして使用して、クエリへの回答を生成します：</p>\n\n<pre><code class=\"language-Python\">from langchain.prompts import PromptTemplate\nfrom langchain_community.llms import HuggingFaceEndpoint\n\nllm = HuggingFaceEndpoint(repo_id=\"mistralai/Mixtral-8x7B-Instruct-v0.1\")\n\nprompt = \"\"\"&lt;s&gt;[INST] Context information is below.\\\\n\n        It includes the five most relevant messages to the query, sorted based on their relevance to the query.\\\\n\n        ---------------------\\\\n\n        {context_str}\\\\\\\\n\n        ---------------------\\\\n\n        Given the context information and not prior knowledge,\n        answer the query. Please be brief, concise, and complete.\\\\n\n        If the context information does not contain an answer to the query,\n        respond with \\\\\"No information\\\\\".\\\\n\n        Query: {query_str}[/INST] &lt;/s&gt;\"\"\"\n\nprompt = PromptTemplate(template=prompt, input_variables=[\"query_str\", \"context_str\"])\n\nllm_chain = prompt | llm\n\nanswer = llm_chain.invoke({\"query_str\":query, \"context_str\":reranked_messages})\n\nprint(f\"\\n\\nANSWER:\\n\\n{answer}\")</code></pre>\n\n<p>質問への回答は：</p>\n\n<blockquote>「コンテキスト情報に基づくと、User5 がチーム内で暗号化プロトコルについて最も知識があるようです。彼らは、新しいプロトコルがデータセキュリティを大幅に向上させると述べており、特にクラウドデプロイメントにおいてその効果が顕著であると言及しています。」</blockquote>\n\n<p><code>chat_history.json</code> のメッセージを確認すれば、User5 が最も専門的なユーザーかどうか自分で検証できます。</p>\n\n<h2 id=\"summary\">まとめ</h2>\n\n<p>Milvus Lite のセットアップ方法、Jina Embeddings v2 を使用したチャットデータの埋め込み、そして Jina Reranker v1 を使用した検索結果の改善について、Slack チャット履歴の検索という実用的なユースケースを通じて見てきました。Milvus Lite は、複雑なサーバー設定を必要とせずに Python ベースのアプリケーション開発を簡素化します。Jina Embeddings と Reranker との統合により、職場での貴重な情報へのアクセスを容易にし、生産性を向上させることを目指しています。</p>\n\n<h2 id=\"use-jina-ai-models-and-milvus-now\"><strong>Jina AI Models と Milvus を今すぐ使用</strong></h2>\n\n<p>統合された <a href=\"https://jina.ai/embeddings?ref=jina-ai-gmbh.ghost.io\"><u>Jina Embeddings</u></a> と <a href=\"https://jina.ai/reranker?ref=jina-ai-gmbh.ghost.io\"><u>Reranker</u></a> を備えた <a href=\"https://milvus.io/docs/integrate_with_jina.md?ref=jina-ai-gmbh.ghost.io\" rel=\"noreferrer\"><u>Milvus Lite</u></a> は、わずか数行のコードで使用できる完全な処理パイプラインを提供します。</p>\n\n<p>皆様のユースケースについてお聞かせいただき、Jina AI Milvus エクステンションがビジネスニーズにどのように適合するかについて話し合えることを楽しみにしています。<a href=\"https://jina.ai/contact-sales?ref=jina-ai-gmbh.ghost.io\"><u>ウェブサイト</u></a>または<a href=\"https://discord.jina.ai/?ref=jina-ai-gmbh.ghost.io\"><u>Discord チャンネル</u></a>からご連絡いただき、フィードバックを共有し、最新のモデルについての情報を入手してください。Milvus と Jina AI の統合に関する質問については、<a href=\"https://milvus.io/community?ref=jina-ai-gmbh.ghost.io\"><u>Milvus コミュニティ</u></a>にご参加ください。</p>",
  "comment_id": "665d76034b4b4c0001ba1bb3",
  "feature_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/06/Blog-images--39-.jpg",
  "featured": false,
  "visibility": "public",
  "created_at": "2024-06-03T09:51:31.000+02:00",
  "updated_at": "2024-07-08T21:08:43.000+02:00",
  "published_at": "2024-06-03T16:09:33.000+02:00",
  "custom_excerpt": "Enhance your search applications in Python with Jina Embeddings and Reranker and lightweight, easy-to-deploy Milvus Lite.\n",
  "codeinjection_head": null,
  "codeinjection_foot": null,
  "custom_template": null,
  "canonical_url": null,
  "authors": [
    {
      "id": "65e85e35b22368000152a4bf",
      "name": "Francesco Kruk",
      "slug": "francesco",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/03/Portrait-Picture_Low.jpg",
      "cover_image": null,
      "bio": null,
      "website": null,
      "location": null,
      "facebook": null,
      "twitter": null,
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/francesco/"
    },
    {
      "id": "641c23a2f4d50d003d590474",
      "name": "Saahil Ognawala",
      "slug": "saahil",
      "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2023/03/profile-option-2.jpg",
      "cover_image": null,
      "bio": "Senior Product Manager at Jina AI",
      "website": "http://www.saahilognawala.com/",
      "location": "Munich, DE",
      "facebook": null,
      "twitter": "@saahil",
      "meta_title": null,
      "meta_description": null,
      "url": "https://jina-ai-gmbh.ghost.io/author/saahil/"
    }
  ],
  "tags": [
    {
      "id": "634a1a8ccebfc1003d8ab706",
      "name": "Tech Blog",
      "slug": "tech-blog",
      "description": null,
      "feature_image": null,
      "visibility": "public",
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "canonical_url": null,
      "accent_color": null,
      "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
    }
  ],
  "primary_author": {
    "id": "65e85e35b22368000152a4bf",
    "name": "Francesco Kruk",
    "slug": "francesco",
    "profile_image": "https://jina-ai-gmbh.ghost.io/content/images/2024/03/Portrait-Picture_Low.jpg",
    "cover_image": null,
    "bio": null,
    "website": null,
    "location": null,
    "facebook": null,
    "twitter": null,
    "meta_title": null,
    "meta_description": null,
    "url": "https://jina-ai-gmbh.ghost.io/author/francesco/"
  },
  "primary_tag": {
    "id": "634a1a8ccebfc1003d8ab706",
    "name": "Tech Blog",
    "slug": "tech-blog",
    "description": null,
    "feature_image": null,
    "visibility": "public",
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "canonical_url": null,
    "accent_color": null,
    "url": "https://jina-ai-gmbh.ghost.io/tag/tech-blog/"
  },
  "url": "https://jina-ai-gmbh.ghost.io/podcast/implementing-a-chat-history-rag-with-jina-ai-and-milvus-lite/",
  "excerpt": "Jina Embeddings と Reranker、そして軽量で導入が簡単な Milvus Lite を使用して、Python の検索アプリケーションを強化しましょう。",
  "reading_time": 6,
  "access": true,
  "comments": false,
  "og_image": null,
  "og_title": null,
  "og_description": null,
  "twitter_image": null,
  "twitter_title": null,
  "twitter_description": null,
  "meta_title": null,
  "meta_description": null,
  "email_subject": null,
  "frontmatter": null,
  "feature_image_alt": "Black background with vivid geometric shapes on the sides and central logos \"Embeddings,\" \"Reranker,\" and \"Milvus.\"",
  "feature_image_caption": null
}