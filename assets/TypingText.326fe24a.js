import{k as d,h as c,i as u,D as h,a_ as k,R as w,S as y,C as v,f as m,K as b,a5 as S,e as $,au as _,a7 as q,ai as Q,w as T,a9 as x}from"./index.f9c07a27.js";var A=d({name:"QToolbar",props:{inset:Boolean},setup(e,{slots:t}){const a=c(()=>"q-toolbar row no-wrap items-center"+(e.inset===!0?" q-toolbar--inset":""));return()=>u("div",{class:a.value,role:"toolbar"},h(t.default))}});const s="https://embeddings-dashboard-api.jina.ai";var j=(e=>(e.CONSUME="consume",e.PURCHASE="purchase",e.TRIAL="trial",e))(j||{});const E=k("embedding",{state:()=>({apiKey:"",models:[],products:[],testData:[]}),persist:{paths:["apiKey","testData"]},getters:{baseEnModel:e=>e.models.find(t=>t.name==="jina-embeddings-v2-base-en"),baseZhModel:e=>e.models.find(t=>t.name==="jina-embeddings-v2-base-zh"),baseDeModel:e=>e.models.find(t=>t.name==="jina-embeddings-v2-base-de"),newModels:e=>e.models.filter(t=>new Date().getTime()-new Date(t.created_at).getTime()<1e3*60*60*24*30).map(t=>t.name)},actions:{async getApiKey(){try{const e=await fetch(`${s}/api/v1/api_key`,{method:"POST"});if(!e.ok)throw new Error(`getApiKey error! Status: ${e.status}`);const t=await e.json();return this.apiKey=t.api_key,!0}catch(e){return console.error("getApiKey error:",e),!1}},async getTokens(e){try{const t=await fetch(`${s}/api/v1/api_key/user?api_key=${e}`);if(!t.ok)throw new Error(`getTokens error! Status: ${t.status}`);return(await t.json()).wallet.total_balance}catch(t){console.error("getTokens error:",t)}},async getModels(){try{const e=await fetch(`${s}/api/v1/models`);if(!e.ok)throw new Error(`getModels error! Status: ${e.status}`);const t=await e.json();this.models=t}catch(e){console.error("getModels error:",e)}},async getProducts(){try{const e=await fetch(`${s}/api/v1/product`);if(!e.ok)throw new Error(`getProducts error! Status: ${e.status}`);const t=await e.json();this.products=t}catch(e){console.error("getProducts error:",e)}},async getUsage(e){try{const t=await fetch(`${s}/api/v1/billing/transaction`,{headers:{Authorization:`Bearer ${e}`}});if(!t.ok)throw new Error(`getUsage error! Status: ${t.status}`);return await t.json()}catch(t){console.error("getUsage error:",t)}},async checkoutWithStripe(e,t){try{const a=await fetch(`${s}/api/v1/checkout_session`,{headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},method:"POST",body:JSON.stringify(t),mode:"cors",credentials:"include"});if(!a.ok)throw new Error(`checkoutWithStripe error! Status: ${a.status}`);return await a.json()}catch(a){console.error("checkoutWithStripe error:",a)}}}}),B=["text","rect","circle","QBtn","QBadge","QChip","QToolbar","QCheckbox","QRadio","QToggle","QSlider","QRange","QInput","QAvatar"],D=["wave","pulse","pulse-x","pulse-y","fade","blink","none"];var I=d({name:"QSkeleton",props:{...w,tag:{type:String,default:"div"},type:{type:String,validator:e=>B.includes(e),default:"rect"},animation:{type:String,validator:e=>D.includes(e),default:"wave"},animationSpeed:{type:[String,Number],default:1500},square:Boolean,bordered:Boolean,size:String,width:String,height:String},setup(e,{slots:t}){const a=v(),n=y(e,a.proxy.$q),i=c(()=>{const r=e.size!==void 0?[e.size,e.size]:[e.width,e.height];return{"--q-skeleton-speed":`${e.animationSpeed}ms`,width:r[0],height:r[1]}}),o=c(()=>`q-skeleton q-skeleton--${n.value===!0?"dark":"light"} q-skeleton--type-${e.type}`+(e.animation!=="none"?` q-skeleton--anim q-skeleton--anim-${e.animation}`:"")+(e.square===!0?" q-skeleton--square":"")+(e.bordered===!0?" q-skeleton--bordered":""));return()=>u(e.tag,{class:o.value,style:i.value},h(t.default))}});function M(e){const t=m(null);return b(()=>{t.value&&t.value(),t.value=e()}),S(()=>{var a;(a=t.value)==null||a.call(t)}),{watchStopHandle:t}}const K=$({__name:"TypingText",props:{text:{default:()=>[]},speedTime:{default:20},isAnimated:{type:Boolean,default:!0}},emits:["done"],setup(e,{emit:t}){const a=t,n=e;let i=m(""),o=0,r=null;const p=()=>{o=0,r&&(clearInterval(r),r=null)},g=()=>{r=window.setInterval(()=>{o<n.text.length?(i.value+=n.text[o],o++):(clearInterval(r),r=null,a("done"))},n.speedTime)};return M(()=>T(n.text,l=>{if(i.value.length===l.length){p();return}!r&&o<l.length&&g()},{immediate:!0})),(l,C)=>{const f=_("q-markdown");return x(),q(f,{src:Q(i),"no-line-numbers":""},null,8,["src"])}}});export{I as Q,j as T,K as _,A as a,E as u};
