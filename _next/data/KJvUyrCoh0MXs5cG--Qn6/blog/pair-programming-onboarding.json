{"pageProps":{"post":{"title":"Pair Programming in Jina - Onboarding via Pairing","date":"2021-01-14T11:30:00.550Z","slug":"pair-programming-onboarding","author":"Maximilian Werk & Susana Guzmán","content":"<p>This post is the first in a series of blog posts about how we use pair programming at Jina in an efficient and fun way.\nThese posts will be highly opinionated by what works for us.\nEach social interaction is different, so all \"should's\" and imperatives should surely be taken with a grain of salt.</p>\n<p>But before we start, let's get the most important thing settled right at the beginning:</p>\n<p><strong>Pair programming is not about programming.\nIt is about pairing.</strong></p>\n<p>About working with two minds on one problem and increasing the amount of complexity that can be lifted.\nOnly by coincidence, Engineers do programming when they work together.</p>\n<p>Today we want to explain how we leverage pairing during onboarding and what benefits arise from it.</p>\n<h2>Onboarding or Giving a Task to a Junior Engineer</h2>\n<p>Onboarding someone to a team is very similar to giving a task to a junior engineer.\nWe followed the same procedure for onboarding in November and December as we do for giving a Junior a task.\nWith huge success - in our opinion.</p>\n<p>The procedure is as follows:</p>\n<ul>\n<li><strong>Senior:</strong> Give a task of roughly 2 days work.</li>\n<li><strong>Junior:</strong> Play around some time to figure out questions and knowledge gaps (which naturally will be plenty) and implement a draft.</li>\n<li><strong>Both:</strong> Start a pairing session. (More technical details on pairing below)</li>\n<li><strong>Senior:</strong> Check out and have a short look at the Junior's code.</li>\n<li><strong>Senior:</strong> Write code snippets all over the place.</li>\n<li><strong>Senior:</strong> On the way explain as exactly as possible why you choose what.</li>\n<li><strong>Junior:</strong> Ideally, ask a lot of questions whenever it is not totally obvious what Senior does.</li>\n<li><strong>Senior:</strong> Answer any questions that arise during that process.</li>\n<li><strong>Senior:</strong> Delete all the code</li>\n<li><strong>Junior:</strong> Implement the ticket from scratch.</li>\n</ul>\n<p>This takes a maximum of one hour, often less.</p>\n<p>While the first session with a newbie almost always looks like that, follow-up sessions may vary in multiple ways.\nOften at the beginning the Junior shares the screen to clarify the problem they face.\nDuring the session we might switch screen sharing back and forth multiple times.</p>\n<h2>What are the Benefits?</h2>\n<h3>For the Senior</h3>\n<ul>\n<li>Get to know the newbie on a technical level, but even more importantly build a personal connection.</li>\n<li>Have social interactions in times of dire need, e.g. during a pandemic. Have some fun.</li>\n<li>Understand engineering capabilities and how much autonomy can be given to the other on future tasks. This enables better planning of future teamwork.</li>\n<li>Understand knowledge gaps.</li>\n<li>In case the Senior is a team lead: Stay in touch with the technical details of the team's work.</li>\n</ul>\n<h3>For the Junior/Newbie</h3>\n<ul>\n<li>Especially at the beginning you don’t feel that overwhelmed anymore.</li>\n<li>Get to know a person that you will work with a lot in the future. This eases future social interactions.</li>\n<li>Direct feedback on questions in a super efficient way.</li>\n<li>Your team backs you up. Team feeling grows in no time.</li>\n<li>Learn small productivity/coding/working hacks which after one week already pay off the effort.</li>\n</ul>\n<h3>For the Team</h3>\n<ul>\n<li>The team feeling grows really quickly after a newbie joins the team.</li>\n<li>Direct alignment on coding/social standards.</li>\n<li>Leverage different approaches to solve problems.</li>\n</ul>\n<h2>More Details About the HOW</h2>\n<ul>\n<li>Both participants keep the camera and audio activated the whole time.</li>\n<li>We share the full screen.</li>\n<li>The screen sharer usually behaves as if they would work alone.</li>\n<li>Anyhow, during onboarding there should be regular pauses and explanations of context.</li>\n<li>Thinking aloud should happen the whole time and be regularly encouraged by the Senior.</li>\n<li>The Junior should ask as many questions as possible.</li>\n<li>Try not to be overly-conscious of yourself.</li>\n<li>Knowledge gaps should be actively embraced the whole time.</li>\n</ul>\n<p>Behave well.\nHave fun.</p>\n<h2>What Happens Next?</h2>\n<p>Even when two Seniors pair, they profit a lot from it.\nWe regularly do it when a task is complex.\nUnderstanding and breaking it down is much faster and higher quality when more brains work on it (but not too many!).</p>\n<p>So stay tuned for:\nLeveraging pairing for breaking down complex tasks</p>\n<p>Fun Fact: This blog post was written in a pairing session.\nWe switched roles: The Junior Engineer became the Senior Blogger and vice versa.</p>\n","coverImage":"/assets/images/blog/pair_programming_onboarding.png"}},"__N_SSG":true}