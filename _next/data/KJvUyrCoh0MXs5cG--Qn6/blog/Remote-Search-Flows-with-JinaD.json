{"pageProps":{"post":{"title":"Remote Search Flows with JinaD","date":"2020-12-21T00:54:00.550Z","slug":"Remote-Search-Flows-with-JinaD","author":"Susana Guzmán","content":"<p>Hello everyone! Today I'd like to talk to you about JinaD! I just worked a bit with it the last week so I thought to share what I discovered with you all.</p>\n<p>First things first…WHAT?</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*udMuiPhAV6k0O1ePUHYa3A.jpeg\" alt=\"\"></p>\n<p>Yeah so, JinaD stands for Jina Daemon, and the core idea is to remember that Jina was born to be distributed, so we need to take advantage of that, and what JinaD aims at is to spin up Flows remotely.</p>\n<p>I think the easiest will be to check some of the <a href=\"https://github.com/jina-ai/jinad/tree/main/tests\">JinaD tests</a> to see what's going on, let's take a look at the <a href=\"https://github.com/jina-ai/jinad/tree/main/tests\">test_query_with_shards</a>.</p>\n<h3>Again…what?</h3>\n<p>Let's define first what is the expected output and then let's see how we'll do it. For this test we want</p>\n<ol>\n<li>Build our Docker image with Docker compose</li>\n<li>Create remote Flows</li>\n<li>Index &#x26; Query</li>\n</ol>\n<h3>Right…let's see the implementation</h3>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*nmN2DTHHRJeokYN6EEZepA.png\" alt=\"\"></p>\n<p>As you can see with have several files here, and since our first step was to build our Dockerfile let's check that one first</p>\n<pre><code class=\"language-Dockerfile\">FROM jinaai/jina:test-pip\n\nWORKDIR /\n\nRUN apt-get update &#x26;&#x26; \\\n    apt-get install --no-install-recommends -y git \\\n    curl\n\nRUN python -m pip install --no-cache-dir --upgrade pip &#x26;&#x26; \\\n    git clone https://github.com/jina-ai/jinad.git &#x26;&#x26; \\\n    pip install $(grep -ivE \"jina\" jinad/requirements.txt) --ignore-installed &#x26;&#x26; \\\n    cd jinad &#x26;&#x26; python setup.py install\n\nCOPY . /\n\nCOPY tests/integration/distributed/test_index_query_with_shards/entrypoint.sh .\n\nRUN chmod +x entrypoint.sh\n\nENTRYPOINT [\"bash\", \"-c\", \"./entrypoint.sh\"]\n</code></pre>\n<p>Ok, so the first thing here is that we'll use the test-pip image as a base, if you don't have it yet you can build it with:</p>\n<pre><code>docker build --build-arg PIP_TAG=\"[devel]\" -f tests/integration/jinad/Dockerfiles/Dockerfile -t jinaai/jina:test-pip .\n</code></pre>\n<p>And then we get all the necessary requirements for JinaD.</p>\n<p>Now the next step is to spin up our flow, so let's check the test_integration.py</p>\n<pre><code class=\"language-python\">def test_flow():\n    if Path.cwd().name != 'jinad':\n        sys.exit(\n            'test_index_query_with_shards.py should only be run from the jinad base directory'\n        )\n\n    start_docker_compose(compose_yml)\n\n    time.sleep(10)\n\n    flow_id = send_flow(flow_yml, pod_dir)['flow_id']\n\n    print(f'Successfully started the flow: {flow_id}. Lets index some data')\n</code></pre>\n<p>As you can see, after checking we're on the right folder, we run start_docker_compose, and this will take care to build up our image with the Dockerfile we just saw. After that, the next step is to spin up our Flow, we have a print to see our Flow id just (case you can never have enough prints for mental health) for sanity.</p>\n<p>Ok! so we have our Flow spun up remotely already! <em>dances remotely</em> but now let's use it cause otherwise was just a lot of time I could have spent dancing remotely.</p>\n<pre><code class=\"language-python\">for x in range(100):\n    text = 'text:hey, dude ' + str(x)\n    text_indexed = call_api(\n        method='post',\n        url='http://0.0.0.0:45678/api/index',\n        payload={'top_k': 10, 'data': [text]},\n    )['index']['docs'][0]['text']\n\n    assert text_indexed == text\n</code></pre>\n<p>In this case, I'm going to index 100 documents, each with the text \"hey, dude\" plus the document number. And we check that the text we indexed is actually what we wanted to index.</p>\n<p>And just like that, we spun up our Flow and indexed some documents on it. If you run this, at this point you'd see on your terminal the confirmation of what we just did and the Flow ids:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*nRRE1m_FZRvyVbuF_HUMlg.png\" alt=\"\"></p>\n<p>But then that's not really useful until we query data, so we need to spin up another Flow, this time for query.</p>\n<p>Let's remember that a Flow is a Flow, it doesn't matter if it's for index or query, so we create another one that is exactly the same as we did for the index:</p>\n<pre><code class=\"language-python\">flow_id = send_flow(flow_yml, pod_dir)['flow_id']\nprint(f'Successfully started the flow: {flow_id}. Lets send some query')\n</code></pre>\n<p>And now in this new Flow we get the query results:</p>\n<pre><code class=\"language-python\">texts_matched = get_results(query='anything will match the same')\nassert len(texts_matched['search']['docs'][0]['matches']) == 10\n</code></pre>\n<p>Let's look at this a bit closer, what is that get_results doing</p>\n<pre><code class=\"language-python\">def call_api(method, url, payload=None, headers={\"Content-Type\": \"application/json\"}):\n    return getattr(requests, method)(\n        url, data=json.dumps(payload), headers=headers\n    ).json()\n\ndef get_results(query, top_k=10):\n    return call_api(\n        method=\"post\",\n        url=\"http://0.0.0.0:45678/api/search\",\n        payload={\"top_k\": top_k, \"data\": [query]},\n    )\n</code></pre>\n<p>As you can see, here we are specifying the URL, the method, and the payload. We defined the top_k as 10, and that's why on the previous assert, I was verifying that I indeed receive 10 matches.</p>\n<p>And that is iiiiit! the last part is just to stop everything docker related with</p>\n<pre><code class=\"language-python\">stop_docker_compose(compose_yml)\n</code></pre>\n<p>So this was fun and I hope was good enough for you to see how you can spin up Flows in different machines.</p>\n<p>I feel very sad I couldn't speak not even once about cats in this post so I'll come back to fix that sometime soon.\nIn the meantime, keep checking our <a href=\"https://github.com/jina-ai/examples\">other examples</a> and don't hesitate to contact us on our <a href=\"https://twitter.com/JinaAI_\">Twitter</a>, <a href=\"https://github.com/jina-ai\">Github</a>, or <a href=\"http://ina-ai.slack.com/\">Slack</a></p>\n"}},"__N_SSG":true}