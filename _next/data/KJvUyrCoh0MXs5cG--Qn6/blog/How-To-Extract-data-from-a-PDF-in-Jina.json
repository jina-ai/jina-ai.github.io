{"pageProps":{"post":{"title":"How To: Extract data from a PDF in Jina","date":"2020-09-24T08:56:39.923Z","slug":"How-To-Extract-data-from-a-PDF-in-Jina","author":"Susana Guzm√°n","content":"<p>Hello everyone!</p>\n<p>In the past weeks, I was working on creating a <code>PDFExtractor</code> so today I‚Äôll show you what I learned and how to extract data from your PDF in <a href=\"https://jina.ai/\">Jina</a>. Also on the way, I learned what a <em>Segmenter</em> does and how it is different from a C_rafter_, so maybe that helps you too.</p>\n<p><img src=\"https://miro.medium.com/max/812/1*AVmnea1f-zzeztIER9LC5Q.jpeg\" alt=\"\"></p>\n<p>I will split this post into two sections; one will be <strong>how you can use it</strong>, and the other will be <strong>how does that work?</strong> So if for now, you are not interested in how exactly this works, or if you know already, and just want to see the flow-example, go straight into the second part, otherwise, let‚Äôs get into the code.</p>\n<h3><strong>1) What kind of sorcery is this? (aka how does that¬†work?)</strong></h3>\n<p>Ok, the file we‚Äôll be talking about today is the <strong>PDFExtractorSegmenter</strong>, as you can see, it doesn‚Äôt even have anything in the <code>__init__</code>function, everything is happening in the <code>craft</code>  function_._</p>\n<pre><code class=\"language-python\">def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def craft(self, uri: str, buffer: bytes, *args, **kwargs) -> List[Dict]:\n        import fitz\n        import PyPDF2\n\n        # Open file\n        if uri:\n        elif buffer:\n        else:\n            raise ValueError('No value found in \"buffer\" or \"uri\"')\n\n        chunks = []\n        # Extract images\n        with pdf_img:\n\n        # Extract text\n        with pdf_text:\n      \n        return chunks\n</code></pre>\n<p>So the first thing I noticed here*, was that the <em>Segmenter</em> is returning a <em>List[Dict]</em> instead of <em>Dict</em> as <em>Crafters</em> do, why is that? <strong>So one of the core differences between a <em>Crafter</em> and a <em>Segmenter</em> is that the <em>Crafter</em> transforms 1-to-1 documents, while the <em>Segmenter</em> transforms 1-to-n.</strong> And this was important to notice because when I said *<em>the first thing I noticed here</em>, what I actually meant was ‚Äúafter I finished everything, I realised it wasn‚Äôt working and I had no idea why, and it turns out, I couldn‚Äôt use a <em>Crafter</em> because a PDF can have images and text, which are multiple documents, and therefore I needed to use a <em>Segmenter</em>‚Äù but as you can see, that was too long to write.</p>\n<p>So once we know this, we see why we need to use a Segmenter for this. Ok, got it, now what? The next part is to load the PDF document, in Jina we can use the URI of the document, as ‚Äúcats_are_awesome.pdf‚Äù, or directly the buffer data from the file. So then the first part is to check what kind of input are we using:</p>\n<pre><code class=\"language-python\"># Open file\n        if uri:\n            pdf_img = fitz.open(uri)\n            pdf_text = open(uri, 'rb')\n        elif buffer:\n            pdf_text = io.BytesIO(buffer)\n            pdf_img = fitz.open(stream=buffer, filetype=\"pdf\")\n        else:\n            raise ValueError('No value found in \"buffer\" or \"uri\"')\n\n</code></pre>\n<p>At the time of writing this, I didn‚Äôt find any good way to extract data from a PDF for both images and text together, so I decided to use two libraries that work very well for text or for images independently (but if you know of any that can handle both, you are super welcome to let us know or make a PR on <a href=\"https://github.com/jina-ai/jina/\">our repo</a>, we are all for Open Source üéâ ), and that‚Äôs why you see that we read the files twice: Once to extract the images, and once to extract the text.</p>\n<p>The next part is pretty straightforward: We simply use those libraries and append the result to the list of chunks we have (aka documents). When we append those chunks we also set if it‚Äôs a <code>text</code> or a <code>blob</code> (the images in this case) and the <code>mime_type</code>.</p>\n<pre><code class=\"language-python\">if text:\n  chunks.append(\n    dict(text=text, weight=1.0, mime_type=\"text/plain\"))\n</code></pre>\n<h3>2) Sure sure, but how can I use¬†it?????</h3>\n<p>Good, now that we know how that works we can go on our way to extract all beautiful cÃ∂aÃ∂tÃ∂sÃ∂ data from our PDFs.</p>\n<p>In the tests folder, we can see two tests, one of them is to also show how can the <code>PDFExtractorSegmenter</code> works with your flow.</p>\n<p>So let‚Äôs say you have your ‚Äúcats_are_awesome.pdf‚Äù, which has images (of cats, shocking) and text (a cat poem nonetheless), and you want everything from it:</p>\n<pre><code class=\"language-python\">def test_pdf_flow_mix():\n    path = os.path.join(cur_dir, 'cats_are_awesome.pdf')\n    f = Flow().add(uses='PDFExtractorSegmenter', array_in_pb=True)\n    with f:\n        f.search(input_fn=search_generator(path=path, buffer=None), output_fn=validate_mix_fn)\n</code></pre>\n<p>So the first thing will be to create your Flow:</p>\n<pre><code class=\"language-python\">`f = Flow().add(uses='PDFExtractorSegmenter', array\\_in\\_pb=True)`\n</code></pre>\n<p>There we say that we will use the PDFExtractorSegmenter. For the moment no need to go into the <code>array-in-pb</code> details, but set it to <code>True</code> if you are using images and text combined.</p>\n<p>Then we can start our search, and because I‚Äôm using¬†<code>.search</code>instead of¬†<code>.search_lines</code> or whatever, I need to create the <em>protobuf</em> <em>document</em> manually and I do that in the <code>search_generator</code>:</p>\n<pre><code class=\"language-python\">def search_generator(path: str, buffer: bytes):\n    d = jina_pb2.Document()\n    if buffer:\n        d.buffer = buffer\n    if path:\n        d.uri = path\n    yield d\n</code></pre>\n<p>Only thing to do there is specify the <em>buffer</em> or the <em>URI</em> to be used. After this, I will validate the results:</p>\n<pre><code class=\"language-python\">def validate_mix_fn(resp):\n    for d in resp.search.docs:\n        for chunk in range(len(d.chunks) - 1):\n            img = Image.open(os.path.join(cur_dir, f'test_img_{chunk}.jpg'))\n            blob = d.chunks[chunk].blob\n            assert blob.shape[1], blob.shape[0] == img.size\n        assert expected_text == d.chunks[2].text\n</code></pre>\n<p>Here is where you could get your data from the PDF and do all kinds of amazing stuff with it, I‚Äôm just checking that I‚Äôm getting the data I was expecting. The first <code>assert</code> validates the images and the second <code>assert</code> validates the text.</p>\n<hr>\n<p>And that‚Äôs it! You saw what this <code>PDFExtractorSegmenter</code> is doing and how to use it in your Flow üíÉüèºüíÉüèº</p>\n<p>Feel free to run this with your own data and contact us if you have any doubts/comments/pics of your cat to show.</p>\n<p>You can follow us on <a href=\"https://twitter.com/jinaAI_\">Twitter</a> or <a href=\"https://github.com/jina-ai\">Github,</a> or join our <a href=\"slack.jina.ai\">Slack community</a>.</p>\n<p><img src=\"https://miro.medium.com/max/718/1*W5U_pUWidkqGC01h-9pwUw.jpeg\" alt=\"\"></p>\n<p>By <a href=\"https://twitter.com/CapricaReloaded\">Susana Guzm√°n</a> on September 24, 2020.</p>\n","coverImage":"/assets/images/blog/how-to-pdf-01.png"}},"__N_SSG":true}