{"pageProps":{"post":{"title":"Jina and Terraform","date":"2020-11-05T14:00:39.923Z","slug":"Terraform-plus-Jina","author":"Susana Guzmán","content":"<h1>Jina ❤️ Terraform</h1>\n<p>Hi everyone!\nRecently I've been working with Terraform and tinkering with it to see how we can integrate it with Jina, so I thought to share with you all that I got.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*NOHC39WweKZll_StMSz6Vg.jpeg\" alt=\"\"></p>\n<p>First thing was to see what Terraform is and why everyone is so hyped about it. According to their website:</p>\n<blockquote class=\"blockquote ml-5 mr-5\">\n“Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently. Terraform can manage existing and popular service providers as well as custom in-house solutions.”\n</blockquote>\n<p>So that's a lot of fancy words to say it's a way for you to define your infrastructure via code. No need to go to AWS console and define every part of the infrastructure there. This comes in very handy since it's easier to debug when you have everything in one script so you can see all the details in one single place.</p>\n<p>Cool! Nice, sold, what now?</p>\n<p>Let's tweak our <a href=\"https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fjina-ai%2Fexamples%2Ftree%2Fmaster%2Fsouthpark-search\">South Park</a> example and instead of running our Docker image locally and then checking the results with Curl, let's set everything on an AWS instance and use that URL. And of course, because otherwise this post wouldn't make sense and I could be napping instead, let's set up the infrastructure with Terraform. </p>\n<hr>\n<h2>What will you need?</h2>\n<ol>\n<li>Terraform</li>\n<li>An AWS account</li>\n<li>The South Park Docker image</li>\n</ol>\n<p>The first thing is to install Terraform, and the installation will depend on your OS. I'm using macOS and I installed it via Homebrew:</p>\n<p><code>brew install terraform</code></p>\n<p>Once you have it installed, you need to configure your AWS, so on your console the first command you'll run is:</p>\n<p><code>aws configure</code></p>\n<p>This will ask for the credentials of your AWS account. Once you set this, you won't need to specify keys through code, which is good because that's a bad practice and you will end up with your account in quarantine…this might have or not have happened to me. </p>\n<p>Ok! we have all the setup ready and we can start to write our Terraform file. </p>\n<hr>\n<h2>What is happening? What is going to happen?</h2>\n<ol>\n<li>Create an image repository in AWS and push our South Park docker image</li>\n<li>Create an ECS Cluster &#x26; Task</li>\n<li>Create an ECS service &#x26; load balancer</li>\n</ol>\n<hr>\n<h2>Create an image repository in AWS and push our South Park docker image</h2>\n<p>We already have a Docker image with the South Park example so we don't need to create a new one.</p>\n<p>So the first thing is to create our Terraform script. It can be called whatever you want but with a .tf extension</p>\n<pre><code>provider \"aws\" {\n  version = \"~> 2.0\"\n  region  = \"us-east-2\"\n}\n\n#Create repo\nresource \"aws_ecr_repository\" \"southpark\" {\n  name = \"sp-repo\" # Naming my repository\n  tags = {\n    Name = \"southpark_repo\"\n  }\n}\n</code></pre>\n<p>The first part is to create a provider, with Terraform you can use <strong>AWS</strong>, <strong>Azure</strong>, <strong>Google Cloud Platform</strong> or many others, you can even write your own if you feel like life is too boring and you are an expert in Go. Whatever floats your boat. We'll use AWS for this example. The second part is to create our repository and we just need to set the name for it. The tags are always optional.</p>\n<p>This is the simplest Terraform file you can have, if you run this, Terraform will create an AWS repository for you, so let's do that. </p>\n<p>You can run </p>\n<p><code>terraform plan</code></p>\n<p>And this will print a plan with all the resources that will be created, modified, or deleted. In this case, we are only creating a resource so it will show that. This command is always nice to do for a sanity check, so you see what will happen before it happens, and if we agree with this we run the script with</p>\n<p><code>terraform apply</code></p>\n<p>After we run this, if we go to our AWS console, we'll see that an sp-repo has been created</p>\n<p><img src=\"https://miro.medium.com/max/700/1*uBSArpUv9O6DcpElkv4OFQ.png\" alt=\"\"></p>\n<p>Great, we have our repository ready. But at the moment it's empty, we need to push our Southpark docker image into it. To do that click on the repository name, and then in the upper right corner you'll see a button of \"View Push commands\"</p>\n<p><img src=\"https://miro.medium.com/max/700/1*ZcUygghp_Ifw2oCrgYca8w.png\" alt=\"\"></p>\n<p>We will use that information to push our Docker image</p>\n<p><img src=\"https://miro.medium.com/max/700/1*HkhGylAFXfmbqcniAOs_WA.png\" alt=\"\"></p>\n<p>Follow the steps that are shown there except step 2, we don't need that since we already have our Docker image. After you've done that, you should have the Southpark image in your repository, yay. </p>\n<h2>Create a Cluster &#x26; Task</h2>\n<p>The next step is to create a Cluster.</p>\n<pre><code>resource \"aws_ecs_cluster\" \"southpark_cluster\" {\n  name = \"southpark_cluster\" # Naming the cluster\n}\n</code></pre>\n<p>Ok, for the task we need a bit more details</p>\n<pre><code>#Create task\nresource \"aws_ecs_task_definition\" \"southpark_task\" {\n  family                   = \"southpark_task\" \n  container_definitions    = &#x3C;&#x3C;DEFINITION\n  [\n    {\n      \"name\": \"southpark_task\",\n      \"image\": \"${aws_ecr_repository.southpark.repository_url}\",\n      \"essential\": true,\n      \"portMappings\": [\n        {\n          \"containerPort\": 45678,\n          \"hostPort\": 45678\n        }\n      ],\n      \"memory\": 2014,\n      \"cpu\": 1024\n    }\n  ]\n  DEFINITION\n  requires_compatibilities = [\"FARGATE\"] # Stating that we are using ECS Fargate\n  network_mode             = \"awsvpc\"    # Using awsvpc as our network mode as this is required for Fargate\n  memory                   = 2048         # Specifying the memory our container requires\n  cpu                      = 1024        # Specifying the CPU our container requires\n  execution_role_arn       = \"${aws_iam_role.ecsExecutionRole.arn}\"\n}\n</code></pre>\n<p>For this, we will set the image URL of our Docker image and set the ports to <code>45678</code>, the same that the Southpark example is using. </p>\n<p>If you run <code>terraform apply</code> you should see a new cluster with a task attached to it</p>\n<p><img src=\"https://miro.medium.com/max/700/1*HJc1oek7Yf7ry0X5ZhyJ4w.png\" alt=\"\"></p>\n<h2>Create a service &#x26; load balancer</h2>\n<p>Ok, now we want to create a service that will use the task we just created as a blueprint. Here we will set the name of the service, a reference to our cluster, and to the task we just made. We will have only one container so we set <code>desired_count</code> to 1</p>\n<pre><code>#create service\nresource \"aws_ecs_service\" \"southpark_service\" {\n  name            = \"southpark_service\"                             # Naming our first service\n  cluster         = \"${aws_ecs_cluster.southpark_cluster.id}\"             # Referencing our created Cluster\n  task_definition = \"${aws_ecs_task_definition.southpark_task.arn}\" # Referencing the task our service will spin up\n  launch_type     = \"FARGATE\"\n  desired_count   = 1\n\n  load_balancer {\n    target_group_arn = \"${aws_lb_target_group.target_group.arn}\" # Referencing our target group\n    container_name   = \"${aws_ecs_task_definition.southpark_task.family}\"\n    container_port   = 45678 # Specifying the container port\n  }\n\n  network_configuration {\n    subnets          = data.aws_subnet_ids.default.ids\n    assign_public_ip = true                                                # Providing our containers with public IPs\n    security_groups  = [\"${aws_security_group.service_security_group.id}\"] # Setting the security group\n  }\n  depends_on = [aws_lb_listener.lsr, aws_iam_role_policy_attachment.ecsTaskExecutionRole_policy]\n}\n</code></pre>\n<p>We need a load balancer as the access point to our container. The load balancer needs a security group, so we need to create that too</p>\n<pre><code># Creating a security group for the load balancer:\n# This is the one that will receive traffic from internet\nresource \"aws_security_group\" \"load_balancer_security_group\" {\n  description = \"control access to the ALB\"\n  ingress {\n    from_port   = 45678\n    to_port     = 45678\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"] # Allowing traffic in from all sources\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\n#ECS will receive traffic from the ALB\nresource \"aws_security_group\" \"service_security_group\" {\n  description = \"Allow acces only from the ALB\"\n  ingress {\n    from_port = 0\n    to_port   = 0\n    protocol  = \"-1\"\n    # Only allowing traffic in from the load balancer security group\n    security_groups = [\"${aws_security_group.load_balancer_security_group.id}\"]\n  }\n\n  egress { \n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n</code></pre>\n<p>The idea is that all traffic will be received by our <em>load_balancer_security_group</em> (ALB), and the <em>service_security_group</em> will receive only from the ALB.</p>\n<p>Just for debugging, we have also an output to show us the URL that will use to access our Southpark example</p>\n<pre><code>output \"alb_url\" {\n  value = \"http://${aws_alb.application_load_balancer.dns_name}\"\n}\n</code></pre>\n<p>If you run <code>terraform apply</code> you will have now a cluster with 1 task and 1 service running on it.</p>\n<p><img src=\"https://miro.medium.com/max/700/1*HJc1oek7Yf7ry0X5ZhyJ4w.png\" alt=\"\"></p>\n<p>Also in your terminal, you'll see the output with the URL, we can use that one to check our results with CURL as in the Southpark example.</p>\n<p><img src=\"https://miro.medium.com/max/430/1*HAnkv3PSwmOiu17FSbC9lA.jpeg\" alt=\"\"></p>\n<p>That's it! But just before you go and nap, do a terraform destroy if you won't need it anymore so you release all the resources and don't get charged extra in AWS if you're using the free version.</p>\n","coverImage":"/assets/images/blog/jina_terraform.png"}},"__N_SSG":true}