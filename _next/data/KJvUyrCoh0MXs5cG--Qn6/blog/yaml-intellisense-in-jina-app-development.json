{"pageProps":{"post":{"title":"YAML Intellisense in Jina App Development","date":"2021-03-09T10:00:39.923Z","slug":"yaml-intellisense-in-jina-app-development","author":"Yongxuan Zhang","content":"<p>Developing a Jina app often means writing YAML configs. Our new release now supports Intellisense on PyCharm and VSCode for YAML-level autocompletion, syntax validation, members listing, and help display. These features make writing Flow/Executor YAML much easier and greatly speed up your Jina development. In this blog post, we'll introduce these new features and how to use them step by step.</p>\n<h2>What is YAML?</h2>\n<p>YAML (a recursive acronym for \"YAML Ain't Markup Language\") is a human-readable data-serialization language<a id=\"footnote2-back\" href=\"#footnote2\"> [2]</a>. It is often used to write configuration files that are simple and human-readable.</p>\n<p align=\"center\">\n<img src=\"/assets/images/blog/yaml_intellisense/yaml_confused.jpeg\" width=\"550\">\n<a id=\"footnote3-back\" href=\"#footnote3\">Image Source: [3]</a>\n</p>\n<h2>How is YAML used in Jina Development?</h2>\n<p>Jina applications usually contains two types of source files: Python files and YAML files. Python files define the entrypoint and customize logic. YAML is extensively used in Jina app development for Flow and Executor configuration.</p>\n<p>The following example demonstrates Jina's Flow configuration in YAML. Jina's YAML syntax can be found <a href=\"https://docs.jina.ai/chapters/yaml/\">here</a>.</p>\n<pre><code class=\"language-yaml\">jtype: Flow\nversion: '1'\npods:\n  - name: segmenter\n    show_exc_info: true\n    uses: pods/segment.yml\n    read_only: true\n  - name: encoder\n    show_exc_info: true\n    uses: pods/encode.yml\n    polling: any\n    shards: $JINA_PARALLEL\n    timeout_ready: 600000\n    read_only: true\n  - name: chunk_idx\n    polling: any\n    show_exc_info: true\n    uses: pods/chunk.yml\n    shards: $JINA_SHARDS\n  - name: doc_idx\n    polling: any\n    uses: pods/doc.yml\n    needs: gateway\n  - name: join_all\n    uses: _merge\n    needs: [doc_idx, chunk_idx]\n</code></pre>\n<p>Most IDE's provide Intellisense for Python development. However, for YAML config IDE's can only help to provide simple syntax highlighting. This may slow down your development speed since you need to navigate the documentation or codebase to write a correct and bug-free YAML config. This process may cause frustration and headaches, so Intellisense support is quite important.</p>\n<h2>Intellisense Support in Jina</h2>\n<p>Intellisense can provide code completion, syntax validation, argument filtering, default value filling and help text display. Enabling Intellisense will save you lots of time in writing YAML configuration files and avoid potential bugs.</p>\n<p align=\"center\">\n<img src=\"/assets/images/blog/yaml_intellisense/yaml_code.gif\" width=\"500\">\n<a id=\"footnote4-back\" href=\"#footnote4\">Image Source: [4]</a>\n</p>\n<h3>Configuration in Pycharm</h3>\n<p><strong>Step 1:</strong></p>\n<ul>\n<li>Click on the menu</li>\n<li>Go to <em>Preferences</em></li>\n<li>Search for <code>JSON Schema mappings</code></li>\n</ul>\n<p align=\"center\">\n<img src=\"/assets/images/blog/yaml_intellisense/yaml_pycharm_step1.png\" width=\"550\">\n</p>\n<p><strong>Step 2:</strong></p>\n<ul>\n<li>Add a new schema with a custom name.</li>\n<li>In the <em>Schema File or URL</em> write <code>https://api.jina.ai/schemas/latest.json</code>.</li>\n<li>Select <em>JSON Schema Version 7</em> for <em>Schema version</em>.</li>\n</ul>\n<p align=\"center\">\n<img src=\"/assets/images/blog/yaml_intellisense/yaml_pycharm_step2.png\" width=\"550\">\n</p>\n<p><strong>Step 3:</strong> Add a <em>file path pattern</em> and link it to <code>*.jaml</code> and <code>*.jina.yml</code>.</p>\n<p align=\"center\">\n<img src=\"/assets/images/blog/yaml_intellisense/yaml_pycharm_step3.png\" width=\"550\">\n</p>\n<h3>Configuration in VSCode</h3>\n<p><strong>Step 1:</strong> Install the extension: <em>YAML Language Support by Red Hat</em>;</p>\n<p align=\"center\">\n<img src=\"/assets/images/blog/yaml_intellisense/yaml_vscode_step1.png\" width=\"550\">\n</p>\n<p><strong>Step 2:</strong> In IDE-level <code>settings.json</code> add:</p>\n<pre><code class=\"language-json\">    \"yaml.schemas\": {\n        \"https://api.jina.ai/schemas/latest.json\": [\"/*.jina.yml\", \"/*.jaml\"],\n    }\n}\n</code></pre>\n<h3>Intellisense In Action</h3>\n<h4>Flow-level YAML</h4>\n<p align=\"center\">\n<img src=\"/assets/images/blog/yaml_intellisense/yaml_pycharm_schema.gif\" width=\"550\">\n</p>\n<p>First, let's create <code>helloworld.jina.yml</code> file in your IDE. You can also manually configure the schema if your IDE doesn't recognize it.</p>\n<p>Now type <code>jtype</code> in the first line and you will see the IDE suggests <code>flow</code> or a list of Executors in Jina. The IDE immediately marks it as yellow as it is not a valid Jina config file. Hover your mouse over it and it complains you haven't defined the required fields, <em>version</em> and <em>pods</em>.</p>\n<p>When you write something unrecognizable by the schema, the IDE  will mark it as yellow immediately.</p>\n<h4>Executor-level YAML</h4>\n<p align=\"center\">\n<img src=\"/assets/images/blog/yaml_intellisense/yaml_vscode_schema.gif\" width=\"550\">\n</p>\n<p>Now let's create a new YAML file for configuring <code>NumpyIndexer</code>.</p>\n<p>You can see the IDE will keep only the arguments that are accepted by that Executor. It also works on the nested level when you define a <code>request: on</code> , it will only show Drivers.\nAnd when you define the Drivers it will show relevant arguments that are accepted by that Driver.</p>\n<h3>Conclusion</h3>\n<p>In this post, we introduced our new features for YAML Intellisense. We hope this will help you speed up developing Jina applications.</p>\n<p>In the meantime, you can follow us on <a href=\"https://twitter.com/JinaAI_\">Twitter</a>, <a href=\"https://github.com/jina-ai/jina\">GitHub</a>, or join our <a href=\"https://slack.jina.ai/\">Slack community</a>.</p>\n<h2>Footnotes</h2>\n<p id=\"footnote1\">1. Cover image source: https://unsplash.com/photos/FCHlYvR5gJI </p> \n<p id=\"footnote2\">2. https://en.wikipedia.org/wiki/YAML </p> \n<p id=\"footnote3\">3. Image source: https://unsplash.com/photos/itPxkOCMMuY </p> \n<p id=\"footnote4\">4. Image source: https://giphy.com/gifs/memecandy-LmNwrBhejkK9EFP504 </p> \n","coverImage":"/assets/images/blog/yaml_intellisense/yaml_cover.jpeg"}},"__N_SSG":true}