{"pageProps":{"post":{"title":"New Jina primitive data types","date":"2020-12-01T00:54:00.550Z","slug":"New-Jina-primitive-data-types","author":"Susana GuzmÃ¡n","content":"<p>Some time ago I wrote <a href=\"https://medium.com/jina-ai/extract-data-from-a-pdf-in-jina-84b826d40a05\">this post</a> post on how to extract data from a PDF in Jina, however, a lot of things have happened since then and we have our own Primitive Data Types in Jina now ðŸŽ‰ðŸŽ‰ðŸŽ‰ So I thought to refactor those tests and write this little post on all the things youâ€™ll need now.</p>\n<p><img src=\"https://miro.medium.com/max/520/1*MhNUZ93PtyTToEBxiymkAw.jpeg\" alt=\"\"></p>\n<p>Iâ€™ll be honest, every time something needs to be refactored I feel the end of the world is near, but donâ€™t worry because this time itâ€™s actually fast and painless and youâ€™ll feel it looks better at the end.</p>\n<p>So the first thing we need to know is which kind of data types we have in Jina now, and there is a <a href=\"https://hanxiao.io/2020/11/22/Primitive-Data-Types-in-Neural-Search-System/\">great post</a> that talks about that already, so here we will only talk about what we need to change in the <a href=\"https://github.com/jina-ai/jina-hub/tree/master/segmenters/nlp/PDFExtractorSegmenter\">PDFExtractor</a> tests.</p>\n<p>So letâ€™s take a look at our code, first thing we had was to import the necessary files to work with Protobuf:</p>\n<pre><code class=\"language-python\">from jina.drivers.helper import array2pb\t\nfrom jina.proto import jina_pb2\n</code></pre>\n<p>But using Protobuf directly? pfff! thatâ€™s so pre-pandemic, ainâ€™t nobody got time for that, so we change it to:</p>\n<pre><code class=\"language-python\">from jina import Document\n</code></pre>\n<p>And that is of course much cleaner! And to use it, instead of having:</p>\n<pre><code class=\"language-python\">d = jina_pb2.Document()\n</code></pre>\n<p>we simply use it as a normal object:</p>\n<pre><code class=\"language-python\">d = Document()\n</code></pre>\n<p>And just as in the original example we have two ways to access our file, either we receive the path of the PDF or the bytes of it directly, and to access it we just need to check which type we are receiving:</p>\n<pre><code class=\"language-python\">def search_generator(path: str, buffer: bytes):\n    d = Document()\n    d.update_id()\n    if buffer:\n        d.buffer = buffer\n    if path:\n        d.content = path\n    yield d\n</code></pre>\n<p>What we did here was simply creating our Document and updating its ID, after that we have it ready to use either directly with the bytes or the URI.</p>\n<p>If you needed the data in a different format, you could also just use Jinaâ€™s convert_ methods, for example:</p>\n<pre><code class=\"language-python\">def search_generator(path: str, buffer: bytes):\n    d = Document()\n    d.update_id()\n    if path:\n        #I could convert this URI to buffer if needed\n        d.convert_uri_to_buffer()\n    yield d\n</code></pre>\n<p>This wasnâ€™t necessary for this example but could be useful for some other case, and as I said, we also have this <a href=\"https://hanxiao.io/2020/11/22/Primitive-Data-Types-in-Neural-Search-System/\">very detailed post</a> with all the necessary information you need to start using our new data types ðŸ¦„ðŸ¦„ðŸ¦„</p>\n<p>And thatâ€™s it! First time in my life that refactoring feels actually nice, so I hope this works for you too.</p>\n<p>Donâ€™t forget to check our <a href=\"https://github.com/jina-ai/examples\">other examples</a> to see what other new things we have now.</p>\n"}},"__N_SSG":true}